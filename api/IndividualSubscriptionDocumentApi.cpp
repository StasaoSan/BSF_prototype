/**
 * Nbsf_Management
 * Binding Support Management Service API.    Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).    All rights reserved.  
 *
 * The version of the OpenAPI document: 1.3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include <corvusoft/restbed/byte.hpp>
#include <corvusoft/restbed/string.hpp>
#include <corvusoft/restbed/settings.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/uri.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include <boost/lexical_cast.hpp>
#include <boost/algorithm/string.hpp>

#include "IndividualSubscriptionDocumentApi.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

namespace {
[[maybe_unused]]
std::string selectPreferredContentType(const std::vector<std::string>& contentTypes) {
    if (contentTypes.size() == 0) {
        return "application/json";
    }

    if (contentTypes.size() == 1) {
        return contentTypes.at(0);
    }

    static const std::array<std::string, 2> preferredTypes = {"json", "xml"};
    for (const auto& preferredType: preferredTypes) {
        const auto ret = std::find_if(contentTypes.cbegin(),
        contentTypes.cend(),
        [preferredType](const std::string& str) {
            return str.find(preferredType) != std::string::npos;});
        if (ret != contentTypes.cend()) {
            return *ret;
        }
    }

    return contentTypes.at(0);
}
}

IndividualSubscriptionDocumentApiException::IndividualSubscriptionDocumentApiException(int status_code, std::string what)
  : m_status(status_code),
    m_what(what)
{

}
int IndividualSubscriptionDocumentApiException::getStatus() const
{
    return m_status;
}
const char* IndividualSubscriptionDocumentApiException::what() const noexcept
{
    return m_what.c_str();
}


template<class MODEL_T>
MODEL_T extractJsonModelBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto model = MODEL_T(pt);
    return model;
}

template<class MODEL_T>
std::vector<MODEL_T> extractJsonArrayBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto arrayRet = std::vector<MODEL_T>();
    for (const auto& child: pt) {
        arrayRet.emplace_back(MODEL_T(child.second));
    }
    return arrayRet;
}

template <class KEY_T, class VAL_T>
std::string convertMapResponse(const std::map<KEY_T, VAL_T>& map)
{
    boost::property_tree::ptree pt;
    for(const auto &kv: map) {
    pt.push_back(boost::property_tree::ptree::value_type(
        boost::lexical_cast<std::string>(kv.first),
        boost::property_tree::ptree(
        boost::lexical_cast<std::string>(kv.second))));
    }
    std::stringstream sstream;
    write_json(sstream, pt);
    std::string result = sstream.str();
    return result;
}

namespace IndividualSubscriptionDocumentApiResources {
SubscriptionsSubIdResource::SubscriptionsSubIdResource(const std::string& context /* = "/nbsf-management/v1" */)
{
	this->set_path(context + "/subscriptions/{subId: .*}");
	this->set_method_handler("DELETE",
		std::bind(&SubscriptionsSubIdResource::handler_DELETE_internal, this,
			std::placeholders::_1));
	this->set_method_handler("PUT",
		std::bind(&SubscriptionsSubIdResource::handler_PUT_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> SubscriptionsSubIdResource::handleIndividualSubscriptionDocumentApiException(const IndividualSubscriptionDocumentApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> SubscriptionsSubIdResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> SubscriptionsSubIdResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void SubscriptionsSubIdResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void SubscriptionsSubIdResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void SubscriptionsSubIdResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void SubscriptionsSubIdResource::handler_DELETE_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string subId = request->get_path_parameter("subId", "");
    
    int status_code = 500;
    std::string result = "";
    
    try {
        status_code =
            handler_DELETE(subId);
    }
    catch(const IndividualSubscriptionDocumentApiException& e) {
        std::tie(status_code, result) = handleIndividualSubscriptionDocumentApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json","application/problem+json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 204) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        returnResponse(session, 204, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 307) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Temporary Redirect";
    
        // Description: The URI pointing to the resource located on the redirect target
        setResponseHeader(session, "Location");
        // Description: 'Identifier of target NF (service) instance towards which the request is redirected' 
        setResponseHeader(session, "3gpp-Sbi-Target-Nf-Id");
        returnResponse(session, 307, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 308) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Permanent Redirect";
    
        // Description: The URI pointing to the resource located on the redirect target
        setResponseHeader(session, "Location");
        // Description: 'Identifier of target NF (service) instance towards which the request is redirected' 
        setResponseHeader(session, "3gpp-Sbi-Target-Nf-Id");
        returnResponse(session, 308, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Bad request";
    
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unauthorized";
    
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Forbidden";
    
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Not Found";
    
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 429) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Too Many Requests";
    
        returnResponse(session, 429, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 500) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Internal Server Error";
    
        returnResponse(session, 500, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 503) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Service Unavailable";
    
        returnResponse(session, 503, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Generic Error";
    
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

// x-extension
void SubscriptionsSubIdResource::handler_PUT_internal(const std::shared_ptr<restbed::Session> session) {
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto bsfSubscription = extractJsonModelBodyParam<BsfSubscription>(bodyContent);
    // Getting the path params
    std::string subId = request->get_path_parameter("subId", "");
    
    int status_code = 500;
    BsfSubscriptionResp resultObject = BsfSubscriptionResp{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_PUT(subId, bsfSubscription);
    }
    catch(const IndividualSubscriptionDocumentApiException& e) {
        std::tie(status_code, result) = handleIndividualSubscriptionDocumentApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json","application/problem+json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 204) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        returnResponse(session, 204, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 307) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Temporary Redirect";
    
        result = resultObject.toJsonString();
        // Description: The URI pointing to the resource located on the redirect target
        setResponseHeader(session, "Location");
        // Description: 'Identifier of target NF (service) instance towards which the request is redirected' 
        setResponseHeader(session, "3gpp-Sbi-Target-Nf-Id");
        returnResponse(session, 307, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 308) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Permanent Redirect";
    
        result = resultObject.toJsonString();
        // Description: The URI pointing to the resource located on the redirect target
        setResponseHeader(session, "Location");
        // Description: 'Identifier of target NF (service) instance towards which the request is redirected' 
        setResponseHeader(session, "3gpp-Sbi-Target-Nf-Id");
        returnResponse(session, 308, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Bad request";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unauthorized";
    
        result = resultObject.toJsonString();
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Forbidden";
    
        result = resultObject.toJsonString();
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Not Found";
    
        result = resultObject.toJsonString();
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 411) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Length Required";
    
        result = resultObject.toJsonString();
        returnResponse(session, 411, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 413) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Payload Too Large";
    
        result = resultObject.toJsonString();
        returnResponse(session, 413, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 415) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unsupported Media Type";
    
        result = resultObject.toJsonString();
        returnResponse(session, 415, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 429) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Too Many Requests";
    
        result = resultObject.toJsonString();
        returnResponse(session, 429, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 500) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Internal Server Error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 500, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 503) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Service Unavailable";
    
        result = resultObject.toJsonString();
        returnResponse(session, 503, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Generic Error";
    
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

int SubscriptionsSubIdResource::handler_DELETE(
        std::string & subId)
{
    return handler_DELETE_func(subId);
}

std::pair<int, BsfSubscriptionResp> SubscriptionsSubIdResource::handler_PUT(
    std::string & subId, BsfSubscription & bsfSubscription)
{
    return handler_PUT_func(subId, bsfSubscription);
}

std::string SubscriptionsSubIdResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string SubscriptionsSubIdResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}

} /* namespace IndividualSubscriptionDocumentApiResources */

IndividualSubscriptionDocumentApi::IndividualSubscriptionDocumentApi(std::shared_ptr<restbed::Service> const& restbedService)
: m_service(restbedService)
{
}

IndividualSubscriptionDocumentApi::~IndividualSubscriptionDocumentApi() {}

std::shared_ptr<IndividualSubscriptionDocumentApiResources::SubscriptionsSubIdResource> IndividualSubscriptionDocumentApi::getSubscriptionsSubIdResource() {
    if (!m_spSubscriptionsSubIdResource) {
        setResource(std::make_shared<IndividualSubscriptionDocumentApiResources::SubscriptionsSubIdResource>());
    }
    return m_spSubscriptionsSubIdResource;
}
void IndividualSubscriptionDocumentApi::setResource(std::shared_ptr<IndividualSubscriptionDocumentApiResources::SubscriptionsSubIdResource> resource) {
    m_spSubscriptionsSubIdResource = resource;
    m_service->publish(m_spSubscriptionsSubIdResource);
}
void IndividualSubscriptionDocumentApi::setIndividualSubscriptionDocumentApiSubscriptionsSubIdResource(std::shared_ptr<IndividualSubscriptionDocumentApiResources::SubscriptionsSubIdResource> spSubscriptionsSubIdResource) {
    m_spSubscriptionsSubIdResource = spSubscriptionsSubIdResource;
    m_service->publish(m_spSubscriptionsSubIdResource);
}


void IndividualSubscriptionDocumentApi::publishDefaultResources() {
    if (!m_spSubscriptionsSubIdResource) {
        setResource(std::make_shared<IndividualSubscriptionDocumentApiResources::SubscriptionsSubIdResource>());
    }
}

std::shared_ptr<restbed::Service> IndividualSubscriptionDocumentApi::service() {
    return m_service;
}


}
}
}
}

