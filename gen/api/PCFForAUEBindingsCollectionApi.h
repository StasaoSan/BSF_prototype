/**
 * Nbsf_Management
 * Binding Support Management Service API.    Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).    All rights reserved.  
 *
 * The version of the OpenAPI document: 1.3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PCFForAUEBindingsCollectionApi.h
 *
 * 
 */

#ifndef PCFForAUEBindingsCollectionApi_H_
#define PCFForAUEBindingsCollectionApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "PcfForUeBinding.h"
#include "ProblemDetails.h"
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  PCFForAUEBindingsCollectionApiException: public std::exception
{
public:
    PCFForAUEBindingsCollectionApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace PCFForAUEBindingsCollectionApiResources {
/// <summary>
/// Create a new Individual PCF for a UE binding information
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  Pcf_ue_bindingsResource: public restbed::Resource
{
public:
    Pcf_ue_bindingsResource(const std::string& context = "/nbsf-management/v1");
    virtual ~Pcf_ue_bindingsResource() = default;

    Pcf_ue_bindingsResource(
        const Pcf_ue_bindingsResource& other) = default; // copy constructor
    Pcf_ue_bindingsResource(Pcf_ue_bindingsResource&& other) noexcept = default; // move constructor

    Pcf_ue_bindingsResource& operator=(const Pcf_ue_bindingsResource& other) = default; // copy assignment
    Pcf_ue_bindingsResource& operator=(Pcf_ue_bindingsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, PcfForUeBinding>(
        PcfForUeBinding & pcfForUeBinding)> handler_POST_func =
            [](PcfForUeBinding &) -> std::pair<int, PcfForUeBinding>
                { throw PCFForAUEBindingsCollectionApiException(501, "Not implemented"); };

    std::function<std::pair<int, std::vector<PcfForUeBinding>>(
        std::string & supi, std::string & gpsi, std::string & suppFeat)> handler_GET_func =
            [](std::string &, std::string &, std::string &) -> std::pair<int, std::vector<PcfForUeBinding>>
                { throw PCFForAUEBindingsCollectionApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, PcfForUeBinding> handler_POST(
        PcfForUeBinding & pcfForUeBinding);

    virtual std::pair<int, std::vector<PcfForUeBinding>> handler_GET(
        std::string & supi, std::string & gpsi, std::string & suppFeat);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handlePCFForAUEBindingsCollectionApiException(const PCFForAUEBindingsCollectionApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace PCFForAUEBindingsCollectionApiResources */

using PCFForAUEBindingsCollectionApiPcf_ue_bindingsResource [[deprecated]] = PCFForAUEBindingsCollectionApiResources::Pcf_ue_bindingsResource;

//
// The restbed service to actually implement the REST server
//
class  PCFForAUEBindingsCollectionApi
{
public:
    explicit PCFForAUEBindingsCollectionApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~PCFForAUEBindingsCollectionApi();

    std::shared_ptr<PCFForAUEBindingsCollectionApiResources::Pcf_ue_bindingsResource> getPcf_ue_bindingsResource();

    void setResource(std::shared_ptr<PCFForAUEBindingsCollectionApiResources::Pcf_ue_bindingsResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setPCFForAUEBindingsCollectionApiPcf_ue_bindingsResource(std::shared_ptr<PCFForAUEBindingsCollectionApiResources::Pcf_ue_bindingsResource> spPCFForAUEBindingsCollectionApiPcf_ue_bindingsResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<PCFForAUEBindingsCollectionApiResources::Pcf_ue_bindingsResource> m_spPcf_ue_bindingsResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* PCFForAUEBindingsCollectionApi_H_ */

