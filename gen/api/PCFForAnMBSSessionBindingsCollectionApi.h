/**
 * Nbsf_Management
 * Binding Support Management Service API.    Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).    All rights reserved.  
 *
 * The version of the OpenAPI document: 1.3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PCFForAnMBSSessionBindingsCollectionApi.h
 *
 * 
 */

#ifndef PCFForAnMBSSessionBindingsCollectionApi_H_
#define PCFForAnMBSSessionBindingsCollectionApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "MbsExtProblemDetails.h"
#include "MbsSessionId.h"
#include "PcfMbsBinding.h"
#include "ProblemDetails.h"
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  PCFForAnMBSSessionBindingsCollectionApiException: public std::exception
{
public:
    PCFForAnMBSSessionBindingsCollectionApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace PCFForAnMBSSessionBindingsCollectionApiResources {
/// <summary>
/// Create a new Individual PCF for an MBS Session binding.
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  Pcf_mbs_bindingsResource: public restbed::Resource
{
public:
    Pcf_mbs_bindingsResource(const std::string& context = "/nbsf-management/v1");
    virtual ~Pcf_mbs_bindingsResource() = default;

    Pcf_mbs_bindingsResource(
        const Pcf_mbs_bindingsResource& other) = default; // copy constructor
    Pcf_mbs_bindingsResource(Pcf_mbs_bindingsResource&& other) noexcept = default; // move constructor

    Pcf_mbs_bindingsResource& operator=(const Pcf_mbs_bindingsResource& other) = default; // copy assignment
    Pcf_mbs_bindingsResource& operator=(Pcf_mbs_bindingsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, PcfMbsBinding>(
        PcfMbsBinding & pcfMbsBinding)> handler_POST_func =
            [](PcfMbsBinding &) -> std::pair<int, PcfMbsBinding>
                { throw PCFForAnMBSSessionBindingsCollectionApiException(501, "Not implemented"); };

    std::function<std::pair<int, std::vector<PcfMbsBinding>>(
        MbsSessionId & mbsSessionId, std::string & suppFeat)> handler_GET_func =
            [](MbsSessionId &, std::string &) -> std::pair<int, std::vector<PcfMbsBinding>>
                { throw PCFForAnMBSSessionBindingsCollectionApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, PcfMbsBinding> handler_POST(
        PcfMbsBinding & pcfMbsBinding);

    virtual std::pair<int, std::vector<PcfMbsBinding>> handler_GET(
        MbsSessionId & mbsSessionId, std::string & suppFeat);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handlePCFForAnMBSSessionBindingsCollectionApiException(const PCFForAnMBSSessionBindingsCollectionApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace PCFForAnMBSSessionBindingsCollectionApiResources */

using PCFForAnMBSSessionBindingsCollectionApiPcf_mbs_bindingsResource [[deprecated]] = PCFForAnMBSSessionBindingsCollectionApiResources::Pcf_mbs_bindingsResource;

//
// The restbed service to actually implement the REST server
//
class  PCFForAnMBSSessionBindingsCollectionApi
{
public:
    explicit PCFForAnMBSSessionBindingsCollectionApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~PCFForAnMBSSessionBindingsCollectionApi();

    std::shared_ptr<PCFForAnMBSSessionBindingsCollectionApiResources::Pcf_mbs_bindingsResource> getPcf_mbs_bindingsResource();

    void setResource(std::shared_ptr<PCFForAnMBSSessionBindingsCollectionApiResources::Pcf_mbs_bindingsResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setPCFForAnMBSSessionBindingsCollectionApiPcf_mbs_bindingsResource(std::shared_ptr<PCFForAnMBSSessionBindingsCollectionApiResources::Pcf_mbs_bindingsResource> spPCFForAnMBSSessionBindingsCollectionApiPcf_mbs_bindingsResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<PCFForAnMBSSessionBindingsCollectionApiResources::Pcf_mbs_bindingsResource> m_spPcf_mbs_bindingsResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* PCFForAnMBSSessionBindingsCollectionApi_H_ */

