/**
 * Nbsf_Management
 * Binding Support Management Service API.    Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).    All rights reserved.  
 *
 * The version of the OpenAPI document: 1.3.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * IndividualPCFForAUEBindingDocumentApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_IndividualPCFForAUEBindingDocumentApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_IndividualPCFForAUEBindingDocumentApi_H_



#include "CppRestOpenAPIClient/ApiClient.h"

#include "CppRestOpenAPIClient/model/PcfForUeBinding.h"
#include "CppRestOpenAPIClient/model/PcfForUeBindingPatch.h"
#include "CppRestOpenAPIClient/model/ProblemDetails.h"
#include "CppRestOpenAPIClient/model/RedirectResponse.h"
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  IndividualPCFForAUEBindingDocumentApi 
{
public:

    explicit IndividualPCFForAUEBindingDocumentApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~IndividualPCFForAUEBindingDocumentApi();

    /// <summary>
    /// Delete an existing Individual PCF for a UE Binding information
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="bindingId">Represents the individual PCF for a UE Binding.</param>
    pplx::task<void> deleteIndPCFforUEBinding(
        utility::string_t bindingId
    ) const;
    /// <summary>
    /// Update an existing Individual PCF for a UE Binding information
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="bindingId">Represents the individual PCF for a UE Binding.</param>
    /// <param name="pcfForUeBindingPatch">Parameters to update the existing PCF for a UE binding.</param>
    pplx::task<std::shared_ptr<PcfForUeBinding>> updateIndPCFforUEBinding(
        utility::string_t bindingId,
        std::shared_ptr<PcfForUeBindingPatch> pcfForUeBindingPatch
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_IndividualPCFForAUEBindingDocumentApi_H_ */

