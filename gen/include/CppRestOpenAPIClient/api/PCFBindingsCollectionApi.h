/**
 * Nbsf_Management
 * Binding Support Management Service API.    Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).    All rights reserved.  
 *
 * The version of the OpenAPI document: 1.3.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PCFBindingsCollectionApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_PCFBindingsCollectionApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_PCFBindingsCollectionApi_H_



#include "CppRestOpenAPIClient/ApiClient.h"

#include "CppRestOpenAPIClient/model/ExtProblemDetails.h"
#include "CppRestOpenAPIClient/model/Ipv6Prefix.h"
#include "CppRestOpenAPIClient/model/PcfBinding.h"
#include "CppRestOpenAPIClient/model/ProblemDetails.h"
#include "CppRestOpenAPIClient/model/Snssai.h"
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  PCFBindingsCollectionApi 
{
public:

    explicit PCFBindingsCollectionApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~PCFBindingsCollectionApi();

    /// <summary>
    /// Create a new Individual PCF for a PDU Session binding information
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="pcfBinding"></param>
    pplx::task<std::shared_ptr<PcfBinding>> createPCFBinding(
        std::shared_ptr<PcfBinding> pcfBinding
    ) const;
    /// <summary>
    /// Read PCF for a PDU Session Bindings information
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="ipv4Addr">The IPv4 Address of the served UE. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="ipv6Prefix"> The IPv6 Address of the served UE. The NF service consumer shall append &#39;/128&#39; to the   IPv6 address in the attribute value. E.g. &#39;2001:db8:85a3::8a2e:370:7334/128&#39;.   (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="macAddr48">The MAC Address of the served UE. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="dnn">DNN. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="supi">Subscription Permanent Identifier. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="gpsi">Generic Public Subscription Identifier (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="snssai">The identification of slice. (optional, default to nullptr)</param>
    /// <param name="ipDomain">The IPv4 address domain identifier. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="suppFeat">To filter irrelevant responses related to unsupported features. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<PcfBinding>> getPCFBindings(
        boost::optional<utility::string_t> ipv4Addr,
        boost::optional<Ipv6Prefix> ipv6Prefix,
        boost::optional<utility::string_t> macAddr48,
        boost::optional<utility::string_t> dnn,
        boost::optional<utility::string_t> supi,
        boost::optional<utility::string_t> gpsi,
        boost::optional<std::shared_ptr<Snssai>> snssai,
        boost::optional<utility::string_t> ipDomain,
        boost::optional<utility::string_t> suppFeat
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_PCFBindingsCollectionApi_H_ */

