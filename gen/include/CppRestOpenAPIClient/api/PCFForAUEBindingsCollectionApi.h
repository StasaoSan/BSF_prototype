/**
 * Nbsf_Management
 * Binding Support Management Service API.    Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).    All rights reserved.  
 *
 * The version of the OpenAPI document: 1.3.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PCFForAUEBindingsCollectionApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_PCFForAUEBindingsCollectionApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_PCFForAUEBindingsCollectionApi_H_



#include "CppRestOpenAPIClient/ApiClient.h"

#include "CppRestOpenAPIClient/model/PcfForUeBinding.h"
#include "CppRestOpenAPIClient/model/ProblemDetails.h"
#include <vector>
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  PCFForAUEBindingsCollectionApi 
{
public:

    explicit PCFForAUEBindingsCollectionApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~PCFForAUEBindingsCollectionApi();

    /// <summary>
    /// Create a new Individual PCF for a UE binding information
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="pcfForUeBinding"></param>
    pplx::task<std::shared_ptr<PcfForUeBinding>> createPCFforUEBinding(
        std::shared_ptr<PcfForUeBinding> pcfForUeBinding
    ) const;
    /// <summary>
    /// Read PCF for a UE Bindings information
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="supi">Subscription Permanent Identifier. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="gpsi">Generic Public Subscription Identifier (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="suppFeat">To filter irrelevant responses related to unsupported features. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<PcfForUeBinding>>> getPCFForUeBindings(
        boost::optional<utility::string_t> supi,
        boost::optional<utility::string_t> gpsi,
        boost::optional<utility::string_t> suppFeat
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_PCFForAUEBindingsCollectionApi_H_ */

