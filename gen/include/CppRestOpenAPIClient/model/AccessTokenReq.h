/**
 * Nbsf_Management
 * Binding Support Management Service API.    © 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).    All rights reserved.  
 *
 * The version of the OpenAPI document: 1.3.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AccessTokenReq.h
 *
 * Contains information related to the access token request
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_AccessTokenReq_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_AccessTokenReq_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/Snssai.h"
#include "CppRestOpenAPIClient/model/PlmnIdNid.h"
#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/model/NFType.h"
#include "CppRestOpenAPIClient/model/PlmnId.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class PlmnId;
class Snssai;
class PlmnIdNid;


/// <summary>
/// Contains information related to the access token request
/// </summary>
class  AccessTokenReq
    : public ModelBase
{
public:
    AccessTokenReq();
    virtual ~AccessTokenReq();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// AccessTokenReq members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getGrantType() const;
    bool grantTypeIsSet() const;
    void unsetGrant_type();

    void setGrantType(const utility::string_t& value);

    /// <summary>
    /// String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.  
    /// </summary>
    utility::string_t getNfInstanceId() const;
    bool nfInstanceIdIsSet() const;
    void unsetNfInstanceId();

    void setNfInstanceId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<NFType> getNfType() const;
    bool nfTypeIsSet() const;
    void unsetNfType();

    void setNfType(const std::shared_ptr<NFType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<NFType> getTargetNfType() const;
    bool targetNfTypeIsSet() const;
    void unsetTargetNfType();

    void setTargetNfType(const std::shared_ptr<NFType>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getScope() const;
    bool scopeIsSet() const;
    void unsetScope();

    void setScope(const utility::string_t& value);

    /// <summary>
    /// String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.  
    /// </summary>
    utility::string_t getTargetNfInstanceId() const;
    bool targetNfInstanceIdIsSet() const;
    void unsetTargetNfInstanceId();

    void setTargetNfInstanceId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PlmnId> getRequesterPlmn() const;
    bool requesterPlmnIsSet() const;
    void unsetRequesterPlmn();

    void setRequesterPlmn(const std::shared_ptr<PlmnId>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<PlmnId>>& getRequesterPlmnList();
    bool requesterPlmnListIsSet() const;
    void unsetRequesterPlmnList();

    void setRequesterPlmnList(const std::vector<std::shared_ptr<PlmnId>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<Snssai>>& getRequesterSnssaiList();
    bool requesterSnssaiListIsSet() const;
    void unsetRequesterSnssaiList();

    void setRequesterSnssaiList(const std::vector<std::shared_ptr<Snssai>>& value);

    /// <summary>
    /// Fully Qualified Domain Name
    /// </summary>
    utility::string_t getRequesterFqdn() const;
    bool requesterFqdnIsSet() const;
    void unsetRequesterFqdn();

    void setRequesterFqdn(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<PlmnIdNid>>& getRequesterSnpnList();
    bool requesterSnpnListIsSet() const;
    void unsetRequesterSnpnList();

    void setRequesterSnpnList(const std::vector<std::shared_ptr<PlmnIdNid>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PlmnId> getTargetPlmn() const;
    bool targetPlmnIsSet() const;
    void unsetTargetPlmn();

    void setTargetPlmn(const std::shared_ptr<PlmnId>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PlmnIdNid> getTargetSnpn() const;
    bool targetSnpnIsSet() const;
    void unsetTargetSnpn();

    void setTargetSnpn(const std::shared_ptr<PlmnIdNid>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<Snssai>>& getTargetSnssaiList();
    bool targetSnssaiListIsSet() const;
    void unsetTargetSnssaiList();

    void setTargetSnssaiList(const std::vector<std::shared_ptr<Snssai>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getTargetNsiList();
    bool targetNsiListIsSet() const;
    void unsetTargetNsiList();

    void setTargetNsiList(const std::vector<utility::string_t>& value);

    /// <summary>
    /// NF Set Identifier (see clause 28.12 of 3GPP TS 23.003), formatted as the following string \&quot;set&lt;Set ID&gt;.&lt;nftype&gt;set.5gc.mnc&lt;MNC&gt;.mcc&lt;MCC&gt;\&quot;, or  \&quot;set&lt;SetID&gt;.&lt;NFType&gt;set.5gc.nid&lt;NID&gt;.mnc&lt;MNC&gt;.mcc&lt;MCC&gt;\&quot; with  &lt;MCC&gt; encoded as defined in clause 5.4.2 (\&quot;Mcc\&quot; data type definition)  &lt;MNC&gt; encoding the Mobile Network Code part of the PLMN, comprising 3 digits.    If there are only 2 significant digits in the MNC, one \&quot;0\&quot; digit shall be inserted    at the left side to fill the 3 digits coding of MNC.  Pattern: &#39;^[0-9]{3}$&#39; &lt;NFType&gt; encoded as a value defined in Table 6.1.6.3.3-1 of 3GPP TS 29.510 but    with lower case characters &lt;Set ID&gt; encoded as a string of characters consisting of    alphabetic characters (A-Z and a-z), digits (0-9) and/or the hyphen (-) and that    shall end with either an alphabetic character or a digit.  
    /// </summary>
    utility::string_t getTargetNfSetId() const;
    bool targetNfSetIdIsSet() const;
    void unsetTargetNfSetId();

    void setTargetNfSetId(const utility::string_t& value);

    /// <summary>
    /// NF Service Set Identifier (see clause 28.12 of 3GPP TS 23.003) formatted as the following  string \&quot;set&lt;Set ID&gt;.sn&lt;Service Name&gt;.nfi&lt;NF Instance ID&gt;.5gc.mnc&lt;MNC&gt;.mcc&lt;MCC&gt;\&quot;, or  \&quot;set&lt;SetID&gt;.sn&lt;ServiceName&gt;.nfi&lt;NFInstanceID&gt;.5gc.nid&lt;NID&gt;.mnc&lt;MNC&gt;.mcc&lt;MCC&gt;\&quot; with  &lt;MCC&gt; encoded as defined in clause 5.4.2 (\&quot;Mcc\&quot; data type definition)   &lt;MNC&gt; encoding the Mobile Network Code part of the PLMN, comprising 3 digits.    If there are only 2 significant digits in the MNC, one \&quot;0\&quot; digit shall be inserted    at the left side to fill the 3 digits coding of MNC.  Pattern: &#39;^[0-9]{3}$&#39; &lt;NID&gt; encoded as defined in clause 5.4.2 (\&quot;Nid\&quot; data type definition)  &lt;NFInstanceId&gt; encoded as defined in clause 5.3.2  &lt;ServiceName&gt; encoded as defined in 3GPP TS 29.510  &lt;Set ID&gt; encoded as a string of characters consisting of alphabetic    characters (A-Z and a-z), digits (0-9) and/or the hyphen (-) and that shall end    with either an alphabetic character or a digit. 
    /// </summary>
    utility::string_t getTargetNfServiceSetId() const;
    bool targetNfServiceSetIdIsSet() const;
    void unsetTargetNfServiceSetId();

    void setTargetNfServiceSetId(const utility::string_t& value);

    /// <summary>
    /// String providing an URI formatted according to RFC 3986.
    /// </summary>
    utility::string_t getHnrfAccessTokenUri() const;
    bool hnrfAccessTokenUriIsSet() const;
    void unsetHnrfAccessTokenUri();

    void setHnrfAccessTokenUri(const utility::string_t& value);

    /// <summary>
    /// String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.  
    /// </summary>
    utility::string_t getSourceNfInstanceId() const;
    bool sourceNfInstanceIdIsSet() const;
    void unsetSourceNfInstanceId();

    void setSourceNfInstanceId(const utility::string_t& value);


protected:
    utility::string_t m_Grant_type;
    bool m_Grant_typeIsSet;
    utility::string_t m_NfInstanceId;
    bool m_NfInstanceIdIsSet;
    std::shared_ptr<NFType> m_NfType;
    bool m_NfTypeIsSet;
    std::shared_ptr<NFType> m_TargetNfType;
    bool m_TargetNfTypeIsSet;
    utility::string_t m_Scope;
    bool m_ScopeIsSet;
    utility::string_t m_TargetNfInstanceId;
    bool m_TargetNfInstanceIdIsSet;
    std::shared_ptr<PlmnId> m_RequesterPlmn;
    bool m_RequesterPlmnIsSet;
    std::vector<std::shared_ptr<PlmnId>> m_RequesterPlmnList;
    bool m_RequesterPlmnListIsSet;
    std::vector<std::shared_ptr<Snssai>> m_RequesterSnssaiList;
    bool m_RequesterSnssaiListIsSet;
    utility::string_t m_RequesterFqdn;
    bool m_RequesterFqdnIsSet;
    std::vector<std::shared_ptr<PlmnIdNid>> m_RequesterSnpnList;
    bool m_RequesterSnpnListIsSet;
    std::shared_ptr<PlmnId> m_TargetPlmn;
    bool m_TargetPlmnIsSet;
    std::shared_ptr<PlmnIdNid> m_TargetSnpn;
    bool m_TargetSnpnIsSet;
    std::vector<std::shared_ptr<Snssai>> m_TargetSnssaiList;
    bool m_TargetSnssaiListIsSet;
    std::vector<utility::string_t> m_TargetNsiList;
    bool m_TargetNsiListIsSet;
    utility::string_t m_TargetNfSetId;
    bool m_TargetNfSetIdIsSet;
    utility::string_t m_TargetNfServiceSetId;
    bool m_TargetNfServiceSetIdIsSet;
    utility::string_t m_HnrfAccessTokenUri;
    bool m_HnrfAccessTokenUriIsSet;
    utility::string_t m_SourceNfInstanceId;
    bool m_SourceNfInstanceIdIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_AccessTokenReq_H_ */
