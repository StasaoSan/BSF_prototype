/**
 * Nbsf_Management
 * Binding Support Management Service API.    Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).    All rights reserved.  
 *
 * The version of the OpenAPI document: 1.3.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BsfEventNotification.h
 *
 * Contains an event notification.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BsfEventNotification_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BsfEventNotification_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/SnssaiDnnPair.h"
#include "CppRestOpenAPIClient/model/BsfEvent.h"
#include "CppRestOpenAPIClient/model/PcfForUeInfo.h"
#include <vector>
#include "CppRestOpenAPIClient/model/PcfForPduSessionInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class PcfForUeInfo;
class PcfForPduSessionInfo;
class SnssaiDnnPair;


/// <summary>
/// Contains an event notification.
/// </summary>
class  BsfEventNotification
    : public ModelBase
{
public:
    BsfEventNotification();
    virtual ~BsfEventNotification();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BsfEventNotification members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BsfEvent> getEvent() const;
    bool eventIsSet() const;
    void unsetEvent();

    void setEvent(const std::shared_ptr<BsfEvent>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PcfForUeInfo> getPcfForUeInfo() const;
    bool pcfForUeInfoIsSet() const;
    void unsetPcfForUeInfo();

    void setPcfForUeInfo(const std::shared_ptr<PcfForUeInfo>& value);

    /// <summary>
    /// The information of the PCF for a PDU session.
    /// </summary>
    std::vector<std::shared_ptr<PcfForPduSessionInfo>>& getPcfForPduSessInfos();
    bool pcfForPduSessInfosIsSet() const;
    void unsetPcfForPduSessInfos();

    void setPcfForPduSessInfos(const std::vector<std::shared_ptr<PcfForPduSessionInfo>>& value);

    /// <summary>
    /// Matching S-NSSAI and DNN pairs.
    /// </summary>
    std::vector<std::shared_ptr<SnssaiDnnPair>>& getMatchSnssaiDnns();
    bool matchSnssaiDnnsIsSet() const;
    void unsetMatchSnssaiDnns();

    void setMatchSnssaiDnns(const std::vector<std::shared_ptr<SnssaiDnnPair>>& value);


protected:
    std::shared_ptr<BsfEvent> m_Event;
    bool m_EventIsSet;
    std::shared_ptr<PcfForUeInfo> m_PcfForUeInfo;
    bool m_PcfForUeInfoIsSet;
    std::vector<std::shared_ptr<PcfForPduSessionInfo>> m_PcfForPduSessInfos;
    bool m_PcfForPduSessInfosIsSet;
    std::vector<std::shared_ptr<SnssaiDnnPair>> m_MatchSnssaiDnns;
    bool m_MatchSnssaiDnnsIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BsfEventNotification_H_ */
