/**
 * Nbsf_Management
 * Binding Support Management Service API.    © 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).    All rights reserved.  
 *
 * The version of the OpenAPI document: 1.3.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BsfSubscriptionResp.h
 *
 * It represents a response to a modification or creation request of an Individual Binding   Subscription resource. It may contain the notification of the already met events.  
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BsfSubscriptionResp_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BsfSubscriptionResp_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/BsfNotification.h"
#include "CppRestOpenAPIClient/model/SnssaiDnnPair.h"
#include "CppRestOpenAPIClient/model/BsfEventNotification.h"
#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/model/BsfEvent.h"
#include <vector>
#include "CppRestOpenAPIClient/model/BsfSubscription.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class SnssaiDnnPair;
class BsfEventNotification;


/// <summary>
/// It represents a response to a modification or creation request of an Individual Binding   Subscription resource. It may contain the notification of the already met events.  
/// </summary>
class  BsfSubscriptionResp
    : public ModelBase
{
public:
    BsfSubscriptionResp();
    virtual ~BsfSubscriptionResp();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BsfSubscriptionResp members

    /// <summary>
    /// Contain te subscribed events.
    /// </summary>
    std::vector<std::shared_ptr<BsfEvent>>& getEvents();
    bool eventsIsSet() const;
    void unsetEvents();

    void setEvents(const std::vector<std::shared_ptr<BsfEvent>>& value);

    /// <summary>
    /// String providing an URI formatted according to RFC 3986.
    /// </summary>
    utility::string_t getNotifUri() const;
    bool notifUriIsSet() const;
    void unsetNotifUri();

    void setNotifUri(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getNotifCorreId() const;
    bool notifCorreIdIsSet() const;
    void unsetNotifCorreId();

    void setNotifCorreId(const utility::string_t& value);

    /// <summary>
    /// String identifying a Supi that shall contain either an IMSI, a network specific identifier, a Global Cable Identifier (GCI) or a Global Line Identifier (GLI) as specified in clause  2.2A of 3GPP TS 23.003. It shall be formatted as follows  - for an IMSI \&quot;imsi-&lt;imsi&gt;\&quot;, where &lt;imsi&gt; shall be formatted according to clause 2.2    of 3GPP TS 23.003 that describes an IMSI.  - for a network specific identifier \&quot;nai-&lt;nai&gt;, where &lt;nai&gt; shall be formatted    according to clause 28.7.2 of 3GPP TS 23.003 that describes an NAI.  - for a GCI \&quot;gci-&lt;gci&gt;\&quot;, where &lt;gci&gt; shall be formatted according to clause 28.15.2    of 3GPP TS 23.003.  - for a GLI \&quot;gli-&lt;gli&gt;\&quot;, where &lt;gli&gt; shall be formatted according to clause 28.16.2 of    3GPP TS 23.003.To enable that the value is used as part of an URI, the string shall    only contain characters allowed according to the \&quot;lower-with-hyphen\&quot; naming convention    defined in 3GPP TS 29.501. 
    /// </summary>
    utility::string_t getSupi() const;
    bool supiIsSet() const;
    void unsetSupi();

    void setSupi(const utility::string_t& value);

    /// <summary>
    /// String identifying a Gpsi shall contain either an External Id or an MSISDN.  It shall be formatted as follows -External Identifier&#x3D; \&quot;extid-&#39;extid&#39;, where &#39;extid&#39;  shall be formatted according to clause 19.7.2 of 3GPP TS 23.003 that describes an  External Identifier.  
    /// </summary>
    utility::string_t getGpsi() const;
    bool gpsiIsSet() const;
    void unsetGpsi();

    void setGpsi(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<SnssaiDnnPair> getSnssaiDnnPairs() const;
    bool snssaiDnnPairsIsSet() const;
    void unsetSnssaiDnnPairs();

    void setSnssaiDnnPairs(const std::shared_ptr<SnssaiDnnPair>& value);

    /// <summary>
    /// Represents the additional S-NSSAI and DNN pair(s) for which the binding event report(s)  shall apply.  
    /// </summary>
    std::vector<std::shared_ptr<SnssaiDnnPair>>& getAddSnssaiDnnPairs();
    bool addSnssaiDnnPairsIsSet() const;
    void unsetAddSnssaiDnnPairs();

    void setAddSnssaiDnnPairs(const std::vector<std::shared_ptr<SnssaiDnnPair>>& value);

    /// <summary>
    /// A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \&quot;0\&quot; to \&quot;9\&quot;,  \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to \&quot;F\&quot; and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported. 
    /// </summary>
    utility::string_t getSuppFeat() const;
    bool suppFeatIsSet() const;
    void unsetSuppFeat();

    void setSuppFeat(const utility::string_t& value);

    /// <summary>
    /// Notifications about Individual Events.
    /// </summary>
    std::vector<std::shared_ptr<BsfEventNotification>>& getEventNotifs();
    bool eventNotifsIsSet() const;
    void unsetEventNotifs();

    void setEventNotifs(const std::vector<std::shared_ptr<BsfEventNotification>>& value);


protected:
    std::vector<std::shared_ptr<BsfEvent>> m_Events;
    bool m_EventsIsSet;
    utility::string_t m_NotifUri;
    bool m_NotifUriIsSet;
    utility::string_t m_NotifCorreId;
    bool m_NotifCorreIdIsSet;
    utility::string_t m_Supi;
    bool m_SupiIsSet;
    utility::string_t m_Gpsi;
    bool m_GpsiIsSet;
    std::shared_ptr<SnssaiDnnPair> m_SnssaiDnnPairs;
    bool m_SnssaiDnnPairsIsSet;
    std::vector<std::shared_ptr<SnssaiDnnPair>> m_AddSnssaiDnnPairs;
    bool m_AddSnssaiDnnPairsIsSet;
    utility::string_t m_SuppFeat;
    bool m_SuppFeatIsSet;
    std::vector<std::shared_ptr<BsfEventNotification>> m_EventNotifs;
    bool m_EventNotifsIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BsfSubscriptionResp_H_ */
