/**
 * Nbsf_Management
 * Binding Support Management Service API.    Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).    All rights reserved.  
 *
 * The version of the OpenAPI document: 1.3.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * IpAddr.h
 *
 * Contains an IP adresse.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_IpAddr_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_IpAddr_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/Ipv6Prefix.h"
#include "CppRestOpenAPIClient/model/Ipv6Addr.h"
#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// Contains an IP adresse.
/// </summary>
class  IpAddr
    : public ModelBase
{
public:
    IpAddr();
    virtual ~IpAddr();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// IpAddr members

    /// <summary>
    /// String identifying a IPv4 address formatted in the &#39;dotted decimal&#39; notation as defined in RFC 1166. 
    /// </summary>
    utility::string_t getIpv4Addr() const;
    bool ipv4AddrIsSet() const;
    void unsetIpv4Addr();

    void setIpv4Addr(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Ipv6Addr> getIpv6Addr() const;
    bool ipv6AddrIsSet() const;
    void unsetIpv6Addr();

    void setIpv6Addr(const std::shared_ptr<Ipv6Addr>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Ipv6Prefix> getIpv6Prefix() const;
    bool ipv6PrefixIsSet() const;
    void unsetIpv6Prefix();

    void setIpv6Prefix(const std::shared_ptr<Ipv6Prefix>& value);


protected:
    utility::string_t m_Ipv4Addr;
    bool m_Ipv4AddrIsSet;
    std::shared_ptr<Ipv6Addr> m_Ipv6Addr;
    bool m_Ipv6AddrIsSet;
    std::shared_ptr<Ipv6Prefix> m_Ipv6Prefix;
    bool m_Ipv6PrefixIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_IpAddr_H_ */
