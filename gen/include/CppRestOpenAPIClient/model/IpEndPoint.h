/**
 * Nbsf_Management
 * Binding Support Management Service API.    Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).    All rights reserved.  
 *
 * The version of the OpenAPI document: 1.3.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * IpEndPoint.h
 *
 * IP addressing information of a given NFService; it consists on, e.g. IP address, TCP port, transport protocol... 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_IpEndPoint_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_IpEndPoint_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/TransportProtocol.h"
#include "CppRestOpenAPIClient/model/Ipv6Addr.h"
#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// IP addressing information of a given NFService; it consists on, e.g. IP address, TCP port, transport protocol... 
/// </summary>
class  IpEndPoint
    : public ModelBase
{
public:
    IpEndPoint();
    virtual ~IpEndPoint();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// IpEndPoint members

    /// <summary>
    /// String identifying a IPv4 address formatted in the &#39;dotted decimal&#39; notation as defined in RFC 1166. 
    /// </summary>
    utility::string_t getIpv4Address() const;
    bool ipv4AddressIsSet() const;
    void unsetIpv4Address();

    void setIpv4Address(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Ipv6Addr> getIpv6Address() const;
    bool ipv6AddressIsSet() const;
    void unsetIpv6Address();

    void setIpv6Address(const std::shared_ptr<Ipv6Addr>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TransportProtocol> getTransport() const;
    bool transportIsSet() const;
    void unsetTransport();

    void setTransport(const std::shared_ptr<TransportProtocol>& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getPort() const;
    bool portIsSet() const;
    void unsetPort();

    void setPort(int32_t value);


protected:
    utility::string_t m_Ipv4Address;
    bool m_Ipv4AddressIsSet;
    std::shared_ptr<Ipv6Addr> m_Ipv6Address;
    bool m_Ipv6AddressIsSet;
    std::shared_ptr<TransportProtocol> m_Transport;
    bool m_TransportIsSet;
    int32_t m_Port;
    bool m_PortIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_IpEndPoint_H_ */
