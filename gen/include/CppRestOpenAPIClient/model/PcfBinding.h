/**
 * Nbsf_Management
 * Binding Support Management Service API.    © 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).    All rights reserved.  
 *
 * The version of the OpenAPI document: 1.3.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PcfBinding.h
 *
 * Identifies an Individual PCF for a PDU Session binding.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_PcfBinding_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_PcfBinding_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/ParameterCombination.h"
#include "CppRestOpenAPIClient/model/Ipv6Prefix.h"
#include "CppRestOpenAPIClient/model/IpEndPoint.h"
#include "CppRestOpenAPIClient/model/BindingLevel.h"
#include "CppRestOpenAPIClient/model/Snssai.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class IpEndPoint;
class Snssai;
class ParameterCombination;


/// <summary>
/// Identifies an Individual PCF for a PDU Session binding.
/// </summary>
class  PcfBinding
    : public ModelBase
{
public:
    PcfBinding();
    virtual ~PcfBinding();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// PcfBinding members

    /// <summary>
    /// String identifying a Supi that shall contain either an IMSI, a network specific identifier, a Global Cable Identifier (GCI) or a Global Line Identifier (GLI) as specified in clause  2.2A of 3GPP TS 23.003. It shall be formatted as follows  - for an IMSI \&quot;imsi-&lt;imsi&gt;\&quot;, where &lt;imsi&gt; shall be formatted according to clause 2.2    of 3GPP TS 23.003 that describes an IMSI.  - for a network specific identifier \&quot;nai-&lt;nai&gt;, where &lt;nai&gt; shall be formatted    according to clause 28.7.2 of 3GPP TS 23.003 that describes an NAI.  - for a GCI \&quot;gci-&lt;gci&gt;\&quot;, where &lt;gci&gt; shall be formatted according to clause 28.15.2    of 3GPP TS 23.003.  - for a GLI \&quot;gli-&lt;gli&gt;\&quot;, where &lt;gli&gt; shall be formatted according to clause 28.16.2 of    3GPP TS 23.003.To enable that the value is used as part of an URI, the string shall    only contain characters allowed according to the \&quot;lower-with-hyphen\&quot; naming convention    defined in 3GPP TS 29.501. 
    /// </summary>
    utility::string_t getSupi() const;
    bool supiIsSet() const;
    void unsetSupi();

    void setSupi(const utility::string_t& value);

    /// <summary>
    /// String identifying a Gpsi shall contain either an External Id or an MSISDN.  It shall be formatted as follows -External Identifier&#x3D; \&quot;extid-&#39;extid&#39;, where &#39;extid&#39;  shall be formatted according to clause 19.7.2 of 3GPP TS 23.003 that describes an  External Identifier.  
    /// </summary>
    utility::string_t getGpsi() const;
    bool gpsiIsSet() const;
    void unsetGpsi();

    void setGpsi(const utility::string_t& value);

    /// <summary>
    /// String identifying a IPv4 address formatted in the &#39;dotted decimal&#39; notation as defined in RFC 1166. 
    /// </summary>
    utility::string_t getIpv4Addr() const;
    bool ipv4AddrIsSet() const;
    void unsetIpv4Addr();

    void setIpv4Addr(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Ipv6Prefix> getIpv6Prefix() const;
    bool ipv6PrefixIsSet() const;
    void unsetIpv6Prefix();

    void setIpv6Prefix(const std::shared_ptr<Ipv6Prefix>& value);

    /// <summary>
    /// The additional IPv6 Address Prefixes of the served UE.
    /// </summary>
    std::vector<std::shared_ptr<Ipv6Prefix>>& getAddIpv6Prefixes();
    bool addIpv6PrefixesIsSet() const;
    void unsetAddIpv6Prefixes();

    void setAddIpv6Prefixes(const std::vector<std::shared_ptr<Ipv6Prefix>>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getIpDomain() const;
    bool ipDomainIsSet() const;
    void unsetIpDomain();

    void setIpDomain(const utility::string_t& value);

    /// <summary>
    /// String identifying a MAC address formatted in the hexadecimal notation according to clause 1.1 and clause 2.1 of RFC 7042. 
    /// </summary>
    utility::string_t getMacAddr48() const;
    bool macAddr48IsSet() const;
    void unsetMacAddr48();

    void setMacAddr48(const utility::string_t& value);

    /// <summary>
    /// The additional MAC Addresses of the served UE.
    /// </summary>
    std::vector<std::shared_ptr<utility::string_t>>& getAddMacAddrs();
    bool addMacAddrsIsSet() const;
    void unsetAddMacAddrs();

    void setAddMacAddrs(const std::vector<std::shared_ptr<utility::string_t>>& value);

    /// <summary>
    /// String representing a Data Network as defined in clause 9A of 3GPP TS 23.003;  it shall contain either a DNN Network Identifier, or a full DNN with both the Network  Identifier and Operator Identifier, as specified in 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in which the labels are separated by dots  (e.g. \&quot;Label1.Label2.Label3\&quot;). 
    /// </summary>
    utility::string_t getDnn() const;
    bool dnnIsSet() const;
    void unsetDnn();

    void setDnn(const utility::string_t& value);

    /// <summary>
    /// Fully Qualified Domain Name
    /// </summary>
    utility::string_t getPcfFqdn() const;
    bool pcfFqdnIsSet() const;
    void unsetPcfFqdn();

    void setPcfFqdn(const utility::string_t& value);

    /// <summary>
    /// IP end points of the PCF hosting the Npcf_PolicyAuthorization service
    /// </summary>
    std::vector<std::shared_ptr<IpEndPoint>>& getPcfIpEndPoints();
    bool pcfIpEndPointsIsSet() const;
    void unsetPcfIpEndPoints();

    void setPcfIpEndPoints(const std::vector<std::shared_ptr<IpEndPoint>>& value);

    /// <summary>
    /// Fully Qualified Domain Name
    /// </summary>
    utility::string_t getPcfDiamHost() const;
    bool pcfDiamHostIsSet() const;
    void unsetPcfDiamHost();

    void setPcfDiamHost(const utility::string_t& value);

    /// <summary>
    /// Fully Qualified Domain Name
    /// </summary>
    utility::string_t getPcfDiamRealm() const;
    bool pcfDiamRealmIsSet() const;
    void unsetPcfDiamRealm();

    void setPcfDiamRealm(const utility::string_t& value);

    /// <summary>
    /// Fully Qualified Domain Name
    /// </summary>
    utility::string_t getPcfSmFqdn() const;
    bool pcfSmFqdnIsSet() const;
    void unsetPcfSmFqdn();

    void setPcfSmFqdn(const utility::string_t& value);

    /// <summary>
    /// IP end points of the PCF hosting the Npcf_SMPolicyControl service.
    /// </summary>
    std::vector<std::shared_ptr<IpEndPoint>>& getPcfSmIpEndPoints();
    bool pcfSmIpEndPointsIsSet() const;
    void unsetPcfSmIpEndPoints();

    void setPcfSmIpEndPoints(const std::vector<std::shared_ptr<IpEndPoint>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Snssai> getSnssai() const;
    bool snssaiIsSet() const;
    void unsetSnssai();

    void setSnssai(const std::shared_ptr<Snssai>& value);

    /// <summary>
    /// A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \&quot;0\&quot; to \&quot;9\&quot;,  \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to \&quot;F\&quot; and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported. 
    /// </summary>
    utility::string_t getSuppFeat() const;
    bool suppFeatIsSet() const;
    void unsetSuppFeat();

    void setSuppFeat(const utility::string_t& value);

    /// <summary>
    /// String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.  
    /// </summary>
    utility::string_t getPcfId() const;
    bool pcfIdIsSet() const;
    void unsetPcfId();

    void setPcfId(const utility::string_t& value);

    /// <summary>
    /// NF Set Identifier (see clause 28.12 of 3GPP TS 23.003), formatted as the following string \&quot;set&lt;Set ID&gt;.&lt;nftype&gt;set.5gc.mnc&lt;MNC&gt;.mcc&lt;MCC&gt;\&quot;, or  \&quot;set&lt;SetID&gt;.&lt;NFType&gt;set.5gc.nid&lt;NID&gt;.mnc&lt;MNC&gt;.mcc&lt;MCC&gt;\&quot; with  &lt;MCC&gt; encoded as defined in clause 5.4.2 (\&quot;Mcc\&quot; data type definition)  &lt;MNC&gt; encoding the Mobile Network Code part of the PLMN, comprising 3 digits.    If there are only 2 significant digits in the MNC, one \&quot;0\&quot; digit shall be inserted    at the left side to fill the 3 digits coding of MNC.  Pattern: &#39;^[0-9]{3}$&#39; &lt;NFType&gt; encoded as a value defined in Table 6.1.6.3.3-1 of 3GPP TS 29.510 but    with lower case characters &lt;Set ID&gt; encoded as a string of characters consisting of    alphabetic characters (A-Z and a-z), digits (0-9) and/or the hyphen (-) and that    shall end with either an alphabetic character or a digit.  
    /// </summary>
    utility::string_t getPcfSetId() const;
    bool pcfSetIdIsSet() const;
    void unsetPcfSetId();

    void setPcfSetId(const utility::string_t& value);

    /// <summary>
    /// string with format &#39;date-time&#39; as defined in OpenAPI.
    /// </summary>
    utility::datetime getRecoveryTime() const;
    bool recoveryTimeIsSet() const;
    void unsetRecoveryTime();

    void setRecoveryTime(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ParameterCombination> getParaCom() const;
    bool paraComIsSet() const;
    void unsetParaCom();

    void setParaCom(const std::shared_ptr<ParameterCombination>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BindingLevel> getBindLevel() const;
    bool bindLevelIsSet() const;
    void unsetBindLevel();

    void setBindLevel(const std::shared_ptr<BindingLevel>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<utility::string_t>>& getIpv4FrameRouteList();
    bool ipv4FrameRouteListIsSet() const;
    void unsetIpv4FrameRouteList();

    void setIpv4FrameRouteList(const std::vector<std::shared_ptr<utility::string_t>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<Ipv6Prefix>>& getIpv6FrameRouteList();
    bool ipv6FrameRouteListIsSet() const;
    void unsetIpv6FrameRouteList();

    void setIpv6FrameRouteList(const std::vector<std::shared_ptr<Ipv6Prefix>>& value);


protected:
    utility::string_t m_Supi;
    bool m_SupiIsSet;
    utility::string_t m_Gpsi;
    bool m_GpsiIsSet;
    utility::string_t m_Ipv4Addr;
    bool m_Ipv4AddrIsSet;
    std::shared_ptr<Ipv6Prefix> m_Ipv6Prefix;
    bool m_Ipv6PrefixIsSet;
    std::vector<std::shared_ptr<Ipv6Prefix>> m_AddIpv6Prefixes;
    bool m_AddIpv6PrefixesIsSet;
    utility::string_t m_IpDomain;
    bool m_IpDomainIsSet;
    utility::string_t m_MacAddr48;
    bool m_MacAddr48IsSet;
    std::vector<std::shared_ptr<utility::string_t>> m_AddMacAddrs;
    bool m_AddMacAddrsIsSet;
    utility::string_t m_Dnn;
    bool m_DnnIsSet;
    utility::string_t m_PcfFqdn;
    bool m_PcfFqdnIsSet;
    std::vector<std::shared_ptr<IpEndPoint>> m_PcfIpEndPoints;
    bool m_PcfIpEndPointsIsSet;
    utility::string_t m_PcfDiamHost;
    bool m_PcfDiamHostIsSet;
    utility::string_t m_PcfDiamRealm;
    bool m_PcfDiamRealmIsSet;
    utility::string_t m_PcfSmFqdn;
    bool m_PcfSmFqdnIsSet;
    std::vector<std::shared_ptr<IpEndPoint>> m_PcfSmIpEndPoints;
    bool m_PcfSmIpEndPointsIsSet;
    std::shared_ptr<Snssai> m_Snssai;
    bool m_SnssaiIsSet;
    utility::string_t m_SuppFeat;
    bool m_SuppFeatIsSet;
    utility::string_t m_PcfId;
    bool m_PcfIdIsSet;
    utility::string_t m_PcfSetId;
    bool m_PcfSetIdIsSet;
    utility::datetime m_RecoveryTime;
    bool m_RecoveryTimeIsSet;
    std::shared_ptr<ParameterCombination> m_ParaCom;
    bool m_ParaComIsSet;
    std::shared_ptr<BindingLevel> m_BindLevel;
    bool m_BindLevelIsSet;
    std::vector<std::shared_ptr<utility::string_t>> m_Ipv4FrameRouteList;
    bool m_Ipv4FrameRouteListIsSet;
    std::vector<std::shared_ptr<Ipv6Prefix>> m_Ipv6FrameRouteList;
    bool m_Ipv6FrameRouteListIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_PcfBinding_H_ */
