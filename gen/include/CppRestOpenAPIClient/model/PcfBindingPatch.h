/**
 * Nbsf_Management
 * Binding Support Management Service API.    Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).    All rights reserved.  
 *
 * The version of the OpenAPI document: 1.3.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PcfBindingPatch.h
 *
 * Identifies an Individual PCF binding used in an HTTP Patch method.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_PcfBindingPatch_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_PcfBindingPatch_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/Ipv6Prefix.h"
#include "CppRestOpenAPIClient/model/IpEndPoint.h"
#include <cpprest/details/basic_types.h>
#include <vector>
#include "CppRestOpenAPIClient/model/Ipv6PrefixRm.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class IpEndPoint;


/// <summary>
/// Identifies an Individual PCF binding used in an HTTP Patch method.
/// </summary>
class  PcfBindingPatch
    : public ModelBase
{
public:
    PcfBindingPatch();
    virtual ~PcfBindingPatch();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// PcfBindingPatch members

    /// <summary>
    /// String identifying a IPv4 address formatted in the &#39;dotted decimal&#39; notation as defined in RFC 1166 with the OpenAPI defined &#39;nullable: true&#39; property. 
    /// </summary>
    utility::string_t getIpv4Addr() const;
    bool ipv4AddrIsSet() const;
    void unsetIpv4Addr();

    void setIpv4Addr(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getIpDomain() const;
    bool ipDomainIsSet() const;
    void unsetIpDomain();

    void setIpDomain(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Ipv6PrefixRm> getIpv6Prefix() const;
    bool ipv6PrefixIsSet() const;
    void unsetIpv6Prefix();

    void setIpv6Prefix(const std::shared_ptr<Ipv6PrefixRm>& value);

    /// <summary>
    /// The additional IPv6 Address Prefixes of the served UE.
    /// </summary>
    std::vector<std::shared_ptr<Ipv6Prefix>>& getAddIpv6Prefixes();
    bool addIpv6PrefixesIsSet() const;
    void unsetAddIpv6Prefixes();

    void setAddIpv6Prefixes(const std::vector<std::shared_ptr<Ipv6Prefix>>& value);

    /// <summary>
    /// \&quot;String identifying a MAC address formatted in the hexadecimal notation according to clause 1.1 and clause 2.1 of RFC 7042 with the OpenAPI &#39;nullable: true&#39; property.\&quot; 
    /// </summary>
    utility::string_t getMacAddr48() const;
    bool macAddr48IsSet() const;
    void unsetMacAddr48();

    void setMacAddr48(const utility::string_t& value);

    /// <summary>
    /// The additional MAC Addresses of the served UE.
    /// </summary>
    std::vector<std::shared_ptr<utility::string_t>>& getAddMacAddrs();
    bool addMacAddrsIsSet() const;
    void unsetAddMacAddrs();

    void setAddMacAddrs(const std::vector<std::shared_ptr<utility::string_t>>& value);

    /// <summary>
    /// String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.  
    /// </summary>
    utility::string_t getPcfId() const;
    bool pcfIdIsSet() const;
    void unsetPcfId();

    void setPcfId(const utility::string_t& value);

    /// <summary>
    /// Fully Qualified Domain Name
    /// </summary>
    utility::string_t getPcfFqdn() const;
    bool pcfFqdnIsSet() const;
    void unsetPcfFqdn();

    void setPcfFqdn(const utility::string_t& value);

    /// <summary>
    /// IP end points of the PCF hosting the Npcf_PolicyAuthorization service.
    /// </summary>
    std::vector<std::shared_ptr<IpEndPoint>>& getPcfIpEndPoints();
    bool pcfIpEndPointsIsSet() const;
    void unsetPcfIpEndPoints();

    void setPcfIpEndPoints(const std::vector<std::shared_ptr<IpEndPoint>>& value);

    /// <summary>
    /// Fully Qualified Domain Name
    /// </summary>
    utility::string_t getPcfDiamHost() const;
    bool pcfDiamHostIsSet() const;
    void unsetPcfDiamHost();

    void setPcfDiamHost(const utility::string_t& value);

    /// <summary>
    /// Fully Qualified Domain Name
    /// </summary>
    utility::string_t getPcfDiamRealm() const;
    bool pcfDiamRealmIsSet() const;
    void unsetPcfDiamRealm();

    void setPcfDiamRealm(const utility::string_t& value);


protected:
    utility::string_t m_Ipv4Addr;
    bool m_Ipv4AddrIsSet;
    utility::string_t m_IpDomain;
    bool m_IpDomainIsSet;
    std::shared_ptr<Ipv6PrefixRm> m_Ipv6Prefix;
    bool m_Ipv6PrefixIsSet;
    std::vector<std::shared_ptr<Ipv6Prefix>> m_AddIpv6Prefixes;
    bool m_AddIpv6PrefixesIsSet;
    utility::string_t m_MacAddr48;
    bool m_MacAddr48IsSet;
    std::vector<std::shared_ptr<utility::string_t>> m_AddMacAddrs;
    bool m_AddMacAddrsIsSet;
    utility::string_t m_PcfId;
    bool m_PcfIdIsSet;
    utility::string_t m_PcfFqdn;
    bool m_PcfFqdnIsSet;
    std::vector<std::shared_ptr<IpEndPoint>> m_PcfIpEndPoints;
    bool m_PcfIpEndPointsIsSet;
    utility::string_t m_PcfDiamHost;
    bool m_PcfDiamHostIsSet;
    utility::string_t m_PcfDiamRealm;
    bool m_PcfDiamRealmIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_PcfBindingPatch_H_ */
