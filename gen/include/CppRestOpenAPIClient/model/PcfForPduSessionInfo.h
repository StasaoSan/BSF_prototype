/**
 * Nbsf_Management
 * Binding Support Management Service API.    Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).    All rights reserved.  
 *
 * The version of the OpenAPI document: 1.3.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PcfForPduSessionInfo.h
 *
 * Contains the informaiton of the PCF for a PDU session.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_PcfForPduSessionInfo_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_PcfForPduSessionInfo_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/Ipv6Prefix.h"
#include "CppRestOpenAPIClient/model/IpEndPoint.h"
#include "CppRestOpenAPIClient/model/BindingLevel.h"
#include "CppRestOpenAPIClient/model/Snssai.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class Snssai;
class IpEndPoint;


/// <summary>
/// Contains the informaiton of the PCF for a PDU session.
/// </summary>
class  PcfForPduSessionInfo
    : public ModelBase
{
public:
    PcfForPduSessionInfo();
    virtual ~PcfForPduSessionInfo();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// PcfForPduSessionInfo members

    /// <summary>
    /// String representing a Data Network as defined in clause 9A of 3GPP TS 23.003;  it shall contain either a DNN Network Identifier, or a full DNN with both the Network  Identifier and Operator Identifier, as specified in 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in which the labels are separated by dots  (e.g. \&quot;Label1.Label2.Label3\&quot;). 
    /// </summary>
    utility::string_t getDnn() const;
    bool dnnIsSet() const;
    void unsetDnn();

    void setDnn(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Snssai> getSnssai() const;
    bool snssaiIsSet() const;
    void unsetSnssai();

    void setSnssai(const std::shared_ptr<Snssai>& value);

    /// <summary>
    /// Fully Qualified Domain Name
    /// </summary>
    utility::string_t getPcfFqdn() const;
    bool pcfFqdnIsSet() const;
    void unsetPcfFqdn();

    void setPcfFqdn(const utility::string_t& value);

    /// <summary>
    /// IP end points of the PCF hosting the Npcf_AmPolicyAuthorization service.
    /// </summary>
    std::vector<std::shared_ptr<IpEndPoint>>& getPcfIpEndPoints();
    bool pcfIpEndPointsIsSet() const;
    void unsetPcfIpEndPoints();

    void setPcfIpEndPoints(const std::vector<std::shared_ptr<IpEndPoint>>& value);

    /// <summary>
    /// String identifying a IPv4 address formatted in the &#39;dotted decimal&#39; notation as defined in RFC 1166 with the OpenAPI defined &#39;nullable: true&#39; property. 
    /// </summary>
    utility::string_t getIpv4Addr() const;
    bool ipv4AddrIsSet() const;
    void unsetIpv4Addr();

    void setIpv4Addr(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getIpDomain() const;
    bool ipDomainIsSet() const;
    void unsetIpDomain();

    void setIpDomain(const utility::string_t& value);

    /// <summary>
    /// The IPv6 Address Prefixes of the served UE.
    /// </summary>
    std::vector<std::shared_ptr<Ipv6Prefix>>& getIpv6Prefixes();
    bool ipv6PrefixesIsSet() const;
    void unsetIpv6Prefixes();

    void setIpv6Prefixes(const std::vector<std::shared_ptr<Ipv6Prefix>>& value);

    /// <summary>
    /// The MAC Addresses of the served UE.
    /// </summary>
    std::vector<std::shared_ptr<utility::string_t>>& getMacAddrs();
    bool macAddrsIsSet() const;
    void unsetMacAddrs();

    void setMacAddrs(const std::vector<std::shared_ptr<utility::string_t>>& value);

    /// <summary>
    /// String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.  
    /// </summary>
    utility::string_t getPcfId() const;
    bool pcfIdIsSet() const;
    void unsetPcfId();

    void setPcfId(const utility::string_t& value);

    /// <summary>
    /// NF Set Identifier (see clause 28.12 of 3GPP TS 23.003), formatted as the following string \&quot;set&lt;Set ID&gt;.&lt;nftype&gt;set.5gc.mnc&lt;MNC&gt;.mcc&lt;MCC&gt;\&quot;, or  \&quot;set&lt;SetID&gt;.&lt;NFType&gt;set.5gc.nid&lt;NID&gt;.mnc&lt;MNC&gt;.mcc&lt;MCC&gt;\&quot; with  &lt;MCC&gt; encoded as defined in clause 5.4.2 (\&quot;Mcc\&quot; data type definition)  &lt;MNC&gt; encoding the Mobile Network Code part of the PLMN, comprising 3 digits.    If there are only 2 significant digits in the MNC, one \&quot;0\&quot; digit shall be inserted    at the left side to fill the 3 digits coding of MNC.  Pattern: &#39;^[0-9]{3}$&#39; &lt;NFType&gt; encoded as a value defined in Table 6.1.6.3.3-1 of 3GPP TS 29.510 but    with lower case characters &lt;Set ID&gt; encoded as a string of characters consisting of    alphabetic characters (A-Z and a-z), digits (0-9) and/or the hyphen (-) and that    shall end with either an alphabetic character or a digit.  
    /// </summary>
    utility::string_t getPcfSetId() const;
    bool pcfSetIdIsSet() const;
    void unsetPcfSetId();

    void setPcfSetId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BindingLevel> getBindLevel() const;
    bool bindLevelIsSet() const;
    void unsetBindLevel();

    void setBindLevel(const std::shared_ptr<BindingLevel>& value);


protected:
    utility::string_t m_Dnn;
    bool m_DnnIsSet;
    std::shared_ptr<Snssai> m_Snssai;
    bool m_SnssaiIsSet;
    utility::string_t m_PcfFqdn;
    bool m_PcfFqdnIsSet;
    std::vector<std::shared_ptr<IpEndPoint>> m_PcfIpEndPoints;
    bool m_PcfIpEndPointsIsSet;
    utility::string_t m_Ipv4Addr;
    bool m_Ipv4AddrIsSet;
    utility::string_t m_IpDomain;
    bool m_IpDomainIsSet;
    std::vector<std::shared_ptr<Ipv6Prefix>> m_Ipv6Prefixes;
    bool m_Ipv6PrefixesIsSet;
    std::vector<std::shared_ptr<utility::string_t>> m_MacAddrs;
    bool m_MacAddrsIsSet;
    utility::string_t m_PcfId;
    bool m_PcfIdIsSet;
    utility::string_t m_PcfSetId;
    bool m_PcfSetIdIsSet;
    std::shared_ptr<BindingLevel> m_BindLevel;
    bool m_BindLevelIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_PcfForPduSessionInfo_H_ */
