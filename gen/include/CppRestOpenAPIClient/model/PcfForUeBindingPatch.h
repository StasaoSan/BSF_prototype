/**
 * Nbsf_Management
 * Binding Support Management Service API.    Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).    All rights reserved.  
 *
 * The version of the OpenAPI document: 1.3.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PcfForUeBindingPatch.h
 *
 * Identifies the updates of an Individual PCF for a UE binding.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_PcfForUeBindingPatch_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_PcfForUeBindingPatch_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/IpEndPoint.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class IpEndPoint;


/// <summary>
/// Identifies the updates of an Individual PCF for a UE binding.
/// </summary>
class  PcfForUeBindingPatch
    : public ModelBase
{
public:
    PcfForUeBindingPatch();
    virtual ~PcfForUeBindingPatch();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// PcfForUeBindingPatch members

    /// <summary>
    /// Fully Qualified Domain Name
    /// </summary>
    utility::string_t getPcfForUeFqdn() const;
    bool pcfForUeFqdnIsSet() const;
    void unsetPcfForUeFqdn();

    void setPcfForUeFqdn(const utility::string_t& value);

    /// <summary>
    /// IP end points of the PCF hosting the Npcf_AmPolicyAuthorization service.
    /// </summary>
    std::vector<std::shared_ptr<IpEndPoint>>& getPcfForUeIpEndPoints();
    bool pcfForUeIpEndPointsIsSet() const;
    void unsetPcfForUeIpEndPoints();

    void setPcfForUeIpEndPoints(const std::vector<std::shared_ptr<IpEndPoint>>& value);

    /// <summary>
    /// String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.  
    /// </summary>
    utility::string_t getPcfId() const;
    bool pcfIdIsSet() const;
    void unsetPcfId();

    void setPcfId(const utility::string_t& value);


protected:
    utility::string_t m_PcfForUeFqdn;
    bool m_PcfForUeFqdnIsSet;
    std::vector<std::shared_ptr<IpEndPoint>> m_PcfForUeIpEndPoints;
    bool m_PcfForUeIpEndPointsIsSet;
    utility::string_t m_PcfId;
    bool m_PcfIdIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_PcfForUeBindingPatch_H_ */
