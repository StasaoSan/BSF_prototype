/**
 * Nbsf_Management
 * Binding Support Management Service API.    Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).    All rights reserved.  
 *
 * The version of the OpenAPI document: 1.3.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * RedirectResponse.h
 *
 * The response shall include a Location header field containing a different URI  (pointing to a different URI of an other service instance), or the same URI if a request  is redirected to the same target resource via a different SCP. 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_RedirectResponse_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_RedirectResponse_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// The response shall include a Location header field containing a different URI  (pointing to a different URI of an other service instance), or the same URI if a request  is redirected to the same target resource via a different SCP. 
/// </summary>
class  RedirectResponse
    : public ModelBase
{
public:
    RedirectResponse();
    virtual ~RedirectResponse();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// RedirectResponse members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCause() const;
    bool causeIsSet() const;
    void unsetCause();

    void setCause(const utility::string_t& value);

    /// <summary>
    /// String providing an URI formatted according to RFC 3986.
    /// </summary>
    utility::string_t getTargetScp() const;
    bool targetScpIsSet() const;
    void unsetTargetScp();

    void setTargetScp(const utility::string_t& value);

    /// <summary>
    /// String providing an URI formatted according to RFC 3986.
    /// </summary>
    utility::string_t getTargetSepp() const;
    bool targetSeppIsSet() const;
    void unsetTargetSepp();

    void setTargetSepp(const utility::string_t& value);


protected:
    utility::string_t m_Cause;
    bool m_CauseIsSet;
    utility::string_t m_TargetScp;
    bool m_TargetScpIsSet;
    utility::string_t m_TargetSepp;
    bool m_TargetSeppIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_RedirectResponse_H_ */
