/**
 * Nbsf_Management
 * Binding Support Management Service API.    Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).    All rights reserved.  
 *
 * The version of the OpenAPI document: 1.3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AccessTokenErr.h
 *
 * Error returned in the access token response message
 */

#ifndef AccessTokenErr_H_
#define AccessTokenErr_H_



#include <string>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Error returned in the access token response message
/// </summary>
class  AccessTokenErr 
{
public:
    AccessTokenErr() = default;
    explicit AccessTokenErr(boost::property_tree::ptree const& pt);
    virtual ~AccessTokenErr() = default;

    AccessTokenErr(const AccessTokenErr& other) = default; // copy constructor
    AccessTokenErr(AccessTokenErr&& other) noexcept = default; // move constructor

    AccessTokenErr& operator=(const AccessTokenErr& other) = default; // copy assignment
    AccessTokenErr& operator=(AccessTokenErr&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// AccessTokenErr members

    /// <summary>
    /// 
    /// </summary>
    std::string getError() const;
    void setError(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getErrorDescription() const;
    void setErrorDescription(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getErrorUri() const;
    void setErrorUri(std::string value);

protected:
    std::string m_Error = "";
    std::string m_Error_description = "";
    std::string m_Error_uri = "";
};

std::vector<AccessTokenErr> createAccessTokenErrVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<AccessTokenErr>(const AccessTokenErr& val) {
    return val.toPropertyTree();
}

template<>
inline AccessTokenErr fromPt<AccessTokenErr>(const boost::property_tree::ptree& pt) {
    AccessTokenErr ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* AccessTokenErr_H_ */
