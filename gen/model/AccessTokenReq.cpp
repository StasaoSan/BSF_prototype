/**
 * Nbsf_Management
 * Binding Support Management Service API.    Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).    All rights reserved.  
 *
 * The version of the OpenAPI document: 1.3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "AccessTokenReq.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <algorithm>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

AccessTokenReq::AccessTokenReq(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string AccessTokenReq::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void AccessTokenReq::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree AccessTokenReq::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("grant_type", m_Grant_type);
	pt.put("nfInstanceId", m_NfInstanceId);
	pt.add_child("nfType", m_NfType.toPropertyTree());
	pt.add_child("targetNfType", m_TargetNfType.toPropertyTree());
	pt.put("scope", m_Scope);
	pt.put("targetNfInstanceId", m_TargetNfInstanceId);
	pt.add_child("requesterPlmn", m_RequesterPlmn.toPropertyTree());
	// generate tree for RequesterPlmnList
    tmp_node.clear();
	if (!m_RequesterPlmnList.empty()) {
        tmp_node = toPt(m_RequesterPlmnList);
		pt.add_child("requesterPlmnList", tmp_node);
		tmp_node.clear();
	}
	// generate tree for RequesterSnssaiList
    tmp_node.clear();
	if (!m_RequesterSnssaiList.empty()) {
        tmp_node = toPt(m_RequesterSnssaiList);
		pt.add_child("requesterSnssaiList", tmp_node);
		tmp_node.clear();
	}
	pt.put("requesterFqdn", m_RequesterFqdn);
	// generate tree for RequesterSnpnList
    tmp_node.clear();
	if (!m_RequesterSnpnList.empty()) {
        tmp_node = toPt(m_RequesterSnpnList);
		pt.add_child("requesterSnpnList", tmp_node);
		tmp_node.clear();
	}
	pt.add_child("targetPlmn", m_TargetPlmn.toPropertyTree());
	pt.add_child("targetSnpn", m_TargetSnpn.toPropertyTree());
	// generate tree for TargetSnssaiList
    tmp_node.clear();
	if (!m_TargetSnssaiList.empty()) {
        tmp_node = toPt(m_TargetSnssaiList);
		pt.add_child("targetSnssaiList", tmp_node);
		tmp_node.clear();
	}
	// generate tree for TargetNsiList
    tmp_node.clear();
	if (!m_TargetNsiList.empty()) {
        tmp_node = toPt(m_TargetNsiList);
		pt.add_child("targetNsiList", tmp_node);
		tmp_node.clear();
	}
	pt.put("targetNfSetId", m_TargetNfSetId);
	pt.put("targetNfServiceSetId", m_TargetNfServiceSetId);
	pt.put("hnrfAccessTokenUri", m_HnrfAccessTokenUri);
	pt.put("sourceNfInstanceId", m_SourceNfInstanceId);
	return pt;
}

void AccessTokenReq::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	setGrantType(pt.get("grant_type", ""));
	m_NfInstanceId = pt.get("nfInstanceId", "");
	if (pt.get_child_optional("nfType")) {
        m_NfType = fromPt<NFType>(pt.get_child("nfType"));
	}
	if (pt.get_child_optional("targetNfType")) {
        m_TargetNfType = fromPt<NFType>(pt.get_child("targetNfType"));
	}
	m_Scope = pt.get("scope", "");
	m_TargetNfInstanceId = pt.get("targetNfInstanceId", "");
	if (pt.get_child_optional("requesterPlmn")) {
        m_RequesterPlmn = fromPt<PlmnId>(pt.get_child("requesterPlmn"));
	}
	// push all items of RequesterPlmnList into member
	if (pt.get_child_optional("requesterPlmnList")) {
        m_RequesterPlmnList = fromPt<std::vector<PlmnId>>(pt.get_child("requesterPlmnList"));
	}
	// push all items of RequesterSnssaiList into member
	if (pt.get_child_optional("requesterSnssaiList")) {
        m_RequesterSnssaiList = fromPt<std::vector<Snssai>>(pt.get_child("requesterSnssaiList"));
	}
	m_RequesterFqdn = pt.get("requesterFqdn", "");
	// push all items of RequesterSnpnList into member
	if (pt.get_child_optional("requesterSnpnList")) {
        m_RequesterSnpnList = fromPt<std::vector<PlmnIdNid>>(pt.get_child("requesterSnpnList"));
	}
	if (pt.get_child_optional("targetPlmn")) {
        m_TargetPlmn = fromPt<PlmnId>(pt.get_child("targetPlmn"));
	}
	if (pt.get_child_optional("targetSnpn")) {
        m_TargetSnpn = fromPt<PlmnIdNid>(pt.get_child("targetSnpn"));
	}
	// push all items of TargetSnssaiList into member
	if (pt.get_child_optional("targetSnssaiList")) {
        m_TargetSnssaiList = fromPt<std::vector<Snssai>>(pt.get_child("targetSnssaiList"));
	}
	// push all items of TargetNsiList into member
	if (pt.get_child_optional("targetNsiList")) {
        m_TargetNsiList = fromPt<std::vector<std::string>>(pt.get_child("targetNsiList"));
	}
	m_TargetNfSetId = pt.get("targetNfSetId", "");
	m_TargetNfServiceSetId = pt.get("targetNfServiceSetId", "");
	m_HnrfAccessTokenUri = pt.get("hnrfAccessTokenUri", "");
	m_SourceNfInstanceId = pt.get("sourceNfInstanceId", "");
}

std::string AccessTokenReq::getGrantType() const
{
    return m_Grant_type;
}

void AccessTokenReq::setGrantType(std::string value)
{
    static const std::array<std::string, 1> allowedValues = {
        "client_credentials"
    };

    if (std::find(allowedValues.begin(), allowedValues.end(), value) != allowedValues.end()) {
		m_Grant_type = value;
	} else {
		throw std::runtime_error("Value " + boost::lexical_cast<std::string>(value) + " not allowed");
	}
}


std::string AccessTokenReq::getNfInstanceId() const
{
    return m_NfInstanceId;
}

void AccessTokenReq::setNfInstanceId(std::string value)
{
    m_NfInstanceId = value;
}


NFType AccessTokenReq::getNfType() const
{
    return m_NfType;
}

void AccessTokenReq::setNfType(NFType value)
{
    m_NfType = value;
}


NFType AccessTokenReq::getTargetNfType() const
{
    return m_TargetNfType;
}

void AccessTokenReq::setTargetNfType(NFType value)
{
    m_TargetNfType = value;
}


std::string AccessTokenReq::getScope() const
{
    return m_Scope;
}

void AccessTokenReq::setScope(std::string value)
{
    m_Scope = value;
}


std::string AccessTokenReq::getTargetNfInstanceId() const
{
    return m_TargetNfInstanceId;
}

void AccessTokenReq::setTargetNfInstanceId(std::string value)
{
    m_TargetNfInstanceId = value;
}


PlmnId AccessTokenReq::getRequesterPlmn() const
{
    return m_RequesterPlmn;
}

void AccessTokenReq::setRequesterPlmn(PlmnId value)
{
    m_RequesterPlmn = value;
}


std::vector<PlmnId> AccessTokenReq::getRequesterPlmnList() const
{
    return m_RequesterPlmnList;
}

void AccessTokenReq::setRequesterPlmnList(std::vector<PlmnId> value)
{
    m_RequesterPlmnList = value;
}


std::vector<Snssai> AccessTokenReq::getRequesterSnssaiList() const
{
    return m_RequesterSnssaiList;
}

void AccessTokenReq::setRequesterSnssaiList(std::vector<Snssai> value)
{
    m_RequesterSnssaiList = value;
}


std::string AccessTokenReq::getRequesterFqdn() const
{
    return m_RequesterFqdn;
}

void AccessTokenReq::setRequesterFqdn(std::string value)
{
    m_RequesterFqdn = value;
}


std::vector<PlmnIdNid> AccessTokenReq::getRequesterSnpnList() const
{
    return m_RequesterSnpnList;
}

void AccessTokenReq::setRequesterSnpnList(std::vector<PlmnIdNid> value)
{
    m_RequesterSnpnList = value;
}


PlmnId AccessTokenReq::getTargetPlmn() const
{
    return m_TargetPlmn;
}

void AccessTokenReq::setTargetPlmn(PlmnId value)
{
    m_TargetPlmn = value;
}


PlmnIdNid AccessTokenReq::getTargetSnpn() const
{
    return m_TargetSnpn;
}

void AccessTokenReq::setTargetSnpn(PlmnIdNid value)
{
    m_TargetSnpn = value;
}


std::vector<Snssai> AccessTokenReq::getTargetSnssaiList() const
{
    return m_TargetSnssaiList;
}

void AccessTokenReq::setTargetSnssaiList(std::vector<Snssai> value)
{
    m_TargetSnssaiList = value;
}


std::vector<std::string> AccessTokenReq::getTargetNsiList() const
{
    return m_TargetNsiList;
}

void AccessTokenReq::setTargetNsiList(std::vector<std::string> value)
{
    m_TargetNsiList = value;
}


std::string AccessTokenReq::getTargetNfSetId() const
{
    return m_TargetNfSetId;
}

void AccessTokenReq::setTargetNfSetId(std::string value)
{
    m_TargetNfSetId = value;
}


std::string AccessTokenReq::getTargetNfServiceSetId() const
{
    return m_TargetNfServiceSetId;
}

void AccessTokenReq::setTargetNfServiceSetId(std::string value)
{
    m_TargetNfServiceSetId = value;
}


std::string AccessTokenReq::getHnrfAccessTokenUri() const
{
    return m_HnrfAccessTokenUri;
}

void AccessTokenReq::setHnrfAccessTokenUri(std::string value)
{
    m_HnrfAccessTokenUri = value;
}


std::string AccessTokenReq::getSourceNfInstanceId() const
{
    return m_SourceNfInstanceId;
}

void AccessTokenReq::setSourceNfInstanceId(std::string value)
{
    m_SourceNfInstanceId = value;
}



std::vector<AccessTokenReq> createAccessTokenReqVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<AccessTokenReq>();
    for (const auto& child: pt) {
        vec.emplace_back(AccessTokenReq(child.second));
    }

    return vec;
}

}
}
}
}

