/**
 * Nbsf_Management
 * Binding Support Management Service API.    © 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).    All rights reserved.  
 *
 * The version of the OpenAPI document: 1.3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AccessTokenReq.h
 *
 * Contains information related to the access token request
 */

#ifndef AccessTokenReq_H_
#define AccessTokenReq_H_



#include "NFType.h"
#include "PlmnIdNid.h"
#include <string>
#include "PlmnId.h"
#include "Snssai.h"
#include <vector>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Contains information related to the access token request
/// </summary>
class  AccessTokenReq 
{
public:
    AccessTokenReq() = default;
    explicit AccessTokenReq(boost::property_tree::ptree const& pt);
    virtual ~AccessTokenReq() = default;

    AccessTokenReq(const AccessTokenReq& other) = default; // copy constructor
    AccessTokenReq(AccessTokenReq&& other) noexcept = default; // move constructor

    AccessTokenReq& operator=(const AccessTokenReq& other) = default; // copy assignment
    AccessTokenReq& operator=(AccessTokenReq&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// AccessTokenReq members

    /// <summary>
    /// 
    /// </summary>
    std::string getGrantType() const;
    void setGrantType(std::string value);

    /// <summary>
    /// String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.  
    /// </summary>
    std::string getNfInstanceId() const;
    void setNfInstanceId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    NFType getNfType() const;
    void setNfType(NFType value);

    /// <summary>
    /// 
    /// </summary>
    NFType getTargetNfType() const;
    void setTargetNfType(NFType value);

    /// <summary>
    /// 
    /// </summary>
    std::string getScope() const;
    void setScope(std::string value);

    /// <summary>
    /// String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.  
    /// </summary>
    std::string getTargetNfInstanceId() const;
    void setTargetNfInstanceId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    PlmnId getRequesterPlmn() const;
    void setRequesterPlmn(PlmnId value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<PlmnId> getRequesterPlmnList() const;
    void setRequesterPlmnList(std::vector<PlmnId> value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<Snssai> getRequesterSnssaiList() const;
    void setRequesterSnssaiList(std::vector<Snssai> value);

    /// <summary>
    /// Fully Qualified Domain Name
    /// </summary>
    std::string getRequesterFqdn() const;
    void setRequesterFqdn(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<PlmnIdNid> getRequesterSnpnList() const;
    void setRequesterSnpnList(std::vector<PlmnIdNid> value);

    /// <summary>
    /// 
    /// </summary>
    PlmnId getTargetPlmn() const;
    void setTargetPlmn(PlmnId value);

    /// <summary>
    /// 
    /// </summary>
    PlmnIdNid getTargetSnpn() const;
    void setTargetSnpn(PlmnIdNid value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<Snssai> getTargetSnssaiList() const;
    void setTargetSnssaiList(std::vector<Snssai> value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::string> getTargetNsiList() const;
    void setTargetNsiList(std::vector<std::string> value);

    /// <summary>
    /// NF Set Identifier (see clause 28.12 of 3GPP TS 23.003), formatted as the following string \&quot;set&lt;Set ID&gt;.&lt;nftype&gt;set.5gc.mnc&lt;MNC&gt;.mcc&lt;MCC&gt;\&quot;, or  \&quot;set&lt;SetID&gt;.&lt;NFType&gt;set.5gc.nid&lt;NID&gt;.mnc&lt;MNC&gt;.mcc&lt;MCC&gt;\&quot; with  &lt;MCC&gt; encoded as defined in clause 5.4.2 (\&quot;Mcc\&quot; data type definition)  &lt;MNC&gt; encoding the Mobile Network Code part of the PLMN, comprising 3 digits.    If there are only 2 significant digits in the MNC, one \&quot;0\&quot; digit shall be inserted    at the left side to fill the 3 digits coding of MNC.  Pattern: &#39;^[0-9]{3}$&#39; &lt;NFType&gt; encoded as a value defined in Table 6.1.6.3.3-1 of 3GPP TS 29.510 but    with lower case characters &lt;Set ID&gt; encoded as a string of characters consisting of    alphabetic characters (A-Z and a-z), digits (0-9) and/or the hyphen (-) and that    shall end with either an alphabetic character or a digit.  
    /// </summary>
    std::string getTargetNfSetId() const;
    void setTargetNfSetId(std::string value);

    /// <summary>
    /// NF Service Set Identifier (see clause 28.12 of 3GPP TS 23.003) formatted as the following  string \&quot;set&lt;Set ID&gt;.sn&lt;Service Name&gt;.nfi&lt;NF Instance ID&gt;.5gc.mnc&lt;MNC&gt;.mcc&lt;MCC&gt;\&quot;, or  \&quot;set&lt;SetID&gt;.sn&lt;ServiceName&gt;.nfi&lt;NFInstanceID&gt;.5gc.nid&lt;NID&gt;.mnc&lt;MNC&gt;.mcc&lt;MCC&gt;\&quot; with  &lt;MCC&gt; encoded as defined in clause 5.4.2 (\&quot;Mcc\&quot; data type definition)   &lt;MNC&gt; encoding the Mobile Network Code part of the PLMN, comprising 3 digits.    If there are only 2 significant digits in the MNC, one \&quot;0\&quot; digit shall be inserted    at the left side to fill the 3 digits coding of MNC.  Pattern: &#39;^[0-9]{3}$&#39; &lt;NID&gt; encoded as defined in clause 5.4.2 (\&quot;Nid\&quot; data type definition)  &lt;NFInstanceId&gt; encoded as defined in clause 5.3.2  &lt;ServiceName&gt; encoded as defined in 3GPP TS 29.510  &lt;Set ID&gt; encoded as a string of characters consisting of alphabetic    characters (A-Z and a-z), digits (0-9) and/or the hyphen (-) and that shall end    with either an alphabetic character or a digit. 
    /// </summary>
    std::string getTargetNfServiceSetId() const;
    void setTargetNfServiceSetId(std::string value);

    /// <summary>
    /// String providing an URI formatted according to RFC 3986.
    /// </summary>
    std::string getHnrfAccessTokenUri() const;
    void setHnrfAccessTokenUri(std::string value);

    /// <summary>
    /// String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.  
    /// </summary>
    std::string getSourceNfInstanceId() const;
    void setSourceNfInstanceId(std::string value);

protected:
    std::string m_Grant_type = "";
    std::string m_NfInstanceId = "";
    NFType m_NfType;
    NFType m_TargetNfType;
    std::string m_Scope = "";
    std::string m_TargetNfInstanceId = "";
    PlmnId m_RequesterPlmn;
    std::vector<PlmnId> m_RequesterPlmnList;
    std::vector<Snssai> m_RequesterSnssaiList;
    std::string m_RequesterFqdn = "";
    std::vector<PlmnIdNid> m_RequesterSnpnList;
    PlmnId m_TargetPlmn;
    PlmnIdNid m_TargetSnpn;
    std::vector<Snssai> m_TargetSnssaiList;
    std::vector<std::string> m_TargetNsiList;
    std::string m_TargetNfSetId = "";
    std::string m_TargetNfServiceSetId = "";
    std::string m_HnrfAccessTokenUri = "";
    std::string m_SourceNfInstanceId = "";
};

std::vector<AccessTokenReq> createAccessTokenReqVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<AccessTokenReq>(const AccessTokenReq& val) {
    return val.toPropertyTree();
}

template<>
inline AccessTokenReq fromPt<AccessTokenReq>(const boost::property_tree::ptree& pt) {
    AccessTokenReq ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* AccessTokenReq_H_ */
