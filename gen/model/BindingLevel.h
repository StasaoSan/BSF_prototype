/**
 * Nbsf_Management
 * Binding Support Management Service API.    Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).    All rights reserved.  
 *
 * The version of the OpenAPI document: 1.3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BindingLevel.h
 *
 * Possible values are:  - \&quot;NF_SET\&quot;   - \&quot;NF_INSTANCE\&quot; 
 */

#ifndef BindingLevel_H_
#define BindingLevel_H_



#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Possible values are:  - \&quot;NF_SET\&quot;   - \&quot;NF_INSTANCE\&quot; 
/// </summary>
class  BindingLevel 
{
public:
    BindingLevel() = default;
    explicit BindingLevel(boost::property_tree::ptree const& pt);
    virtual ~BindingLevel() = default;

    BindingLevel(const BindingLevel& other) = default; // copy constructor
    BindingLevel(BindingLevel&& other) noexcept = default; // move constructor

    BindingLevel& operator=(const BindingLevel& other) = default; // copy assignment
    BindingLevel& operator=(BindingLevel&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// BindingLevel members

protected:
};

std::vector<BindingLevel> createBindingLevelVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<BindingLevel>(const BindingLevel& val) {
    return val.toPropertyTree();
}

template<>
inline BindingLevel fromPt<BindingLevel>(const boost::property_tree::ptree& pt) {
    BindingLevel ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* BindingLevel_H_ */
