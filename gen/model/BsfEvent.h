/**
 * Nbsf_Management
 * Binding Support Management Service API.    Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).    All rights reserved.  
 *
 * The version of the OpenAPI document: 1.3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BsfEvent.h
 *
 * Represents an event to be notified by the BSF.
 */

#ifndef BsfEvent_H_
#define BsfEvent_H_



#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents an event to be notified by the BSF.
/// </summary>
class  BsfEvent 
{
public:
    BsfEvent() = default;
    explicit BsfEvent(boost::property_tree::ptree const& pt);
    virtual ~BsfEvent() = default;

    BsfEvent(const BsfEvent& other) = default; // copy constructor
    BsfEvent(BsfEvent&& other) noexcept = default; // move constructor

    BsfEvent& operator=(const BsfEvent& other) = default; // copy assignment
    BsfEvent& operator=(BsfEvent&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// BsfEvent members

protected:
};

std::vector<BsfEvent> createBsfEventVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<BsfEvent>(const BsfEvent& val) {
    return val.toPropertyTree();
}

template<>
inline BsfEvent fromPt<BsfEvent>(const boost::property_tree::ptree& pt) {
    BsfEvent ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* BsfEvent_H_ */
