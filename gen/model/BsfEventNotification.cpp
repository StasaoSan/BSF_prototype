/**
 * Nbsf_Management
 * Binding Support Management Service API.    Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).    All rights reserved.  
 *
 * The version of the OpenAPI document: 1.3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BsfEventNotification.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

BsfEventNotification::BsfEventNotification(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string BsfEventNotification::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void BsfEventNotification::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree BsfEventNotification::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.add_child("event", m_Event.toPropertyTree());
	pt.add_child("pcfForUeInfo", m_PcfForUeInfo.toPropertyTree());
	// generate tree for PcfForPduSessInfos
    tmp_node.clear();
	if (!m_PcfForPduSessInfos.empty()) {
        tmp_node = toPt(m_PcfForPduSessInfos);
		pt.add_child("pcfForPduSessInfos", tmp_node);
		tmp_node.clear();
	}
	// generate tree for MatchSnssaiDnns
    tmp_node.clear();
	if (!m_MatchSnssaiDnns.empty()) {
        tmp_node = toPt(m_MatchSnssaiDnns);
		pt.add_child("matchSnssaiDnns", tmp_node);
		tmp_node.clear();
	}
	return pt;
}

void BsfEventNotification::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	if (pt.get_child_optional("event")) {
        m_Event = fromPt<BsfEvent>(pt.get_child("event"));
	}
	if (pt.get_child_optional("pcfForUeInfo")) {
        m_PcfForUeInfo = fromPt<PcfForUeInfo>(pt.get_child("pcfForUeInfo"));
	}
	// push all items of PcfForPduSessInfos into member
	if (pt.get_child_optional("pcfForPduSessInfos")) {
        m_PcfForPduSessInfos = fromPt<std::vector<PcfForPduSessionInfo>>(pt.get_child("pcfForPduSessInfos"));
	}
	// push all items of MatchSnssaiDnns into member
	if (pt.get_child_optional("matchSnssaiDnns")) {
        m_MatchSnssaiDnns = fromPt<std::vector<SnssaiDnnPair>>(pt.get_child("matchSnssaiDnns"));
	}
}

BsfEvent BsfEventNotification::getEvent() const
{
    return m_Event;
}

void BsfEventNotification::setEvent(BsfEvent value)
{
    m_Event = value;
}


PcfForUeInfo BsfEventNotification::getPcfForUeInfo() const
{
    return m_PcfForUeInfo;
}

void BsfEventNotification::setPcfForUeInfo(PcfForUeInfo value)
{
    m_PcfForUeInfo = value;
}


std::vector<PcfForPduSessionInfo> BsfEventNotification::getPcfForPduSessInfos() const
{
    return m_PcfForPduSessInfos;
}

void BsfEventNotification::setPcfForPduSessInfos(std::vector<PcfForPduSessionInfo> value)
{
    m_PcfForPduSessInfos = value;
}


std::vector<SnssaiDnnPair> BsfEventNotification::getMatchSnssaiDnns() const
{
    return m_MatchSnssaiDnns;
}

void BsfEventNotification::setMatchSnssaiDnns(std::vector<SnssaiDnnPair> value)
{
    m_MatchSnssaiDnns = value;
}



std::vector<BsfEventNotification> createBsfEventNotificationVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<BsfEventNotification>();
    for (const auto& child: pt) {
        vec.emplace_back(BsfEventNotification(child.second));
    }

    return vec;
}

}
}
}
}

