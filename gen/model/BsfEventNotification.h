/**
 * Nbsf_Management
 * Binding Support Management Service API.    Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).    All rights reserved.  
 *
 * The version of the OpenAPI document: 1.3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BsfEventNotification.h
 *
 * Contains an event notification.
 */

#ifndef BsfEventNotification_H_
#define BsfEventNotification_H_



#include "PcfForPduSessionInfo.h"
#include <vector>
#include "PcfForUeInfo.h"
#include "BsfEvent.h"
#include "SnssaiDnnPair.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Contains an event notification.
/// </summary>
class  BsfEventNotification 
{
public:
    BsfEventNotification() = default;
    explicit BsfEventNotification(boost::property_tree::ptree const& pt);
    virtual ~BsfEventNotification() = default;

    BsfEventNotification(const BsfEventNotification& other) = default; // copy constructor
    BsfEventNotification(BsfEventNotification&& other) noexcept = default; // move constructor

    BsfEventNotification& operator=(const BsfEventNotification& other) = default; // copy assignment
    BsfEventNotification& operator=(BsfEventNotification&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// BsfEventNotification members

    /// <summary>
    /// 
    /// </summary>
    BsfEvent getEvent() const;
    void setEvent(BsfEvent value);

    /// <summary>
    /// 
    /// </summary>
    PcfForUeInfo getPcfForUeInfo() const;
    void setPcfForUeInfo(PcfForUeInfo value);

    /// <summary>
    /// The information of the PCF for a PDU session.
    /// </summary>
    std::vector<PcfForPduSessionInfo> getPcfForPduSessInfos() const;
    void setPcfForPduSessInfos(std::vector<PcfForPduSessionInfo> value);

    /// <summary>
    /// Matching S-NSSAI and DNN pairs.
    /// </summary>
    std::vector<SnssaiDnnPair> getMatchSnssaiDnns() const;
    void setMatchSnssaiDnns(std::vector<SnssaiDnnPair> value);

protected:
    BsfEvent m_Event;
    PcfForUeInfo m_PcfForUeInfo;
    std::vector<PcfForPduSessionInfo> m_PcfForPduSessInfos;
    std::vector<SnssaiDnnPair> m_MatchSnssaiDnns;
};

std::vector<BsfEventNotification> createBsfEventNotificationVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<BsfEventNotification>(const BsfEventNotification& val) {
    return val.toPropertyTree();
}

template<>
inline BsfEventNotification fromPt<BsfEventNotification>(const boost::property_tree::ptree& pt) {
    BsfEventNotification ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* BsfEventNotification_H_ */
