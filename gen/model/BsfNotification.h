/**
 * Nbsf_Management
 * Binding Support Management Service API.    Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).    All rights reserved.  
 *
 * The version of the OpenAPI document: 1.3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BsfNotification.h
 *
 * Contains the event notifications.
 */

#ifndef BsfNotification_H_
#define BsfNotification_H_



#include <string>
#include "BsfEventNotification.h"
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Contains the event notifications.
/// </summary>
class  BsfNotification 
{
public:
    BsfNotification() = default;
    explicit BsfNotification(boost::property_tree::ptree const& pt);
    virtual ~BsfNotification() = default;

    BsfNotification(const BsfNotification& other) = default; // copy constructor
    BsfNotification(BsfNotification&& other) noexcept = default; // move constructor

    BsfNotification& operator=(const BsfNotification& other) = default; // copy assignment
    BsfNotification& operator=(BsfNotification&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// BsfNotification members

    /// <summary>
    /// 
    /// </summary>
    std::string getNotifCorreId() const;
    void setNotifCorreId(std::string value);

    /// <summary>
    /// Notifications about Individual Events.
    /// </summary>
    std::vector<BsfEventNotification> getEventNotifs() const;
    void setEventNotifs(std::vector<BsfEventNotification> value);

protected:
    std::string m_NotifCorreId = "";
    std::vector<BsfEventNotification> m_EventNotifs;
};

std::vector<BsfNotification> createBsfNotificationVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<BsfNotification>(const BsfNotification& val) {
    return val.toPropertyTree();
}

template<>
inline BsfNotification fromPt<BsfNotification>(const boost::property_tree::ptree& pt) {
    BsfNotification ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* BsfNotification_H_ */
