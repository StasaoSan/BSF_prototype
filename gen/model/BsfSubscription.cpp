/**
 * Nbsf_Management
 * Binding Support Management Service API.    Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).    All rights reserved.  
 *
 * The version of the OpenAPI document: 1.3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BsfSubscription.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

BsfSubscription::BsfSubscription(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string BsfSubscription::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void BsfSubscription::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree BsfSubscription::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	// generate tree for Events
    tmp_node.clear();
	if (!m_Events.empty()) {
        tmp_node = toPt(m_Events);
		pt.add_child("events", tmp_node);
		tmp_node.clear();
	}
	pt.put("notifUri", m_NotifUri);
	pt.put("notifCorreId", m_NotifCorreId);
	pt.put("supi", m_Supi);
	pt.put("gpsi", m_Gpsi);
	pt.add_child("snssaiDnnPairs", m_SnssaiDnnPairs.toPropertyTree());
	// generate tree for AddSnssaiDnnPairs
    tmp_node.clear();
	if (!m_AddSnssaiDnnPairs.empty()) {
        tmp_node = toPt(m_AddSnssaiDnnPairs);
		pt.add_child("addSnssaiDnnPairs", tmp_node);
		tmp_node.clear();
	}
	pt.put("suppFeat", m_SuppFeat);
	return pt;
}

void BsfSubscription::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	// push all items of Events into member
	if (pt.get_child_optional("events")) {
        m_Events = fromPt<std::vector<BsfEvent>>(pt.get_child("events"));
	}
	m_NotifUri = pt.get("notifUri", "");
	m_NotifCorreId = pt.get("notifCorreId", "");
	m_Supi = pt.get("supi", "");
	m_Gpsi = pt.get("gpsi", "");
	if (pt.get_child_optional("snssaiDnnPairs")) {
        m_SnssaiDnnPairs = fromPt<SnssaiDnnPair>(pt.get_child("snssaiDnnPairs"));
	}
	// push all items of AddSnssaiDnnPairs into member
	if (pt.get_child_optional("addSnssaiDnnPairs")) {
        m_AddSnssaiDnnPairs = fromPt<std::vector<SnssaiDnnPair>>(pt.get_child("addSnssaiDnnPairs"));
	}
	m_SuppFeat = pt.get("suppFeat", "");
}

std::vector<BsfEvent> BsfSubscription::getEvents() const
{
    return m_Events;
}

void BsfSubscription::setEvents(std::vector<BsfEvent> value)
{
    m_Events = value;
}


std::string BsfSubscription::getNotifUri() const
{
    return m_NotifUri;
}

void BsfSubscription::setNotifUri(std::string value)
{
    m_NotifUri = value;
}


std::string BsfSubscription::getNotifCorreId() const
{
    return m_NotifCorreId;
}

void BsfSubscription::setNotifCorreId(std::string value)
{
    m_NotifCorreId = value;
}


std::string BsfSubscription::getSupi() const
{
    return m_Supi;
}

void BsfSubscription::setSupi(std::string value)
{
    m_Supi = value;
}


std::string BsfSubscription::getGpsi() const
{
    return m_Gpsi;
}

void BsfSubscription::setGpsi(std::string value)
{
    m_Gpsi = value;
}


SnssaiDnnPair BsfSubscription::getSnssaiDnnPairs() const
{
    return m_SnssaiDnnPairs;
}

void BsfSubscription::setSnssaiDnnPairs(SnssaiDnnPair value)
{
    m_SnssaiDnnPairs = value;
}


std::vector<SnssaiDnnPair> BsfSubscription::getAddSnssaiDnnPairs() const
{
    return m_AddSnssaiDnnPairs;
}

void BsfSubscription::setAddSnssaiDnnPairs(std::vector<SnssaiDnnPair> value)
{
    m_AddSnssaiDnnPairs = value;
}


std::string BsfSubscription::getSuppFeat() const
{
    return m_SuppFeat;
}

void BsfSubscription::setSuppFeat(std::string value)
{
    m_SuppFeat = value;
}



std::vector<BsfSubscription> createBsfSubscriptionVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<BsfSubscription>();
    for (const auto& child: pt) {
        vec.emplace_back(BsfSubscription(child.second));
    }

    return vec;
}

}
}
}
}

