/**
 * Nbsf_Management
 * Binding Support Management Service API.    © 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).    All rights reserved.  
 *
 * The version of the OpenAPI document: 1.3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BsfSubscription.h
 *
 * Contains the event subscription data.
 */

#ifndef BsfSubscription_H_
#define BsfSubscription_H_



#include <string>
#include <vector>
#include "BsfEvent.h"
#include "SnssaiDnnPair.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Contains the event subscription data.
/// </summary>
class  BsfSubscription 
{
public:
    BsfSubscription() = default;
    explicit BsfSubscription(boost::property_tree::ptree const& pt);
    virtual ~BsfSubscription() = default;

    BsfSubscription(const BsfSubscription& other) = default; // copy constructor
    BsfSubscription(BsfSubscription&& other) noexcept = default; // move constructor

    BsfSubscription& operator=(const BsfSubscription& other) = default; // copy assignment
    BsfSubscription& operator=(BsfSubscription&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// BsfSubscription members

    /// <summary>
    /// Contain te subscribed events.
    /// </summary>
    std::vector<BsfEvent> getEvents() const;
    void setEvents(std::vector<BsfEvent> value);

    /// <summary>
    /// String providing an URI formatted according to RFC 3986.
    /// </summary>
    std::string getNotifUri() const;
    void setNotifUri(std::string value);

    /// <summary>
    /// Notification Correlation ID assigned by the NF service consumer.
    /// </summary>
    std::string getNotifCorreId() const;
    void setNotifCorreId(std::string value);

    /// <summary>
    /// String identifying a Supi that shall contain either an IMSI, a network specific identifier, a Global Cable Identifier (GCI) or a Global Line Identifier (GLI) as specified in clause  2.2A of 3GPP TS 23.003. It shall be formatted as follows  - for an IMSI \&quot;imsi-&lt;imsi&gt;\&quot;, where &lt;imsi&gt; shall be formatted according to clause 2.2    of 3GPP TS 23.003 that describes an IMSI.  - for a network specific identifier \&quot;nai-&lt;nai&gt;, where &lt;nai&gt; shall be formatted    according to clause 28.7.2 of 3GPP TS 23.003 that describes an NAI.  - for a GCI \&quot;gci-&lt;gci&gt;\&quot;, where &lt;gci&gt; shall be formatted according to clause 28.15.2    of 3GPP TS 23.003.  - for a GLI \&quot;gli-&lt;gli&gt;\&quot;, where &lt;gli&gt; shall be formatted according to clause 28.16.2 of    3GPP TS 23.003.To enable that the value is used as part of an URI, the string shall    only contain characters allowed according to the \&quot;lower-with-hyphen\&quot; naming convention    defined in 3GPP TS 29.501. 
    /// </summary>
    std::string getSupi() const;
    void setSupi(std::string value);

    /// <summary>
    /// String identifying a Gpsi shall contain either an External Id or an MSISDN.  It shall be formatted as follows -External Identifier&#x3D; \&quot;extid-&#39;extid&#39;, where &#39;extid&#39;  shall be formatted according to clause 19.7.2 of 3GPP TS 23.003 that describes an  External Identifier.  
    /// </summary>
    std::string getGpsi() const;
    void setGpsi(std::string value);

    /// <summary>
    /// 
    /// </summary>
    SnssaiDnnPair getSnssaiDnnPairs() const;
    void setSnssaiDnnPairs(SnssaiDnnPair value);

    /// <summary>
    /// Represents the additional S-NSSAI and DNN pair(s) for which the binding event report(s)  shall apply.  
    /// </summary>
    std::vector<SnssaiDnnPair> getAddSnssaiDnnPairs() const;
    void setAddSnssaiDnnPairs(std::vector<SnssaiDnnPair> value);

    /// <summary>
    /// A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \&quot;0\&quot; to \&quot;9\&quot;,  \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to \&quot;F\&quot; and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported. 
    /// </summary>
    std::string getSuppFeat() const;
    void setSuppFeat(std::string value);

protected:
    std::vector<BsfEvent> m_Events;
    std::string m_NotifUri = "";
    std::string m_NotifCorreId = "";
    std::string m_Supi = "";
    std::string m_Gpsi = "";
    SnssaiDnnPair m_SnssaiDnnPairs;
    std::vector<SnssaiDnnPair> m_AddSnssaiDnnPairs;
    std::string m_SuppFeat = "";
};

std::vector<BsfSubscription> createBsfSubscriptionVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<BsfSubscription>(const BsfSubscription& val) {
    return val.toPropertyTree();
}

template<>
inline BsfSubscription fromPt<BsfSubscription>(const boost::property_tree::ptree& pt) {
    BsfSubscription ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* BsfSubscription_H_ */
