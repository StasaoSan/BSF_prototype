/**
 * Nbsf_Management
 * Binding Support Management Service API.    Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).    All rights reserved.  
 *
 * The version of the OpenAPI document: 1.3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * InvalidParam.h
 *
 * It contains an invalid parameter and a related description.
 */

#ifndef InvalidParam_H_
#define InvalidParam_H_



#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// It contains an invalid parameter and a related description.
/// </summary>
class  InvalidParam 
{
public:
    InvalidParam() = default;
    explicit InvalidParam(boost::property_tree::ptree const& pt);
    virtual ~InvalidParam() = default;

    InvalidParam(const InvalidParam& other) = default; // copy constructor
    InvalidParam(InvalidParam&& other) noexcept = default; // move constructor

    InvalidParam& operator=(const InvalidParam& other) = default; // copy assignment
    InvalidParam& operator=(InvalidParam&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// InvalidParam members

    /// <summary>
    /// If the invalid parameter is an attribute in a JSON body, this IE shall contain the  attribute&#39;s name and shall be encoded as a JSON Pointer. If the invalid parameter is  an HTTP header, this IE shall be formatted as the concatenation of the string \&quot;header \&quot;  plus the name of such header. If the invalid parameter is a query parameter, this IE  shall be formatted as the concatenation of the string \&quot;query \&quot; plus the name of such  query parameter. If the invalid parameter is a variable part in the path of a resource  URI, this IE shall contain the name of the variable, including the symbols \&quot;{\&quot; and \&quot;}\&quot;  used in OpenAPI specification as the notation to represent variable path segments. 
    /// </summary>
    std::string getParam() const;
    void setParam(std::string value);

    /// <summary>
    /// A human-readable reason, e.g. \&quot;must be a positive integer\&quot;. In cases involving failed  operations in a PATCH request, the reason string should identify the operation that  failed using the operation&#39;s array index to assist in correlation of the invalid  parameter with the failed operation, e.g.\&quot; Replacement value invalid for attribute  (failed operation index&#x3D; 4)\&quot; 
    /// </summary>
    std::string getReason() const;
    void setReason(std::string value);

protected:
    std::string m_Param = "";
    std::string m_Reason = "";
};

std::vector<InvalidParam> createInvalidParamVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<InvalidParam>(const InvalidParam& val) {
    return val.toPropertyTree();
}

template<>
inline InvalidParam fromPt<InvalidParam>(const boost::property_tree::ptree& pt) {
    InvalidParam ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* InvalidParam_H_ */
