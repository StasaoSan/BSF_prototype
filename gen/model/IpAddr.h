/**
 * Nbsf_Management
 * Binding Support Management Service API.    Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).    All rights reserved.  
 *
 * The version of the OpenAPI document: 1.3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * IpAddr.h
 *
 * Contains an IP adresse.
 */

#ifndef IpAddr_H_
#define IpAddr_H_



#include <string>
#include "Ipv6Prefix.h"
#include "Ipv6Addr.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Contains an IP adresse.
/// </summary>
class  IpAddr 
{
public:
    IpAddr() = default;
    explicit IpAddr(boost::property_tree::ptree const& pt);
    virtual ~IpAddr() = default;

    IpAddr(const IpAddr& other) = default; // copy constructor
    IpAddr(IpAddr&& other) noexcept = default; // move constructor

    IpAddr& operator=(const IpAddr& other) = default; // copy assignment
    IpAddr& operator=(IpAddr&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// IpAddr members

    /// <summary>
    /// String identifying a IPv4 address formatted in the &#39;dotted decimal&#39; notation as defined in RFC 1166. 
    /// </summary>
    std::string getIpv4Addr() const;
    void setIpv4Addr(std::string value);

    /// <summary>
    /// 
    /// </summary>
    Ipv6Addr getIpv6Addr() const;
    void setIpv6Addr(Ipv6Addr value);

    /// <summary>
    /// 
    /// </summary>
    Ipv6Prefix getIpv6Prefix() const;
    void setIpv6Prefix(Ipv6Prefix value);

protected:
    std::string m_Ipv4Addr = "";
    Ipv6Addr m_Ipv6Addr;
    Ipv6Prefix m_Ipv6Prefix;
};

std::vector<IpAddr> createIpAddrVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<IpAddr>(const IpAddr& val) {
    return val.toPropertyTree();
}

template<>
inline IpAddr fromPt<IpAddr>(const boost::property_tree::ptree& pt) {
    IpAddr ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* IpAddr_H_ */
