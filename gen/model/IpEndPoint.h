/**
 * Nbsf_Management
 * Binding Support Management Service API.    Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).    All rights reserved.  
 *
 * The version of the OpenAPI document: 1.3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * IpEndPoint.h
 *
 * IP addressing information of a given NFService; it consists on, e.g. IP address, TCP port, transport protocol... 
 */

#ifndef IpEndPoint_H_
#define IpEndPoint_H_



#include "TransportProtocol.h"
#include <string>
#include "Ipv6Addr.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// IP addressing information of a given NFService; it consists on, e.g. IP address, TCP port, transport protocol... 
/// </summary>
class  IpEndPoint 
{
public:
    IpEndPoint() = default;
    explicit IpEndPoint(boost::property_tree::ptree const& pt);
    virtual ~IpEndPoint() = default;

    IpEndPoint(const IpEndPoint& other) = default; // copy constructor
    IpEndPoint(IpEndPoint&& other) noexcept = default; // move constructor

    IpEndPoint& operator=(const IpEndPoint& other) = default; // copy assignment
    IpEndPoint& operator=(IpEndPoint&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// IpEndPoint members

    /// <summary>
    /// String identifying a IPv4 address formatted in the &#39;dotted decimal&#39; notation as defined in RFC 1166. 
    /// </summary>
    std::string getIpv4Address() const;
    void setIpv4Address(std::string value);

    /// <summary>
    /// 
    /// </summary>
    Ipv6Addr getIpv6Address() const;
    void setIpv6Address(Ipv6Addr value);

    /// <summary>
    /// 
    /// </summary>
    TransportProtocol getTransport() const;
    void setTransport(TransportProtocol value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getPort() const;
    void setPort(int32_t value);

protected:
    std::string m_Ipv4Address = "";
    Ipv6Addr m_Ipv6Address;
    TransportProtocol m_Transport;
    int32_t m_Port = 0;
};

std::vector<IpEndPoint> createIpEndPointVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<IpEndPoint>(const IpEndPoint& val) {
    return val.toPropertyTree();
}

template<>
inline IpEndPoint fromPt<IpEndPoint>(const boost::property_tree::ptree& pt) {
    IpEndPoint ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* IpEndPoint_H_ */
