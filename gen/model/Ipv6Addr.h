/**
 * Nbsf_Management
 * Binding Support Management Service API.    Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).    All rights reserved.  
 *
 * The version of the OpenAPI document: 1.3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Ipv6Addr.h
 *
 * String identifying an IPv6 address formatted according to clause 4 of RFC5952. The mixed IPv4 IPv6 notation according to clause 5 of RFC5952 shall not be used. 
 */

#ifndef Ipv6Addr_H_
#define Ipv6Addr_H_



#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// String identifying an IPv6 address formatted according to clause 4 of RFC5952. The mixed IPv4 IPv6 notation according to clause 5 of RFC5952 shall not be used. 
/// </summary>
class  Ipv6Addr 
{
public:
    Ipv6Addr() = default;
    explicit Ipv6Addr(boost::property_tree::ptree const& pt);
    virtual ~Ipv6Addr() = default;

    Ipv6Addr(const Ipv6Addr& other) = default; // copy constructor
    Ipv6Addr(Ipv6Addr&& other) noexcept = default; // move constructor

    Ipv6Addr& operator=(const Ipv6Addr& other) = default; // copy assignment
    Ipv6Addr& operator=(Ipv6Addr&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// Ipv6Addr members

protected:
};

std::vector<Ipv6Addr> createIpv6AddrVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<Ipv6Addr>(const Ipv6Addr& val) {
    return val.toPropertyTree();
}

template<>
inline Ipv6Addr fromPt<Ipv6Addr>(const boost::property_tree::ptree& pt) {
    Ipv6Addr ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* Ipv6Addr_H_ */
