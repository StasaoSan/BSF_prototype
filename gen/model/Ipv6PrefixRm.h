/**
 * Nbsf_Management
 * Binding Support Management Service API.    Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).    All rights reserved.  
 *
 * The version of the OpenAPI document: 1.3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Ipv6PrefixRm.h
 *
 * String identifying an IPv6 address prefix formatted according to clause 4 of RFC 5952 with the OpenAPI &#39;nullable: true&#39; property. IPv6Prefix data type may contain an individual /128 IPv6 address. 
 */

#ifndef Ipv6PrefixRm_H_
#define Ipv6PrefixRm_H_



#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// String identifying an IPv6 address prefix formatted according to clause 4 of RFC 5952 with the OpenAPI &#39;nullable: true&#39; property. IPv6Prefix data type may contain an individual /128 IPv6 address. 
/// </summary>
class  Ipv6PrefixRm 
{
public:
    Ipv6PrefixRm() = default;
    explicit Ipv6PrefixRm(boost::property_tree::ptree const& pt);
    virtual ~Ipv6PrefixRm() = default;

    Ipv6PrefixRm(const Ipv6PrefixRm& other) = default; // copy constructor
    Ipv6PrefixRm(Ipv6PrefixRm&& other) noexcept = default; // move constructor

    Ipv6PrefixRm& operator=(const Ipv6PrefixRm& other) = default; // copy assignment
    Ipv6PrefixRm& operator=(Ipv6PrefixRm&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// Ipv6PrefixRm members

protected:
};

std::vector<Ipv6PrefixRm> createIpv6PrefixRmVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<Ipv6PrefixRm>(const Ipv6PrefixRm& val) {
    return val.toPropertyTree();
}

template<>
inline Ipv6PrefixRm fromPt<Ipv6PrefixRm>(const boost::property_tree::ptree& pt) {
    Ipv6PrefixRm ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* Ipv6PrefixRm_H_ */
