/**
 * Nbsf_Management
 * Binding Support Management Service API.    Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).    All rights reserved.  
 *
 * The version of the OpenAPI document: 1.3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * MbsSessionId.h
 *
 * MBS Session Identifier
 */

#ifndef MbsSessionId_H_
#define MbsSessionId_H_



#include "Ssm.h"
#include <string>
#include "Tmgi.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// MBS Session Identifier
/// </summary>
class  MbsSessionId 
{
public:
    MbsSessionId() = default;
    explicit MbsSessionId(boost::property_tree::ptree const& pt);
    virtual ~MbsSessionId() = default;

    MbsSessionId(const MbsSessionId& other) = default; // copy constructor
    MbsSessionId(MbsSessionId&& other) noexcept = default; // move constructor

    MbsSessionId& operator=(const MbsSessionId& other) = default; // copy assignment
    MbsSessionId& operator=(MbsSessionId&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// MbsSessionId members

    /// <summary>
    /// 
    /// </summary>
    Tmgi getTmgi() const;
    void setTmgi(Tmgi value);

    /// <summary>
    /// 
    /// </summary>
    Ssm getSsm() const;
    void setSsm(Ssm value);

    /// <summary>
    /// This represents the Network Identifier, which together with a PLMN ID is used to identify an SNPN (see 3GPP TS 23.003 and 3GPP TS 23.501 clause 5.30.2.1).  
    /// </summary>
    std::string getNid() const;
    void setNid(std::string value);

protected:
    Tmgi m_Tmgi;
    Ssm m_Ssm;
    std::string m_Nid = "";
};

std::vector<MbsSessionId> createMbsSessionIdVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<MbsSessionId>(const MbsSessionId& val) {
    return val.toPropertyTree();
}

template<>
inline MbsSessionId fromPt<MbsSessionId>(const boost::property_tree::ptree& pt) {
    MbsSessionId ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* MbsSessionId_H_ */
