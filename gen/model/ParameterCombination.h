/**
 * Nbsf_Management
 * Binding Support Management Service API.    Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).    All rights reserved.  
 *
 * The version of the OpenAPI document: 1.3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ParameterCombination.h
 *
 * Represents the combination used by the BSF to check whether there is an existing PCF binding   information.  
 */

#ifndef ParameterCombination_H_
#define ParameterCombination_H_



#include <string>
#include "Snssai.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents the combination used by the BSF to check whether there is an existing PCF binding   information.  
/// </summary>
class  ParameterCombination 
{
public:
    ParameterCombination() = default;
    explicit ParameterCombination(boost::property_tree::ptree const& pt);
    virtual ~ParameterCombination() = default;

    ParameterCombination(const ParameterCombination& other) = default; // copy constructor
    ParameterCombination(ParameterCombination&& other) noexcept = default; // move constructor

    ParameterCombination& operator=(const ParameterCombination& other) = default; // copy assignment
    ParameterCombination& operator=(ParameterCombination&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// ParameterCombination members

    /// <summary>
    /// String identifying a Supi that shall contain either an IMSI, a network specific identifier, a Global Cable Identifier (GCI) or a Global Line Identifier (GLI) as specified in clause  2.2A of 3GPP TS 23.003. It shall be formatted as follows  - for an IMSI \&quot;imsi-&lt;imsi&gt;\&quot;, where &lt;imsi&gt; shall be formatted according to clause 2.2    of 3GPP TS 23.003 that describes an IMSI.  - for a network specific identifier \&quot;nai-&lt;nai&gt;, where &lt;nai&gt; shall be formatted    according to clause 28.7.2 of 3GPP TS 23.003 that describes an NAI.  - for a GCI \&quot;gci-&lt;gci&gt;\&quot;, where &lt;gci&gt; shall be formatted according to clause 28.15.2    of 3GPP TS 23.003.  - for a GLI \&quot;gli-&lt;gli&gt;\&quot;, where &lt;gli&gt; shall be formatted according to clause 28.16.2 of    3GPP TS 23.003.To enable that the value is used as part of an URI, the string shall    only contain characters allowed according to the \&quot;lower-with-hyphen\&quot; naming convention    defined in 3GPP TS 29.501. 
    /// </summary>
    std::string getSupi() const;
    void setSupi(std::string value);

    /// <summary>
    /// String representing a Data Network as defined in clause 9A of 3GPP TS 23.003;  it shall contain either a DNN Network Identifier, or a full DNN with both the Network  Identifier and Operator Identifier, as specified in 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in which the labels are separated by dots  (e.g. \&quot;Label1.Label2.Label3\&quot;). 
    /// </summary>
    std::string getDnn() const;
    void setDnn(std::string value);

    /// <summary>
    /// 
    /// </summary>
    Snssai getSnssai() const;
    void setSnssai(Snssai value);

protected:
    std::string m_Supi = "";
    std::string m_Dnn = "";
    Snssai m_Snssai;
};

std::vector<ParameterCombination> createParameterCombinationVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<ParameterCombination>(const ParameterCombination& val) {
    return val.toPropertyTree();
}

template<>
inline ParameterCombination fromPt<ParameterCombination>(const boost::property_tree::ptree& pt) {
    ParameterCombination ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* ParameterCombination_H_ */
