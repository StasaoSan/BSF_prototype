/**
 * Nbsf_Management
 * Binding Support Management Service API.    Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).    All rights reserved.  
 *
 * The version of the OpenAPI document: 1.3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "PcfBinding.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

PcfBinding::PcfBinding(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string PcfBinding::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void PcfBinding::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree PcfBinding::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("supi", m_Supi);
	pt.put("gpsi", m_Gpsi);
	pt.put("ipv4Addr", m_Ipv4Addr);
	pt.add_child("ipv6Prefix", m_Ipv6Prefix.toPropertyTree());
	// generate tree for AddIpv6Prefixes
    tmp_node.clear();
	if (!m_AddIpv6Prefixes.empty()) {
        tmp_node = toPt(m_AddIpv6Prefixes);
		pt.add_child("addIpv6Prefixes", tmp_node);
		tmp_node.clear();
	}
	pt.put("ipDomain", m_IpDomain);
	pt.put("macAddr48", m_MacAddr48);
	// generate tree for AddMacAddrs
    tmp_node.clear();
	if (!m_AddMacAddrs.empty()) {
        tmp_node = toPt(m_AddMacAddrs);
		pt.add_child("addMacAddrs", tmp_node);
		tmp_node.clear();
	}
	pt.put("dnn", m_Dnn);
	pt.put("pcfFqdn", m_PcfFqdn);
	// generate tree for PcfIpEndPoints
    tmp_node.clear();
	if (!m_PcfIpEndPoints.empty()) {
        tmp_node = toPt(m_PcfIpEndPoints);
		pt.add_child("pcfIpEndPoints", tmp_node);
		tmp_node.clear();
	}
	pt.put("pcfDiamHost", m_PcfDiamHost);
	pt.put("pcfDiamRealm", m_PcfDiamRealm);
	pt.put("pcfSmFqdn", m_PcfSmFqdn);
	// generate tree for PcfSmIpEndPoints
    tmp_node.clear();
	if (!m_PcfSmIpEndPoints.empty()) {
        tmp_node = toPt(m_PcfSmIpEndPoints);
		pt.add_child("pcfSmIpEndPoints", tmp_node);
		tmp_node.clear();
	}
	pt.add_child("snssai", m_Snssai.toPropertyTree());
	pt.put("suppFeat", m_SuppFeat);
	pt.put("pcfId", m_PcfId);
	pt.put("pcfSetId", m_PcfSetId);
	pt.put("recoveryTime", m_RecoveryTime);
	pt.add_child("paraCom", m_ParaCom.toPropertyTree());
	pt.add_child("bindLevel", m_BindLevel.toPropertyTree());
	// generate tree for Ipv4FrameRouteList
    tmp_node.clear();
	if (!m_Ipv4FrameRouteList.empty()) {
        tmp_node = toPt(m_Ipv4FrameRouteList);
		pt.add_child("ipv4FrameRouteList", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Ipv6FrameRouteList
    tmp_node.clear();
	if (!m_Ipv6FrameRouteList.empty()) {
        tmp_node = toPt(m_Ipv6FrameRouteList);
		pt.add_child("ipv6FrameRouteList", tmp_node);
		tmp_node.clear();
	}
	return pt;
}

void PcfBinding::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Supi = pt.get("supi", "");
	m_Gpsi = pt.get("gpsi", "");
	m_Ipv4Addr = pt.get("ipv4Addr", "");
	if (pt.get_child_optional("ipv6Prefix")) {
        m_Ipv6Prefix = fromPt<Ipv6Prefix>(pt.get_child("ipv6Prefix"));
	}
	// push all items of AddIpv6Prefixes into member
	if (pt.get_child_optional("addIpv6Prefixes")) {
        m_AddIpv6Prefixes = fromPt<std::vector<Ipv6Prefix>>(pt.get_child("addIpv6Prefixes"));
	}
	m_IpDomain = pt.get("ipDomain", "");
	m_MacAddr48 = pt.get("macAddr48", "");
	// push all items of AddMacAddrs into member
	if (pt.get_child_optional("addMacAddrs")) {
        m_AddMacAddrs = fromPt<std::vector<std::string>>(pt.get_child("addMacAddrs"));
	}
	m_Dnn = pt.get("dnn", "");
	m_PcfFqdn = pt.get("pcfFqdn", "");
	// push all items of PcfIpEndPoints into member
	if (pt.get_child_optional("pcfIpEndPoints")) {
        m_PcfIpEndPoints = fromPt<std::vector<IpEndPoint>>(pt.get_child("pcfIpEndPoints"));
	}
	m_PcfDiamHost = pt.get("pcfDiamHost", "");
	m_PcfDiamRealm = pt.get("pcfDiamRealm", "");
	m_PcfSmFqdn = pt.get("pcfSmFqdn", "");
	// push all items of PcfSmIpEndPoints into member
	if (pt.get_child_optional("pcfSmIpEndPoints")) {
        m_PcfSmIpEndPoints = fromPt<std::vector<IpEndPoint>>(pt.get_child("pcfSmIpEndPoints"));
	}
	if (pt.get_child_optional("snssai")) {
        m_Snssai = fromPt<Snssai>(pt.get_child("snssai"));
	}
	m_SuppFeat = pt.get("suppFeat", "");
	m_PcfId = pt.get("pcfId", "");
	m_PcfSetId = pt.get("pcfSetId", "");
	m_RecoveryTime = pt.get("recoveryTime", "");
	if (pt.get_child_optional("paraCom")) {
        m_ParaCom = fromPt<ParameterCombination>(pt.get_child("paraCom"));
	}
	if (pt.get_child_optional("bindLevel")) {
        m_BindLevel = fromPt<BindingLevel>(pt.get_child("bindLevel"));
	}
	// push all items of Ipv4FrameRouteList into member
	if (pt.get_child_optional("ipv4FrameRouteList")) {
        m_Ipv4FrameRouteList = fromPt<std::vector<std::string>>(pt.get_child("ipv4FrameRouteList"));
	}
	// push all items of Ipv6FrameRouteList into member
	if (pt.get_child_optional("ipv6FrameRouteList")) {
        m_Ipv6FrameRouteList = fromPt<std::vector<Ipv6Prefix>>(pt.get_child("ipv6FrameRouteList"));
	}
}

std::string PcfBinding::getSupi() const
{
    return m_Supi;
}

void PcfBinding::setSupi(std::string value)
{
    m_Supi = value;
}


std::string PcfBinding::getGpsi() const
{
    return m_Gpsi;
}

void PcfBinding::setGpsi(std::string value)
{
    m_Gpsi = value;
}


std::string PcfBinding::getIpv4Addr() const
{
    return m_Ipv4Addr;
}

void PcfBinding::setIpv4Addr(std::string value)
{
    m_Ipv4Addr = value;
}


Ipv6Prefix PcfBinding::getIpv6Prefix() const
{
    return m_Ipv6Prefix;
}

void PcfBinding::setIpv6Prefix(Ipv6Prefix value)
{
    m_Ipv6Prefix = value;
}


std::vector<Ipv6Prefix> PcfBinding::getAddIpv6Prefixes() const
{
    return m_AddIpv6Prefixes;
}

void PcfBinding::setAddIpv6Prefixes(std::vector<Ipv6Prefix> value)
{
    m_AddIpv6Prefixes = value;
}


std::string PcfBinding::getIpDomain() const
{
    return m_IpDomain;
}

void PcfBinding::setIpDomain(std::string value)
{
    m_IpDomain = value;
}


std::string PcfBinding::getMacAddr48() const
{
    return m_MacAddr48;
}

void PcfBinding::setMacAddr48(std::string value)
{
    m_MacAddr48 = value;
}


std::vector<std::string> PcfBinding::getAddMacAddrs() const
{
    return m_AddMacAddrs;
}

void PcfBinding::setAddMacAddrs(std::vector<std::string> value)
{
    m_AddMacAddrs = value;
}


std::string PcfBinding::getDnn() const
{
    return m_Dnn;
}

void PcfBinding::setDnn(std::string value)
{
    m_Dnn = value;
}


std::string PcfBinding::getPcfFqdn() const
{
    return m_PcfFqdn;
}

void PcfBinding::setPcfFqdn(std::string value)
{
    m_PcfFqdn = value;
}


std::vector<IpEndPoint> PcfBinding::getPcfIpEndPoints() const
{
    return m_PcfIpEndPoints;
}

void PcfBinding::setPcfIpEndPoints(std::vector<IpEndPoint> value)
{
    m_PcfIpEndPoints = value;
}


std::string PcfBinding::getPcfDiamHost() const
{
    return m_PcfDiamHost;
}

void PcfBinding::setPcfDiamHost(std::string value)
{
    m_PcfDiamHost = value;
}


std::string PcfBinding::getPcfDiamRealm() const
{
    return m_PcfDiamRealm;
}

void PcfBinding::setPcfDiamRealm(std::string value)
{
    m_PcfDiamRealm = value;
}


std::string PcfBinding::getPcfSmFqdn() const
{
    return m_PcfSmFqdn;
}

void PcfBinding::setPcfSmFqdn(std::string value)
{
    m_PcfSmFqdn = value;
}


std::vector<IpEndPoint> PcfBinding::getPcfSmIpEndPoints() const
{
    return m_PcfSmIpEndPoints;
}

void PcfBinding::setPcfSmIpEndPoints(std::vector<IpEndPoint> value)
{
    m_PcfSmIpEndPoints = value;
}


Snssai PcfBinding::getSnssai() const
{
    return m_Snssai;
}

void PcfBinding::setSnssai(Snssai value)
{
    m_Snssai = value;
}


std::string PcfBinding::getSuppFeat() const
{
    return m_SuppFeat;
}

void PcfBinding::setSuppFeat(std::string value)
{
    m_SuppFeat = value;
}


std::string PcfBinding::getPcfId() const
{
    return m_PcfId;
}

void PcfBinding::setPcfId(std::string value)
{
    m_PcfId = value;
}


std::string PcfBinding::getPcfSetId() const
{
    return m_PcfSetId;
}

void PcfBinding::setPcfSetId(std::string value)
{
    m_PcfSetId = value;
}


std::string PcfBinding::getRecoveryTime() const
{
    return m_RecoveryTime;
}

void PcfBinding::setRecoveryTime(std::string value)
{
    m_RecoveryTime = value;
}


ParameterCombination PcfBinding::getParaCom() const
{
    return m_ParaCom;
}

void PcfBinding::setParaCom(ParameterCombination value)
{
    m_ParaCom = value;
}


BindingLevel PcfBinding::getBindLevel() const
{
    return m_BindLevel;
}

void PcfBinding::setBindLevel(BindingLevel value)
{
    m_BindLevel = value;
}


std::vector<std::string> PcfBinding::getIpv4FrameRouteList() const
{
    return m_Ipv4FrameRouteList;
}

void PcfBinding::setIpv4FrameRouteList(std::vector<std::string> value)
{
    m_Ipv4FrameRouteList = value;
}


std::vector<Ipv6Prefix> PcfBinding::getIpv6FrameRouteList() const
{
    return m_Ipv6FrameRouteList;
}

void PcfBinding::setIpv6FrameRouteList(std::vector<Ipv6Prefix> value)
{
    m_Ipv6FrameRouteList = value;
}



std::vector<PcfBinding> createPcfBindingVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<PcfBinding>();
    for (const auto& child: pt) {
        vec.emplace_back(PcfBinding(child.second));
    }

    return vec;
}

}
}
}
}

