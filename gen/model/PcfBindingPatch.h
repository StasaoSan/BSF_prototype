/**
 * Nbsf_Management
 * Binding Support Management Service API.    Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).    All rights reserved.  
 *
 * The version of the OpenAPI document: 1.3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PcfBindingPatch.h
 *
 * Identifies an Individual PCF binding used in an HTTP Patch method.
 */

#ifndef PcfBindingPatch_H_
#define PcfBindingPatch_H_



#include <string>
#include "IpEndPoint.h"
#include "Ipv6Prefix.h"
#include "Ipv6PrefixRm.h"
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Identifies an Individual PCF binding used in an HTTP Patch method.
/// </summary>
class  PcfBindingPatch 
{
public:
    PcfBindingPatch() = default;
    explicit PcfBindingPatch(boost::property_tree::ptree const& pt);
    virtual ~PcfBindingPatch() = default;

    PcfBindingPatch(const PcfBindingPatch& other) = default; // copy constructor
    PcfBindingPatch(PcfBindingPatch&& other) noexcept = default; // move constructor

    PcfBindingPatch& operator=(const PcfBindingPatch& other) = default; // copy assignment
    PcfBindingPatch& operator=(PcfBindingPatch&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// PcfBindingPatch members

    /// <summary>
    /// String identifying a IPv4 address formatted in the &#39;dotted decimal&#39; notation as defined in RFC 1166 with the OpenAPI defined &#39;nullable: true&#39; property. 
    /// </summary>
    std::string getIpv4Addr() const;
    void setIpv4Addr(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getIpDomain() const;
    void setIpDomain(std::string value);

    /// <summary>
    /// 
    /// </summary>
    Ipv6PrefixRm getIpv6Prefix() const;
    void setIpv6Prefix(Ipv6PrefixRm value);

    /// <summary>
    /// The additional IPv6 Address Prefixes of the served UE.
    /// </summary>
    std::vector<Ipv6Prefix> getAddIpv6Prefixes() const;
    void setAddIpv6Prefixes(std::vector<Ipv6Prefix> value);

    /// <summary>
    /// \&quot;String identifying a MAC address formatted in the hexadecimal notation according to clause 1.1 and clause 2.1 of RFC 7042 with the OpenAPI &#39;nullable: true&#39; property.\&quot; 
    /// </summary>
    std::string getMacAddr48() const;
    void setMacAddr48(std::string value);

    /// <summary>
    /// The additional MAC Addresses of the served UE.
    /// </summary>
    std::vector<std::string> getAddMacAddrs() const;
    void setAddMacAddrs(std::vector<std::string> value);

    /// <summary>
    /// String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.  
    /// </summary>
    std::string getPcfId() const;
    void setPcfId(std::string value);

    /// <summary>
    /// Fully Qualified Domain Name
    /// </summary>
    std::string getPcfFqdn() const;
    void setPcfFqdn(std::string value);

    /// <summary>
    /// IP end points of the PCF hosting the Npcf_PolicyAuthorization service.
    /// </summary>
    std::vector<IpEndPoint> getPcfIpEndPoints() const;
    void setPcfIpEndPoints(std::vector<IpEndPoint> value);

    /// <summary>
    /// Fully Qualified Domain Name
    /// </summary>
    std::string getPcfDiamHost() const;
    void setPcfDiamHost(std::string value);

    /// <summary>
    /// Fully Qualified Domain Name
    /// </summary>
    std::string getPcfDiamRealm() const;
    void setPcfDiamRealm(std::string value);

protected:
    std::string m_Ipv4Addr = "";
    std::string m_IpDomain = "";
    Ipv6PrefixRm m_Ipv6Prefix;
    std::vector<Ipv6Prefix> m_AddIpv6Prefixes;
    std::string m_MacAddr48 = "";
    std::vector<std::string> m_AddMacAddrs;
    std::string m_PcfId = "";
    std::string m_PcfFqdn = "";
    std::vector<IpEndPoint> m_PcfIpEndPoints;
    std::string m_PcfDiamHost = "";
    std::string m_PcfDiamRealm = "";
};

std::vector<PcfBindingPatch> createPcfBindingPatchVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<PcfBindingPatch>(const PcfBindingPatch& val) {
    return val.toPropertyTree();
}

template<>
inline PcfBindingPatch fromPt<PcfBindingPatch>(const boost::property_tree::ptree& pt) {
    PcfBindingPatch ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* PcfBindingPatch_H_ */
