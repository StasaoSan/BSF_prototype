/**
 * Nbsf_Management
 * Binding Support Management Service API.    Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).    All rights reserved.  
 *
 * The version of the OpenAPI document: 1.3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PcfForPduSessionInfo.h
 *
 * Contains the informaiton of the PCF for a PDU session.
 */

#ifndef PcfForPduSessionInfo_H_
#define PcfForPduSessionInfo_H_



#include "BindingLevel.h"
#include <string>
#include "IpEndPoint.h"
#include "Ipv6Prefix.h"
#include "Snssai.h"
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Contains the informaiton of the PCF for a PDU session.
/// </summary>
class  PcfForPduSessionInfo 
{
public:
    PcfForPduSessionInfo() = default;
    explicit PcfForPduSessionInfo(boost::property_tree::ptree const& pt);
    virtual ~PcfForPduSessionInfo() = default;

    PcfForPduSessionInfo(const PcfForPduSessionInfo& other) = default; // copy constructor
    PcfForPduSessionInfo(PcfForPduSessionInfo&& other) noexcept = default; // move constructor

    PcfForPduSessionInfo& operator=(const PcfForPduSessionInfo& other) = default; // copy assignment
    PcfForPduSessionInfo& operator=(PcfForPduSessionInfo&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// PcfForPduSessionInfo members

    /// <summary>
    /// String representing a Data Network as defined in clause 9A of 3GPP TS 23.003;  it shall contain either a DNN Network Identifier, or a full DNN with both the Network  Identifier and Operator Identifier, as specified in 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in which the labels are separated by dots  (e.g. \&quot;Label1.Label2.Label3\&quot;). 
    /// </summary>
    std::string getDnn() const;
    void setDnn(std::string value);

    /// <summary>
    /// 
    /// </summary>
    Snssai getSnssai() const;
    void setSnssai(Snssai value);

    /// <summary>
    /// Fully Qualified Domain Name
    /// </summary>
    std::string getPcfFqdn() const;
    void setPcfFqdn(std::string value);

    /// <summary>
    /// IP end points of the PCF hosting the Npcf_AmPolicyAuthorization service.
    /// </summary>
    std::vector<IpEndPoint> getPcfIpEndPoints() const;
    void setPcfIpEndPoints(std::vector<IpEndPoint> value);

    /// <summary>
    /// String identifying a IPv4 address formatted in the &#39;dotted decimal&#39; notation as defined in RFC 1166 with the OpenAPI defined &#39;nullable: true&#39; property. 
    /// </summary>
    std::string getIpv4Addr() const;
    void setIpv4Addr(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getIpDomain() const;
    void setIpDomain(std::string value);

    /// <summary>
    /// The IPv6 Address Prefixes of the served UE.
    /// </summary>
    std::vector<Ipv6Prefix> getIpv6Prefixes() const;
    void setIpv6Prefixes(std::vector<Ipv6Prefix> value);

    /// <summary>
    /// The MAC Addresses of the served UE.
    /// </summary>
    std::vector<std::string> getMacAddrs() const;
    void setMacAddrs(std::vector<std::string> value);

    /// <summary>
    /// String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.  
    /// </summary>
    std::string getPcfId() const;
    void setPcfId(std::string value);

    /// <summary>
    /// NF Set Identifier (see clause 28.12 of 3GPP TS 23.003), formatted as the following string \&quot;set&lt;Set ID&gt;.&lt;nftype&gt;set.5gc.mnc&lt;MNC&gt;.mcc&lt;MCC&gt;\&quot;, or  \&quot;set&lt;SetID&gt;.&lt;NFType&gt;set.5gc.nid&lt;NID&gt;.mnc&lt;MNC&gt;.mcc&lt;MCC&gt;\&quot; with  &lt;MCC&gt; encoded as defined in clause 5.4.2 (\&quot;Mcc\&quot; data type definition)  &lt;MNC&gt; encoding the Mobile Network Code part of the PLMN, comprising 3 digits.    If there are only 2 significant digits in the MNC, one \&quot;0\&quot; digit shall be inserted    at the left side to fill the 3 digits coding of MNC.  Pattern: &#39;^[0-9]{3}$&#39; &lt;NFType&gt; encoded as a value defined in Table 6.1.6.3.3-1 of 3GPP TS 29.510 but    with lower case characters &lt;Set ID&gt; encoded as a string of characters consisting of    alphabetic characters (A-Z and a-z), digits (0-9) and/or the hyphen (-) and that    shall end with either an alphabetic character or a digit.  
    /// </summary>
    std::string getPcfSetId() const;
    void setPcfSetId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    BindingLevel getBindLevel() const;
    void setBindLevel(BindingLevel value);

protected:
    std::string m_Dnn = "";
    Snssai m_Snssai;
    std::string m_PcfFqdn = "";
    std::vector<IpEndPoint> m_PcfIpEndPoints;
    std::string m_Ipv4Addr = "";
    std::string m_IpDomain = "";
    std::vector<Ipv6Prefix> m_Ipv6Prefixes;
    std::vector<std::string> m_MacAddrs;
    std::string m_PcfId = "";
    std::string m_PcfSetId = "";
    BindingLevel m_BindLevel;
};

std::vector<PcfForPduSessionInfo> createPcfForPduSessionInfoVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<PcfForPduSessionInfo>(const PcfForPduSessionInfo& val) {
    return val.toPropertyTree();
}

template<>
inline PcfForPduSessionInfo fromPt<PcfForPduSessionInfo>(const boost::property_tree::ptree& pt) {
    PcfForPduSessionInfo ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* PcfForPduSessionInfo_H_ */
