/**
 * Nbsf_Management
 * Binding Support Management Service API.    © 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).    All rights reserved.  
 *
 * The version of the OpenAPI document: 1.3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PcfForUeBinding.h
 *
 * Identifies an Individual PCF for a UE binding.
 */

#ifndef PcfForUeBinding_H_
#define PcfForUeBinding_H_



#include "BindingLevel.h"
#include <string>
#include "IpEndPoint.h"
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Identifies an Individual PCF for a UE binding.
/// </summary>
class  PcfForUeBinding 
{
public:
    PcfForUeBinding() = default;
    explicit PcfForUeBinding(boost::property_tree::ptree const& pt);
    virtual ~PcfForUeBinding() = default;

    PcfForUeBinding(const PcfForUeBinding& other) = default; // copy constructor
    PcfForUeBinding(PcfForUeBinding&& other) noexcept = default; // move constructor

    PcfForUeBinding& operator=(const PcfForUeBinding& other) = default; // copy assignment
    PcfForUeBinding& operator=(PcfForUeBinding&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// PcfForUeBinding members

    /// <summary>
    /// String identifying a Supi that shall contain either an IMSI, a network specific identifier, a Global Cable Identifier (GCI) or a Global Line Identifier (GLI) as specified in clause  2.2A of 3GPP TS 23.003. It shall be formatted as follows  - for an IMSI \&quot;imsi-&lt;imsi&gt;\&quot;, where &lt;imsi&gt; shall be formatted according to clause 2.2    of 3GPP TS 23.003 that describes an IMSI.  - for a network specific identifier \&quot;nai-&lt;nai&gt;, where &lt;nai&gt; shall be formatted    according to clause 28.7.2 of 3GPP TS 23.003 that describes an NAI.  - for a GCI \&quot;gci-&lt;gci&gt;\&quot;, where &lt;gci&gt; shall be formatted according to clause 28.15.2    of 3GPP TS 23.003.  - for a GLI \&quot;gli-&lt;gli&gt;\&quot;, where &lt;gli&gt; shall be formatted according to clause 28.16.2 of    3GPP TS 23.003.To enable that the value is used as part of an URI, the string shall    only contain characters allowed according to the \&quot;lower-with-hyphen\&quot; naming convention    defined in 3GPP TS 29.501. 
    /// </summary>
    std::string getSupi() const;
    void setSupi(std::string value);

    /// <summary>
    /// String identifying a Gpsi shall contain either an External Id or an MSISDN.  It shall be formatted as follows -External Identifier&#x3D; \&quot;extid-&#39;extid&#39;, where &#39;extid&#39;  shall be formatted according to clause 19.7.2 of 3GPP TS 23.003 that describes an  External Identifier.  
    /// </summary>
    std::string getGpsi() const;
    void setGpsi(std::string value);

    /// <summary>
    /// Fully Qualified Domain Name
    /// </summary>
    std::string getPcfForUeFqdn() const;
    void setPcfForUeFqdn(std::string value);

    /// <summary>
    /// IP end points of the PCF hosting the Npcf_AmPolicyAuthorization service.
    /// </summary>
    std::vector<IpEndPoint> getPcfForUeIpEndPoints() const;
    void setPcfForUeIpEndPoints(std::vector<IpEndPoint> value);

    /// <summary>
    /// String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.  
    /// </summary>
    std::string getPcfId() const;
    void setPcfId(std::string value);

    /// <summary>
    /// NF Set Identifier (see clause 28.12 of 3GPP TS 23.003), formatted as the following string \&quot;set&lt;Set ID&gt;.&lt;nftype&gt;set.5gc.mnc&lt;MNC&gt;.mcc&lt;MCC&gt;\&quot;, or  \&quot;set&lt;SetID&gt;.&lt;NFType&gt;set.5gc.nid&lt;NID&gt;.mnc&lt;MNC&gt;.mcc&lt;MCC&gt;\&quot; with  &lt;MCC&gt; encoded as defined in clause 5.4.2 (\&quot;Mcc\&quot; data type definition)  &lt;MNC&gt; encoding the Mobile Network Code part of the PLMN, comprising 3 digits.    If there are only 2 significant digits in the MNC, one \&quot;0\&quot; digit shall be inserted    at the left side to fill the 3 digits coding of MNC.  Pattern: &#39;^[0-9]{3}$&#39; &lt;NFType&gt; encoded as a value defined in Table 6.1.6.3.3-1 of 3GPP TS 29.510 but    with lower case characters &lt;Set ID&gt; encoded as a string of characters consisting of    alphabetic characters (A-Z and a-z), digits (0-9) and/or the hyphen (-) and that    shall end with either an alphabetic character or a digit.  
    /// </summary>
    std::string getPcfSetId() const;
    void setPcfSetId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    BindingLevel getBindLevel() const;
    void setBindLevel(BindingLevel value);

    /// <summary>
    /// A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \&quot;0\&quot; to \&quot;9\&quot;,  \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to \&quot;F\&quot; and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported. 
    /// </summary>
    std::string getSuppFeat() const;
    void setSuppFeat(std::string value);

protected:
    std::string m_Supi = "";
    std::string m_Gpsi = "";
    std::string m_PcfForUeFqdn = "";
    std::vector<IpEndPoint> m_PcfForUeIpEndPoints;
    std::string m_PcfId = "";
    std::string m_PcfSetId = "";
    BindingLevel m_BindLevel;
    std::string m_SuppFeat = "";
};

std::vector<PcfForUeBinding> createPcfForUeBindingVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<PcfForUeBinding>(const PcfForUeBinding& val) {
    return val.toPropertyTree();
}

template<>
inline PcfForUeBinding fromPt<PcfForUeBinding>(const boost::property_tree::ptree& pt) {
    PcfForUeBinding ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* PcfForUeBinding_H_ */
