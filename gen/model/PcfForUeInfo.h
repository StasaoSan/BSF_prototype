/**
 * Nbsf_Management
 * Binding Support Management Service API.    Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).    All rights reserved.  
 *
 * The version of the OpenAPI document: 1.3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PcfForUeInfo.h
 *
 * Contains the information of the PCF for a UE.
 */

#ifndef PcfForUeInfo_H_
#define PcfForUeInfo_H_



#include "BindingLevel.h"
#include <string>
#include "IpEndPoint.h"
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Contains the information of the PCF for a UE.
/// </summary>
class  PcfForUeInfo 
{
public:
    PcfForUeInfo() = default;
    explicit PcfForUeInfo(boost::property_tree::ptree const& pt);
    virtual ~PcfForUeInfo() = default;

    PcfForUeInfo(const PcfForUeInfo& other) = default; // copy constructor
    PcfForUeInfo(PcfForUeInfo&& other) noexcept = default; // move constructor

    PcfForUeInfo& operator=(const PcfForUeInfo& other) = default; // copy assignment
    PcfForUeInfo& operator=(PcfForUeInfo&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// PcfForUeInfo members

    /// <summary>
    /// Fully Qualified Domain Name
    /// </summary>
    std::string getPcfFqdn() const;
    void setPcfFqdn(std::string value);

    /// <summary>
    /// IP end points of the PCF hosting the Npcf_AmPolicyAuthorization service.
    /// </summary>
    std::vector<IpEndPoint> getPcfIpEndPoints() const;
    void setPcfIpEndPoints(std::vector<IpEndPoint> value);

    /// <summary>
    /// String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.  
    /// </summary>
    std::string getPcfId() const;
    void setPcfId(std::string value);

    /// <summary>
    /// NF Set Identifier (see clause 28.12 of 3GPP TS 23.003), formatted as the following string \&quot;set&lt;Set ID&gt;.&lt;nftype&gt;set.5gc.mnc&lt;MNC&gt;.mcc&lt;MCC&gt;\&quot;, or  \&quot;set&lt;SetID&gt;.&lt;NFType&gt;set.5gc.nid&lt;NID&gt;.mnc&lt;MNC&gt;.mcc&lt;MCC&gt;\&quot; with  &lt;MCC&gt; encoded as defined in clause 5.4.2 (\&quot;Mcc\&quot; data type definition)  &lt;MNC&gt; encoding the Mobile Network Code part of the PLMN, comprising 3 digits.    If there are only 2 significant digits in the MNC, one \&quot;0\&quot; digit shall be inserted    at the left side to fill the 3 digits coding of MNC.  Pattern: &#39;^[0-9]{3}$&#39; &lt;NFType&gt; encoded as a value defined in Table 6.1.6.3.3-1 of 3GPP TS 29.510 but    with lower case characters &lt;Set ID&gt; encoded as a string of characters consisting of    alphabetic characters (A-Z and a-z), digits (0-9) and/or the hyphen (-) and that    shall end with either an alphabetic character or a digit.  
    /// </summary>
    std::string getPcfSetId() const;
    void setPcfSetId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    BindingLevel getBindLevel() const;
    void setBindLevel(BindingLevel value);

protected:
    std::string m_PcfFqdn = "";
    std::vector<IpEndPoint> m_PcfIpEndPoints;
    std::string m_PcfId = "";
    std::string m_PcfSetId = "";
    BindingLevel m_BindLevel;
};

std::vector<PcfForUeInfo> createPcfForUeInfoVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<PcfForUeInfo>(const PcfForUeInfo& val) {
    return val.toPropertyTree();
}

template<>
inline PcfForUeInfo fromPt<PcfForUeInfo>(const boost::property_tree::ptree& pt) {
    PcfForUeInfo ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* PcfForUeInfo_H_ */
