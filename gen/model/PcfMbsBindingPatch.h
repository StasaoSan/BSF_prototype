/**
 * Nbsf_Management
 * Binding Support Management Service API.    Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).    All rights reserved.  
 *
 * The version of the OpenAPI document: 1.3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PcfMbsBindingPatch.h
 *
 * Represents the requested modification to an Individual PCF for an MBS Session binding.  
 */

#ifndef PcfMbsBindingPatch_H_
#define PcfMbsBindingPatch_H_



#include <string>
#include "IpEndPoint.h"
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents the requested modification to an Individual PCF for an MBS Session binding.  
/// </summary>
class  PcfMbsBindingPatch 
{
public:
    PcfMbsBindingPatch() = default;
    explicit PcfMbsBindingPatch(boost::property_tree::ptree const& pt);
    virtual ~PcfMbsBindingPatch() = default;

    PcfMbsBindingPatch(const PcfMbsBindingPatch& other) = default; // copy constructor
    PcfMbsBindingPatch(PcfMbsBindingPatch&& other) noexcept = default; // move constructor

    PcfMbsBindingPatch& operator=(const PcfMbsBindingPatch& other) = default; // copy assignment
    PcfMbsBindingPatch& operator=(PcfMbsBindingPatch&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// PcfMbsBindingPatch members

    /// <summary>
    /// Fully Qualified Domain Name
    /// </summary>
    std::string getPcfFqdn() const;
    void setPcfFqdn(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<IpEndPoint> getPcfIpEndPoints() const;
    void setPcfIpEndPoints(std::vector<IpEndPoint> value);

    /// <summary>
    /// String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.  
    /// </summary>
    std::string getPcfId() const;
    void setPcfId(std::string value);

protected:
    std::string m_PcfFqdn = "";
    std::vector<IpEndPoint> m_PcfIpEndPoints;
    std::string m_PcfId = "";
};

std::vector<PcfMbsBindingPatch> createPcfMbsBindingPatchVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<PcfMbsBindingPatch>(const PcfMbsBindingPatch& val) {
    return val.toPropertyTree();
}

template<>
inline PcfMbsBindingPatch fromPt<PcfMbsBindingPatch>(const boost::property_tree::ptree& pt) {
    PcfMbsBindingPatch ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* PcfMbsBindingPatch_H_ */
