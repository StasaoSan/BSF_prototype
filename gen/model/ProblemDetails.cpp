/**
 * Nbsf_Management
 * Binding Support Management Service API.    Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).    All rights reserved.  
 *
 * The version of the OpenAPI document: 1.3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ProblemDetails.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

ProblemDetails::ProblemDetails(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string ProblemDetails::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void ProblemDetails::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree ProblemDetails::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("type", m_Type);
	pt.put("title", m_Title);
	pt.put("status", m_Status);
	pt.put("detail", m_Detail);
	pt.put("instance", m_Instance);
	pt.put("cause", m_Cause);
	// generate tree for InvalidParams
    tmp_node.clear();
	if (!m_InvalidParams.empty()) {
        tmp_node = toPt(m_InvalidParams);
		pt.add_child("invalidParams", tmp_node);
		tmp_node.clear();
	}
	pt.put("supportedFeatures", m_SupportedFeatures);
	pt.add_child("accessTokenError", m_AccessTokenError.toPropertyTree());
	pt.add_child("accessTokenRequest", m_AccessTokenRequest.toPropertyTree());
	pt.put("nrfId", m_NrfId);
	return pt;
}

void ProblemDetails::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Type = pt.get("type", "");
	m_Title = pt.get("title", "");
	m_Status = pt.get("status", 0);
	m_Detail = pt.get("detail", "");
	m_Instance = pt.get("instance", "");
	m_Cause = pt.get("cause", "");
	// push all items of InvalidParams into member
	if (pt.get_child_optional("invalidParams")) {
        m_InvalidParams = fromPt<std::vector<InvalidParam>>(pt.get_child("invalidParams"));
	}
	m_SupportedFeatures = pt.get("supportedFeatures", "");
	if (pt.get_child_optional("accessTokenError")) {
        m_AccessTokenError = fromPt<AccessTokenErr>(pt.get_child("accessTokenError"));
	}
	if (pt.get_child_optional("accessTokenRequest")) {
        m_AccessTokenRequest = fromPt<AccessTokenReq>(pt.get_child("accessTokenRequest"));
	}
	m_NrfId = pt.get("nrfId", "");
}

std::string ProblemDetails::getType() const
{
    return m_Type;
}

void ProblemDetails::setType(std::string value)
{
    m_Type = value;
}


std::string ProblemDetails::getTitle() const
{
    return m_Title;
}

void ProblemDetails::setTitle(std::string value)
{
    m_Title = value;
}


int32_t ProblemDetails::getStatus() const
{
    return m_Status;
}

void ProblemDetails::setStatus(int32_t value)
{
    m_Status = value;
}


std::string ProblemDetails::getDetail() const
{
    return m_Detail;
}

void ProblemDetails::setDetail(std::string value)
{
    m_Detail = value;
}


std::string ProblemDetails::getInstance() const
{
    return m_Instance;
}

void ProblemDetails::setInstance(std::string value)
{
    m_Instance = value;
}


std::string ProblemDetails::getCause() const
{
    return m_Cause;
}

void ProblemDetails::setCause(std::string value)
{
    m_Cause = value;
}


std::vector<InvalidParam> ProblemDetails::getInvalidParams() const
{
    return m_InvalidParams;
}

void ProblemDetails::setInvalidParams(std::vector<InvalidParam> value)
{
    m_InvalidParams = value;
}


std::string ProblemDetails::getSupportedFeatures() const
{
    return m_SupportedFeatures;
}

void ProblemDetails::setSupportedFeatures(std::string value)
{
    m_SupportedFeatures = value;
}


AccessTokenErr ProblemDetails::getAccessTokenError() const
{
    return m_AccessTokenError;
}

void ProblemDetails::setAccessTokenError(AccessTokenErr value)
{
    m_AccessTokenError = value;
}


AccessTokenReq ProblemDetails::getAccessTokenRequest() const
{
    return m_AccessTokenRequest;
}

void ProblemDetails::setAccessTokenRequest(AccessTokenReq value)
{
    m_AccessTokenRequest = value;
}


std::string ProblemDetails::getNrfId() const
{
    return m_NrfId;
}

void ProblemDetails::setNrfId(std::string value)
{
    m_NrfId = value;
}



std::vector<ProblemDetails> createProblemDetailsVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<ProblemDetails>();
    for (const auto& child: pt) {
        vec.emplace_back(ProblemDetails(child.second));
    }

    return vec;
}

}
}
}
}

