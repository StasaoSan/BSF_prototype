/**
 * Nbsf_Management
 * Binding Support Management Service API.    Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).    All rights reserved.  
 *
 * The version of the OpenAPI document: 1.3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "RedirectResponse.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

RedirectResponse::RedirectResponse(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string RedirectResponse::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void RedirectResponse::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree RedirectResponse::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("cause", m_Cause);
	pt.put("targetScp", m_TargetScp);
	pt.put("targetSepp", m_TargetSepp);
	return pt;
}

void RedirectResponse::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Cause = pt.get("cause", "");
	m_TargetScp = pt.get("targetScp", "");
	m_TargetSepp = pt.get("targetSepp", "");
}

std::string RedirectResponse::getCause() const
{
    return m_Cause;
}

void RedirectResponse::setCause(std::string value)
{
    m_Cause = value;
}


std::string RedirectResponse::getTargetScp() const
{
    return m_TargetScp;
}

void RedirectResponse::setTargetScp(std::string value)
{
    m_TargetScp = value;
}


std::string RedirectResponse::getTargetSepp() const
{
    return m_TargetSepp;
}

void RedirectResponse::setTargetSepp(std::string value)
{
    m_TargetSepp = value;
}



std::vector<RedirectResponse> createRedirectResponseVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<RedirectResponse>();
    for (const auto& child: pt) {
        vec.emplace_back(RedirectResponse(child.second));
    }

    return vec;
}

}
}
}
}

