/**
 * Nbsf_Management
 * Binding Support Management Service API.    Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).    All rights reserved.  
 *
 * The version of the OpenAPI document: 1.3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * RedirectResponse.h
 *
 * The response shall include a Location header field containing a different URI  (pointing to a different URI of an other service instance), or the same URI if a request  is redirected to the same target resource via a different SCP. 
 */

#ifndef RedirectResponse_H_
#define RedirectResponse_H_



#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// The response shall include a Location header field containing a different URI  (pointing to a different URI of an other service instance), or the same URI if a request  is redirected to the same target resource via a different SCP. 
/// </summary>
class  RedirectResponse 
{
public:
    RedirectResponse() = default;
    explicit RedirectResponse(boost::property_tree::ptree const& pt);
    virtual ~RedirectResponse() = default;

    RedirectResponse(const RedirectResponse& other) = default; // copy constructor
    RedirectResponse(RedirectResponse&& other) noexcept = default; // move constructor

    RedirectResponse& operator=(const RedirectResponse& other) = default; // copy assignment
    RedirectResponse& operator=(RedirectResponse&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// RedirectResponse members

    /// <summary>
    /// 
    /// </summary>
    std::string getCause() const;
    void setCause(std::string value);

    /// <summary>
    /// String providing an URI formatted according to RFC 3986.
    /// </summary>
    std::string getTargetScp() const;
    void setTargetScp(std::string value);

    /// <summary>
    /// String providing an URI formatted according to RFC 3986.
    /// </summary>
    std::string getTargetSepp() const;
    void setTargetSepp(std::string value);

protected:
    std::string m_Cause = "";
    std::string m_TargetScp = "";
    std::string m_TargetSepp = "";
};

std::vector<RedirectResponse> createRedirectResponseVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<RedirectResponse>(const RedirectResponse& val) {
    return val.toPropertyTree();
}

template<>
inline RedirectResponse fromPt<RedirectResponse>(const boost::property_tree::ptree& pt) {
    RedirectResponse ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* RedirectResponse_H_ */
