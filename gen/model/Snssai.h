/**
 * Nbsf_Management
 * Binding Support Management Service API.    Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).    All rights reserved.  
 *
 * The version of the OpenAPI document: 1.3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Snssai.h
 *
 * When Snssai needs to be converted to string (e.g. when used in maps as key), the string shall be composed of one to three digits \&quot;sst\&quot; optionally followed by \&quot;-\&quot; and 6 hexadecimal digits \&quot;sd\&quot;. 
 */

#ifndef Snssai_H_
#define Snssai_H_



#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// When Snssai needs to be converted to string (e.g. when used in maps as key), the string shall be composed of one to three digits \&quot;sst\&quot; optionally followed by \&quot;-\&quot; and 6 hexadecimal digits \&quot;sd\&quot;. 
/// </summary>
class  Snssai 
{
public:
    Snssai() = default;
    explicit Snssai(boost::property_tree::ptree const& pt);
    virtual ~Snssai() = default;

    Snssai(const Snssai& other) = default; // copy constructor
    Snssai(Snssai&& other) noexcept = default; // move constructor

    Snssai& operator=(const Snssai& other) = default; // copy assignment
    Snssai& operator=(Snssai&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// Snssai members

    /// <summary>
    /// Unsigned integer, within the range 0 to 255, representing the Slice/Service Type.  It indicates the expected Network Slice behaviour in terms of features and services. Values 0 to 127 correspond to the standardized SST range. Values 128 to 255 correspond  to the Operator-specific range. See clause 28.4.2 of 3GPP TS 23.003. Standardized values are defined in clause 5.15.2.2 of 3GPP TS 23.501.  
    /// </summary>
    int32_t getSst() const;
    void setSst(int32_t value);

    /// <summary>
    /// 3-octet string, representing the Slice Differentiator, in hexadecimal representation. Each character in the string shall take a value of \&quot;0\&quot; to \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to \&quot;F\&quot; and shall represent 4 bits. The most significant character representing the 4 most significant bits of the SD shall appear first in the string, and the character representing the 4 least significant bit of the SD shall appear last in the string. This is an optional parameter that complements the Slice/Service type(s) to allow to  differentiate amongst multiple Network Slices of the same Slice/Service type. This IE shall be absent if no SD value is associated with the SST. 
    /// </summary>
    std::string getSd() const;
    void setSd(std::string value);

protected:
    int32_t m_Sst = 0;
    std::string m_Sd = "";
};

std::vector<Snssai> createSnssaiVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<Snssai>(const Snssai& val) {
    return val.toPropertyTree();
}

template<>
inline Snssai fromPt<Snssai>(const boost::property_tree::ptree& pt) {
    Snssai ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* Snssai_H_ */
