/**
 * Nbsf_Management
 * Binding Support Management Service API.    Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).    All rights reserved.  
 *
 * The version of the OpenAPI document: 1.3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * SnssaiDnnPair.h
 *
 * Contains a S-NSSAI and DNN combination.
 */

#ifndef SnssaiDnnPair_H_
#define SnssaiDnnPair_H_



#include <string>
#include "Snssai.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Contains a S-NSSAI and DNN combination.
/// </summary>
class  SnssaiDnnPair 
{
public:
    SnssaiDnnPair() = default;
    explicit SnssaiDnnPair(boost::property_tree::ptree const& pt);
    virtual ~SnssaiDnnPair() = default;

    SnssaiDnnPair(const SnssaiDnnPair& other) = default; // copy constructor
    SnssaiDnnPair(SnssaiDnnPair&& other) noexcept = default; // move constructor

    SnssaiDnnPair& operator=(const SnssaiDnnPair& other) = default; // copy assignment
    SnssaiDnnPair& operator=(SnssaiDnnPair&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// SnssaiDnnPair members

    /// <summary>
    /// String representing a Data Network as defined in clause 9A of 3GPP TS 23.003;  it shall contain either a DNN Network Identifier, or a full DNN with both the Network  Identifier and Operator Identifier, as specified in 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in which the labels are separated by dots  (e.g. \&quot;Label1.Label2.Label3\&quot;). 
    /// </summary>
    std::string getDnn() const;
    void setDnn(std::string value);

    /// <summary>
    /// 
    /// </summary>
    Snssai getSnssai() const;
    void setSnssai(Snssai value);

protected:
    std::string m_Dnn = "";
    Snssai m_Snssai;
};

std::vector<SnssaiDnnPair> createSnssaiDnnPairVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<SnssaiDnnPair>(const SnssaiDnnPair& val) {
    return val.toPropertyTree();
}

template<>
inline SnssaiDnnPair fromPt<SnssaiDnnPair>(const boost::property_tree::ptree& pt) {
    SnssaiDnnPair ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* SnssaiDnnPair_H_ */
