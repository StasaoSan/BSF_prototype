/**
 * Nbsf_Management
 * Binding Support Management Service API.    Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).    All rights reserved.  
 *
 * The version of the OpenAPI document: 1.3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * TransportProtocol.h
 *
 * Types of transport protocol used in a given IP endpoint of an NF Service Instance
 */

#ifndef TransportProtocol_H_
#define TransportProtocol_H_



#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Types of transport protocol used in a given IP endpoint of an NF Service Instance
/// </summary>
class  TransportProtocol 
{
public:
    TransportProtocol() = default;
    explicit TransportProtocol(boost::property_tree::ptree const& pt);
    virtual ~TransportProtocol() = default;

    TransportProtocol(const TransportProtocol& other) = default; // copy constructor
    TransportProtocol(TransportProtocol&& other) noexcept = default; // move constructor

    TransportProtocol& operator=(const TransportProtocol& other) = default; // copy assignment
    TransportProtocol& operator=(TransportProtocol&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// TransportProtocol members

protected:
};

std::vector<TransportProtocol> createTransportProtocolVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<TransportProtocol>(const TransportProtocol& val) {
    return val.toPropertyTree();
}

template<>
inline TransportProtocol fromPt<TransportProtocol>(const boost::property_tree::ptree& pt) {
    TransportProtocol ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* TransportProtocol_H_ */
