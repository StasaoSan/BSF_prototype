/**
 * NRF NFManagement Service
 * NRF NFManagement Service.   Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.7
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "org.openapitools.server.model/model/AccessTokenErr.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



AccessTokenErr::AccessTokenErr()
{
    m_Error = utility::conversions::to_string_t("");
    m_ErrorIsSet = false;
    m_Error_description = utility::conversions::to_string_t("");
    m_Error_descriptionIsSet = false;
    m_Error_uri = utility::conversions::to_string_t("");
    m_Error_uriIsSet = false;
}

AccessTokenErr::~AccessTokenErr()
{
}

void AccessTokenErr::validate()
{
    // TODO: implement validation
}

web::json::value AccessTokenErr::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ErrorIsSet)
    {
        val[utility::conversions::to_string_t(U("error"))] = ModelBase::toJson(m_Error);
    }
    if(m_Error_descriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("error_description"))] = ModelBase::toJson(m_Error_description);
    }
    if(m_Error_uriIsSet)
    {
        val[utility::conversions::to_string_t(U("error_uri"))] = ModelBase::toJson(m_Error_uri);
    }

    return val;
}

bool AccessTokenErr::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("error"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("error")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setError;
            ok &= ModelBase::fromJson(fieldValue, refVal_setError);
            setError(refVal_setError);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("error_description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("error_description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setErrorDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setErrorDescription);
            setErrorDescription(refVal_setErrorDescription);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("error_uri"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("error_uri")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setErrorUri;
            ok &= ModelBase::fromJson(fieldValue, refVal_setErrorUri);
            setErrorUri(refVal_setErrorUri);
        }
    }
    return ok;
}

void AccessTokenErr::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ErrorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("error")), m_Error));
    }
    if(m_Error_descriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("error_description")), m_Error_description));
    }
    if(m_Error_uriIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("error_uri")), m_Error_uri));
    }
}

bool AccessTokenErr::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("error"))))
    {
        utility::string_t refVal_setError;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("error"))), refVal_setError );
        setError(refVal_setError);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("error_description"))))
    {
        utility::string_t refVal_setErrorDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("error_description"))), refVal_setErrorDescription );
        setErrorDescription(refVal_setErrorDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("error_uri"))))
    {
        utility::string_t refVal_setErrorUri;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("error_uri"))), refVal_setErrorUri );
        setErrorUri(refVal_setErrorUri);
    }
    return ok;
}

utility::string_t AccessTokenErr::getError() const
{
    return m_Error;
}

void AccessTokenErr::setError(const utility::string_t& value)
{
    m_Error = value;
    m_ErrorIsSet = true;
}

bool AccessTokenErr::errorIsSet() const
{
    return m_ErrorIsSet;
}

void AccessTokenErr::unsetError()
{
    m_ErrorIsSet = false;
}
utility::string_t AccessTokenErr::getErrorDescription() const
{
    return m_Error_description;
}

void AccessTokenErr::setErrorDescription(const utility::string_t& value)
{
    m_Error_description = value;
    m_Error_descriptionIsSet = true;
}

bool AccessTokenErr::errorDescriptionIsSet() const
{
    return m_Error_descriptionIsSet;
}

void AccessTokenErr::unsetError_description()
{
    m_Error_descriptionIsSet = false;
}
utility::string_t AccessTokenErr::getErrorUri() const
{
    return m_Error_uri;
}

void AccessTokenErr::setErrorUri(const utility::string_t& value)
{
    m_Error_uri = value;
    m_Error_uriIsSet = true;
}

bool AccessTokenErr::errorUriIsSet() const
{
    return m_Error_uriIsSet;
}

void AccessTokenErr::unsetError_uri()
{
    m_Error_uriIsSet = false;
}
}
}
}
}


