/**
 * Nbsf_Management
 * Binding Support Management Service API.    Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).    All rights reserved.  
 *
 * The version of the OpenAPI document: 1.3.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/BindingResp.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



BindingResp::BindingResp()
{
    m_PcfSmFqdn = utility::conversions::to_string_t("");
    m_PcfSmFqdnIsSet = false;
    m_PcfSmIpEndPointsIsSet = false;
}

BindingResp::~BindingResp()
{
}

void BindingResp::validate()
{
    // TODO: implement validation
}

web::json::value BindingResp::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_PcfSmFqdnIsSet)
    {
        val[utility::conversions::to_string_t(U("pcfSmFqdn"))] = ModelBase::toJson(m_PcfSmFqdn);
    }
    if(m_PcfSmIpEndPointsIsSet)
    {
        val[utility::conversions::to_string_t(U("pcfSmIpEndPoints"))] = ModelBase::toJson(m_PcfSmIpEndPoints);
    }

    return val;
}

bool BindingResp::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("pcfSmFqdn"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pcfSmFqdn")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPcfSmFqdn;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPcfSmFqdn);
            setPcfSmFqdn(refVal_setPcfSmFqdn);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pcfSmIpEndPoints"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pcfSmIpEndPoints")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<IpEndPoint>> refVal_setPcfSmIpEndPoints;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPcfSmIpEndPoints);
            setPcfSmIpEndPoints(refVal_setPcfSmIpEndPoints);
        }
    }
    return ok;
}

void BindingResp::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_PcfSmFqdnIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pcfSmFqdn")), m_PcfSmFqdn));
    }
    if(m_PcfSmIpEndPointsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pcfSmIpEndPoints")), m_PcfSmIpEndPoints));
    }
}

bool BindingResp::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("pcfSmFqdn"))))
    {
        utility::string_t refVal_setPcfSmFqdn;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pcfSmFqdn"))), refVal_setPcfSmFqdn );
        setPcfSmFqdn(refVal_setPcfSmFqdn);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pcfSmIpEndPoints"))))
    {
        std::vector<std::shared_ptr<IpEndPoint>> refVal_setPcfSmIpEndPoints;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pcfSmIpEndPoints"))), refVal_setPcfSmIpEndPoints );
        setPcfSmIpEndPoints(refVal_setPcfSmIpEndPoints);
    }
    return ok;
}

utility::string_t BindingResp::getPcfSmFqdn() const
{
    return m_PcfSmFqdn;
}

void BindingResp::setPcfSmFqdn(const utility::string_t& value)
{
    m_PcfSmFqdn = value;
    m_PcfSmFqdnIsSet = true;
}

bool BindingResp::pcfSmFqdnIsSet() const
{
    return m_PcfSmFqdnIsSet;
}

void BindingResp::unsetPcfSmFqdn()
{
    m_PcfSmFqdnIsSet = false;
}
std::vector<std::shared_ptr<IpEndPoint>>& BindingResp::getPcfSmIpEndPoints()
{
    return m_PcfSmIpEndPoints;
}

void BindingResp::setPcfSmIpEndPoints(const std::vector<std::shared_ptr<IpEndPoint>>& value)
{
    m_PcfSmIpEndPoints = value;
    m_PcfSmIpEndPointsIsSet = true;
}

bool BindingResp::pcfSmIpEndPointsIsSet() const
{
    return m_PcfSmIpEndPointsIsSet;
}

void BindingResp::unsetPcfSmIpEndPoints()
{
    m_PcfSmIpEndPointsIsSet = false;
}
}
}
}
}


