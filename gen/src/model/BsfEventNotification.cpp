/**
 * Nbsf_Management
 * Binding Support Management Service API.    Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).    All rights reserved.  
 *
 * The version of the OpenAPI document: 1.3.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/BsfEventNotification.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



BsfEventNotification::BsfEventNotification()
{
    m_EventIsSet = false;
    m_PcfForUeInfoIsSet = false;
    m_PcfForPduSessInfosIsSet = false;
    m_MatchSnssaiDnnsIsSet = false;
}

BsfEventNotification::~BsfEventNotification()
{
}

void BsfEventNotification::validate()
{
    // TODO: implement validation
}

web::json::value BsfEventNotification::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_EventIsSet)
    {
        val[utility::conversions::to_string_t(U("event"))] = ModelBase::toJson(m_Event);
    }
    if(m_PcfForUeInfoIsSet)
    {
        val[utility::conversions::to_string_t(U("pcfForUeInfo"))] = ModelBase::toJson(m_PcfForUeInfo);
    }
    if(m_PcfForPduSessInfosIsSet)
    {
        val[utility::conversions::to_string_t(U("pcfForPduSessInfos"))] = ModelBase::toJson(m_PcfForPduSessInfos);
    }
    if(m_MatchSnssaiDnnsIsSet)
    {
        val[utility::conversions::to_string_t(U("matchSnssaiDnns"))] = ModelBase::toJson(m_MatchSnssaiDnns);
    }

    return val;
}

bool BsfEventNotification::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("event"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("event")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BsfEvent> refVal_setEvent;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEvent);
            setEvent(refVal_setEvent);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pcfForUeInfo"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pcfForUeInfo")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PcfForUeInfo> refVal_setPcfForUeInfo;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPcfForUeInfo);
            setPcfForUeInfo(refVal_setPcfForUeInfo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pcfForPduSessInfos"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pcfForPduSessInfos")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<PcfForPduSessionInfo>> refVal_setPcfForPduSessInfos;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPcfForPduSessInfos);
            setPcfForPduSessInfos(refVal_setPcfForPduSessInfos);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("matchSnssaiDnns"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("matchSnssaiDnns")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<SnssaiDnnPair>> refVal_setMatchSnssaiDnns;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMatchSnssaiDnns);
            setMatchSnssaiDnns(refVal_setMatchSnssaiDnns);
        }
    }
    return ok;
}

void BsfEventNotification::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_EventIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("event")), m_Event));
    }
    if(m_PcfForUeInfoIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pcfForUeInfo")), m_PcfForUeInfo));
    }
    if(m_PcfForPduSessInfosIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pcfForPduSessInfos")), m_PcfForPduSessInfos));
    }
    if(m_MatchSnssaiDnnsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("matchSnssaiDnns")), m_MatchSnssaiDnns));
    }
}

bool BsfEventNotification::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("event"))))
    {
        std::shared_ptr<BsfEvent> refVal_setEvent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("event"))), refVal_setEvent );
        setEvent(refVal_setEvent);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pcfForUeInfo"))))
    {
        std::shared_ptr<PcfForUeInfo> refVal_setPcfForUeInfo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pcfForUeInfo"))), refVal_setPcfForUeInfo );
        setPcfForUeInfo(refVal_setPcfForUeInfo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pcfForPduSessInfos"))))
    {
        std::vector<std::shared_ptr<PcfForPduSessionInfo>> refVal_setPcfForPduSessInfos;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pcfForPduSessInfos"))), refVal_setPcfForPduSessInfos );
        setPcfForPduSessInfos(refVal_setPcfForPduSessInfos);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("matchSnssaiDnns"))))
    {
        std::vector<std::shared_ptr<SnssaiDnnPair>> refVal_setMatchSnssaiDnns;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("matchSnssaiDnns"))), refVal_setMatchSnssaiDnns );
        setMatchSnssaiDnns(refVal_setMatchSnssaiDnns);
    }
    return ok;
}

std::shared_ptr<BsfEvent> BsfEventNotification::getEvent() const
{
    return m_Event;
}

void BsfEventNotification::setEvent(const std::shared_ptr<BsfEvent>& value)
{
    m_Event = value;
    m_EventIsSet = true;
}

bool BsfEventNotification::eventIsSet() const
{
    return m_EventIsSet;
}

void BsfEventNotification::unsetEvent()
{
    m_EventIsSet = false;
}
std::shared_ptr<PcfForUeInfo> BsfEventNotification::getPcfForUeInfo() const
{
    return m_PcfForUeInfo;
}

void BsfEventNotification::setPcfForUeInfo(const std::shared_ptr<PcfForUeInfo>& value)
{
    m_PcfForUeInfo = value;
    m_PcfForUeInfoIsSet = true;
}

bool BsfEventNotification::pcfForUeInfoIsSet() const
{
    return m_PcfForUeInfoIsSet;
}

void BsfEventNotification::unsetPcfForUeInfo()
{
    m_PcfForUeInfoIsSet = false;
}
std::vector<std::shared_ptr<PcfForPduSessionInfo>>& BsfEventNotification::getPcfForPduSessInfos()
{
    return m_PcfForPduSessInfos;
}

void BsfEventNotification::setPcfForPduSessInfos(const std::vector<std::shared_ptr<PcfForPduSessionInfo>>& value)
{
    m_PcfForPduSessInfos = value;
    m_PcfForPduSessInfosIsSet = true;
}

bool BsfEventNotification::pcfForPduSessInfosIsSet() const
{
    return m_PcfForPduSessInfosIsSet;
}

void BsfEventNotification::unsetPcfForPduSessInfos()
{
    m_PcfForPduSessInfosIsSet = false;
}
std::vector<std::shared_ptr<SnssaiDnnPair>>& BsfEventNotification::getMatchSnssaiDnns()
{
    return m_MatchSnssaiDnns;
}

void BsfEventNotification::setMatchSnssaiDnns(const std::vector<std::shared_ptr<SnssaiDnnPair>>& value)
{
    m_MatchSnssaiDnns = value;
    m_MatchSnssaiDnnsIsSet = true;
}

bool BsfEventNotification::matchSnssaiDnnsIsSet() const
{
    return m_MatchSnssaiDnnsIsSet;
}

void BsfEventNotification::unsetMatchSnssaiDnns()
{
    m_MatchSnssaiDnnsIsSet = false;
}
}
}
}
}


