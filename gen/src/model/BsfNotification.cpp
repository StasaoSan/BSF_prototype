/**
 * Nbsf_Management
 * Binding Support Management Service API.    Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).    All rights reserved.  
 *
 * The version of the OpenAPI document: 1.3.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/BsfNotification.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



BsfNotification::BsfNotification()
{
    m_NotifCorreId = utility::conversions::to_string_t("");
    m_NotifCorreIdIsSet = false;
    m_EventNotifsIsSet = false;
}

BsfNotification::~BsfNotification()
{
}

void BsfNotification::validate()
{
    // TODO: implement validation
}

web::json::value BsfNotification::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_NotifCorreIdIsSet)
    {
        val[utility::conversions::to_string_t(U("notifCorreId"))] = ModelBase::toJson(m_NotifCorreId);
    }
    if(m_EventNotifsIsSet)
    {
        val[utility::conversions::to_string_t(U("eventNotifs"))] = ModelBase::toJson(m_EventNotifs);
    }

    return val;
}

bool BsfNotification::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("notifCorreId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("notifCorreId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setNotifCorreId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNotifCorreId);
            setNotifCorreId(refVal_setNotifCorreId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("eventNotifs"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("eventNotifs")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BsfEventNotification>> refVal_setEventNotifs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEventNotifs);
            setEventNotifs(refVal_setEventNotifs);
        }
    }
    return ok;
}

void BsfNotification::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_NotifCorreIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("notifCorreId")), m_NotifCorreId));
    }
    if(m_EventNotifsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("eventNotifs")), m_EventNotifs));
    }
}

bool BsfNotification::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("notifCorreId"))))
    {
        utility::string_t refVal_setNotifCorreId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("notifCorreId"))), refVal_setNotifCorreId );
        setNotifCorreId(refVal_setNotifCorreId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("eventNotifs"))))
    {
        std::vector<std::shared_ptr<BsfEventNotification>> refVal_setEventNotifs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("eventNotifs"))), refVal_setEventNotifs );
        setEventNotifs(refVal_setEventNotifs);
    }
    return ok;
}

utility::string_t BsfNotification::getNotifCorreId() const
{
    return m_NotifCorreId;
}

void BsfNotification::setNotifCorreId(const utility::string_t& value)
{
    m_NotifCorreId = value;
    m_NotifCorreIdIsSet = true;
}

bool BsfNotification::notifCorreIdIsSet() const
{
    return m_NotifCorreIdIsSet;
}

void BsfNotification::unsetNotifCorreId()
{
    m_NotifCorreIdIsSet = false;
}
std::vector<std::shared_ptr<BsfEventNotification>>& BsfNotification::getEventNotifs()
{
    return m_EventNotifs;
}

void BsfNotification::setEventNotifs(const std::vector<std::shared_ptr<BsfEventNotification>>& value)
{
    m_EventNotifs = value;
    m_EventNotifsIsSet = true;
}

bool BsfNotification::eventNotifsIsSet() const
{
    return m_EventNotifsIsSet;
}

void BsfNotification::unsetEventNotifs()
{
    m_EventNotifsIsSet = false;
}
}
}
}
}


