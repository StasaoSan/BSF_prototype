/**
 * Nbsf_Management
 * Binding Support Management Service API.    Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).    All rights reserved.  
 *
 * The version of the OpenAPI document: 1.3.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/IpAddr.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



IpAddr::IpAddr()
{
    m_Ipv4Addr = utility::conversions::to_string_t("");
    m_Ipv4AddrIsSet = false;
    m_Ipv6AddrIsSet = false;
    m_Ipv6PrefixIsSet = false;
}

IpAddr::~IpAddr()
{
}

void IpAddr::validate()
{
    // TODO: implement validation
}

web::json::value IpAddr::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Ipv4AddrIsSet)
    {
        val[utility::conversions::to_string_t(U("ipv4Addr"))] = ModelBase::toJson(m_Ipv4Addr);
    }
    if(m_Ipv6AddrIsSet)
    {
        val[utility::conversions::to_string_t(U("ipv6Addr"))] = ModelBase::toJson(m_Ipv6Addr);
    }
    if(m_Ipv6PrefixIsSet)
    {
        val[utility::conversions::to_string_t(U("ipv6Prefix"))] = ModelBase::toJson(m_Ipv6Prefix);
    }

    return val;
}

bool IpAddr::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("ipv4Addr"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ipv4Addr")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setIpv4Addr;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIpv4Addr);
            setIpv4Addr(refVal_setIpv4Addr);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ipv6Addr"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ipv6Addr")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Ipv6Addr> refVal_setIpv6Addr;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIpv6Addr);
            setIpv6Addr(refVal_setIpv6Addr);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ipv6Prefix"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ipv6Prefix")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Ipv6Prefix> refVal_setIpv6Prefix;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIpv6Prefix);
            setIpv6Prefix(refVal_setIpv6Prefix);
        }
    }
    return ok;
}

void IpAddr::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Ipv4AddrIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ipv4Addr")), m_Ipv4Addr));
    }
    if(m_Ipv6AddrIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ipv6Addr")), m_Ipv6Addr));
    }
    if(m_Ipv6PrefixIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ipv6Prefix")), m_Ipv6Prefix));
    }
}

bool IpAddr::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("ipv4Addr"))))
    {
        utility::string_t refVal_setIpv4Addr;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ipv4Addr"))), refVal_setIpv4Addr );
        setIpv4Addr(refVal_setIpv4Addr);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ipv6Addr"))))
    {
        std::shared_ptr<Ipv6Addr> refVal_setIpv6Addr;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ipv6Addr"))), refVal_setIpv6Addr );
        setIpv6Addr(refVal_setIpv6Addr);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ipv6Prefix"))))
    {
        std::shared_ptr<Ipv6Prefix> refVal_setIpv6Prefix;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ipv6Prefix"))), refVal_setIpv6Prefix );
        setIpv6Prefix(refVal_setIpv6Prefix);
    }
    return ok;
}

utility::string_t IpAddr::getIpv4Addr() const
{
    return m_Ipv4Addr;
}

void IpAddr::setIpv4Addr(const utility::string_t& value)
{
    m_Ipv4Addr = value;
    m_Ipv4AddrIsSet = true;
}

bool IpAddr::ipv4AddrIsSet() const
{
    return m_Ipv4AddrIsSet;
}

void IpAddr::unsetIpv4Addr()
{
    m_Ipv4AddrIsSet = false;
}
std::shared_ptr<Ipv6Addr> IpAddr::getIpv6Addr() const
{
    return m_Ipv6Addr;
}

void IpAddr::setIpv6Addr(const std::shared_ptr<Ipv6Addr>& value)
{
    m_Ipv6Addr = value;
    m_Ipv6AddrIsSet = true;
}

bool IpAddr::ipv6AddrIsSet() const
{
    return m_Ipv6AddrIsSet;
}

void IpAddr::unsetIpv6Addr()
{
    m_Ipv6AddrIsSet = false;
}
std::shared_ptr<Ipv6Prefix> IpAddr::getIpv6Prefix() const
{
    return m_Ipv6Prefix;
}

void IpAddr::setIpv6Prefix(const std::shared_ptr<Ipv6Prefix>& value)
{
    m_Ipv6Prefix = value;
    m_Ipv6PrefixIsSet = true;
}

bool IpAddr::ipv6PrefixIsSet() const
{
    return m_Ipv6PrefixIsSet;
}

void IpAddr::unsetIpv6Prefix()
{
    m_Ipv6PrefixIsSet = false;
}
}
}
}
}


