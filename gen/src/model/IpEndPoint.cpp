/**
 * Nbsf_Management
 * Binding Support Management Service API.    Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).    All rights reserved.  
 *
 * The version of the OpenAPI document: 1.3.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/IpEndPoint.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



IpEndPoint::IpEndPoint()
{
    m_Ipv4Address = utility::conversions::to_string_t("");
    m_Ipv4AddressIsSet = false;
    m_Ipv6AddressIsSet = false;
    m_TransportIsSet = false;
    m_Port = 0;
    m_PortIsSet = false;
}

IpEndPoint::~IpEndPoint()
{
}

void IpEndPoint::validate()
{
    // TODO: implement validation
}

web::json::value IpEndPoint::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Ipv4AddressIsSet)
    {
        val[utility::conversions::to_string_t(U("ipv4Address"))] = ModelBase::toJson(m_Ipv4Address);
    }
    if(m_Ipv6AddressIsSet)
    {
        val[utility::conversions::to_string_t(U("ipv6Address"))] = ModelBase::toJson(m_Ipv6Address);
    }
    if(m_TransportIsSet)
    {
        val[utility::conversions::to_string_t(U("transport"))] = ModelBase::toJson(m_Transport);
    }
    if(m_PortIsSet)
    {
        val[utility::conversions::to_string_t(U("port"))] = ModelBase::toJson(m_Port);
    }

    return val;
}

bool IpEndPoint::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("ipv4Address"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ipv4Address")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setIpv4Address;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIpv4Address);
            setIpv4Address(refVal_setIpv4Address);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ipv6Address"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ipv6Address")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Ipv6Addr> refVal_setIpv6Address;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIpv6Address);
            setIpv6Address(refVal_setIpv6Address);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("transport"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("transport")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<TransportProtocol> refVal_setTransport;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTransport);
            setTransport(refVal_setTransport);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("port"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("port")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPort;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPort);
            setPort(refVal_setPort);
        }
    }
    return ok;
}

void IpEndPoint::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Ipv4AddressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ipv4Address")), m_Ipv4Address));
    }
    if(m_Ipv6AddressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ipv6Address")), m_Ipv6Address));
    }
    if(m_TransportIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("transport")), m_Transport));
    }
    if(m_PortIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("port")), m_Port));
    }
}

bool IpEndPoint::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("ipv4Address"))))
    {
        utility::string_t refVal_setIpv4Address;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ipv4Address"))), refVal_setIpv4Address );
        setIpv4Address(refVal_setIpv4Address);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ipv6Address"))))
    {
        std::shared_ptr<Ipv6Addr> refVal_setIpv6Address;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ipv6Address"))), refVal_setIpv6Address );
        setIpv6Address(refVal_setIpv6Address);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("transport"))))
    {
        std::shared_ptr<TransportProtocol> refVal_setTransport;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("transport"))), refVal_setTransport );
        setTransport(refVal_setTransport);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("port"))))
    {
        int32_t refVal_setPort;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("port"))), refVal_setPort );
        setPort(refVal_setPort);
    }
    return ok;
}

utility::string_t IpEndPoint::getIpv4Address() const
{
    return m_Ipv4Address;
}

void IpEndPoint::setIpv4Address(const utility::string_t& value)
{
    m_Ipv4Address = value;
    m_Ipv4AddressIsSet = true;
}

bool IpEndPoint::ipv4AddressIsSet() const
{
    return m_Ipv4AddressIsSet;
}

void IpEndPoint::unsetIpv4Address()
{
    m_Ipv4AddressIsSet = false;
}
std::shared_ptr<Ipv6Addr> IpEndPoint::getIpv6Address() const
{
    return m_Ipv6Address;
}

void IpEndPoint::setIpv6Address(const std::shared_ptr<Ipv6Addr>& value)
{
    m_Ipv6Address = value;
    m_Ipv6AddressIsSet = true;
}

bool IpEndPoint::ipv6AddressIsSet() const
{
    return m_Ipv6AddressIsSet;
}

void IpEndPoint::unsetIpv6Address()
{
    m_Ipv6AddressIsSet = false;
}
std::shared_ptr<TransportProtocol> IpEndPoint::getTransport() const
{
    return m_Transport;
}

void IpEndPoint::setTransport(const std::shared_ptr<TransportProtocol>& value)
{
    m_Transport = value;
    m_TransportIsSet = true;
}

bool IpEndPoint::transportIsSet() const
{
    return m_TransportIsSet;
}

void IpEndPoint::unsetTransport()
{
    m_TransportIsSet = false;
}
int32_t IpEndPoint::getPort() const
{
    return m_Port;
}

void IpEndPoint::setPort(int32_t value)
{
    m_Port = value;
    m_PortIsSet = true;
}

bool IpEndPoint::portIsSet() const
{
    return m_PortIsSet;
}

void IpEndPoint::unsetPort()
{
    m_PortIsSet = false;
}
}
}
}
}


