/**
 * Nbsf_Management
 * Binding Support Management Service API.    Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).    All rights reserved.  
 *
 * The version of the OpenAPI document: 1.3.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/MbsBindingResp.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



MbsBindingResp::MbsBindingResp()
{
    m_PcfFqdn = utility::conversions::to_string_t("");
    m_PcfFqdnIsSet = false;
    m_PcfIpEndPointsIsSet = false;
}

MbsBindingResp::~MbsBindingResp()
{
}

void MbsBindingResp::validate()
{
    // TODO: implement validation
}

web::json::value MbsBindingResp::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_PcfFqdnIsSet)
    {
        val[utility::conversions::to_string_t(U("pcfFqdn"))] = ModelBase::toJson(m_PcfFqdn);
    }
    if(m_PcfIpEndPointsIsSet)
    {
        val[utility::conversions::to_string_t(U("pcfIpEndPoints"))] = ModelBase::toJson(m_PcfIpEndPoints);
    }

    return val;
}

bool MbsBindingResp::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("pcfFqdn"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pcfFqdn")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPcfFqdn;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPcfFqdn);
            setPcfFqdn(refVal_setPcfFqdn);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pcfIpEndPoints"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pcfIpEndPoints")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<IpEndPoint>> refVal_setPcfIpEndPoints;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPcfIpEndPoints);
            setPcfIpEndPoints(refVal_setPcfIpEndPoints);
        }
    }
    return ok;
}

void MbsBindingResp::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_PcfFqdnIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pcfFqdn")), m_PcfFqdn));
    }
    if(m_PcfIpEndPointsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pcfIpEndPoints")), m_PcfIpEndPoints));
    }
}

bool MbsBindingResp::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("pcfFqdn"))))
    {
        utility::string_t refVal_setPcfFqdn;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pcfFqdn"))), refVal_setPcfFqdn );
        setPcfFqdn(refVal_setPcfFqdn);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pcfIpEndPoints"))))
    {
        std::vector<std::shared_ptr<IpEndPoint>> refVal_setPcfIpEndPoints;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pcfIpEndPoints"))), refVal_setPcfIpEndPoints );
        setPcfIpEndPoints(refVal_setPcfIpEndPoints);
    }
    return ok;
}

utility::string_t MbsBindingResp::getPcfFqdn() const
{
    return m_PcfFqdn;
}

void MbsBindingResp::setPcfFqdn(const utility::string_t& value)
{
    m_PcfFqdn = value;
    m_PcfFqdnIsSet = true;
}

bool MbsBindingResp::pcfFqdnIsSet() const
{
    return m_PcfFqdnIsSet;
}

void MbsBindingResp::unsetPcfFqdn()
{
    m_PcfFqdnIsSet = false;
}
std::vector<std::shared_ptr<IpEndPoint>>& MbsBindingResp::getPcfIpEndPoints()
{
    return m_PcfIpEndPoints;
}

void MbsBindingResp::setPcfIpEndPoints(const std::vector<std::shared_ptr<IpEndPoint>>& value)
{
    m_PcfIpEndPoints = value;
    m_PcfIpEndPointsIsSet = true;
}

bool MbsBindingResp::pcfIpEndPointsIsSet() const
{
    return m_PcfIpEndPointsIsSet;
}

void MbsBindingResp::unsetPcfIpEndPoints()
{
    m_PcfIpEndPointsIsSet = false;
}
}
}
}
}


