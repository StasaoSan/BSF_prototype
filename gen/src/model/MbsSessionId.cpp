/**
 * NRF NFManagement Service
 * NRF NFManagement Service.   Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.7
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "org.openapitools.server.model/model/MbsSessionId.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



MbsSessionId::MbsSessionId()
{
    m_TmgiIsSet = false;
    m_SsmIsSet = false;
    m_Nid = utility::conversions::to_string_t("");
    m_NidIsSet = false;
}

MbsSessionId::~MbsSessionId()
{
}

void MbsSessionId::validate()
{
    // TODO: implement validation
}

web::json::value MbsSessionId::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_TmgiIsSet)
    {
        val[utility::conversions::to_string_t(U("tmgi"))] = ModelBase::toJson(m_Tmgi);
    }
    if(m_SsmIsSet)
    {
        val[utility::conversions::to_string_t(U("ssm"))] = ModelBase::toJson(m_Ssm);
    }
    if(m_NidIsSet)
    {
        val[utility::conversions::to_string_t(U("nid"))] = ModelBase::toJson(m_Nid);
    }

    return val;
}

bool MbsSessionId::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("tmgi"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tmgi")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Tmgi> refVal_setTmgi;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTmgi);
            setTmgi(refVal_setTmgi);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ssm"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ssm")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Ssm> refVal_setSsm;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSsm);
            setSsm(refVal_setSsm);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("nid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("nid")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setNid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNid);
            setNid(refVal_setNid);
        }
    }
    return ok;
}

void MbsSessionId::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_TmgiIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tmgi")), m_Tmgi));
    }
    if(m_SsmIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ssm")), m_Ssm));
    }
    if(m_NidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("nid")), m_Nid));
    }
}

bool MbsSessionId::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("tmgi"))))
    {
        std::shared_ptr<Tmgi> refVal_setTmgi;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tmgi"))), refVal_setTmgi );
        setTmgi(refVal_setTmgi);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ssm"))))
    {
        std::shared_ptr<Ssm> refVal_setSsm;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ssm"))), refVal_setSsm );
        setSsm(refVal_setSsm);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("nid"))))
    {
        utility::string_t refVal_setNid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("nid"))), refVal_setNid );
        setNid(refVal_setNid);
    }
    return ok;
}

std::shared_ptr<Tmgi> MbsSessionId::getTmgi() const
{
    return m_Tmgi;
}

void MbsSessionId::setTmgi(const std::shared_ptr<Tmgi>& value)
{
    m_Tmgi = value;
    m_TmgiIsSet = true;
}

bool MbsSessionId::tmgiIsSet() const
{
    return m_TmgiIsSet;
}

void MbsSessionId::unsetTmgi()
{
    m_TmgiIsSet = false;
}
std::shared_ptr<Ssm> MbsSessionId::getSsm() const
{
    return m_Ssm;
}

void MbsSessionId::setSsm(const std::shared_ptr<Ssm>& value)
{
    m_Ssm = value;
    m_SsmIsSet = true;
}

bool MbsSessionId::ssmIsSet() const
{
    return m_SsmIsSet;
}

void MbsSessionId::unsetSsm()
{
    m_SsmIsSet = false;
}
utility::string_t MbsSessionId::getNid() const
{
    return m_Nid;
}

void MbsSessionId::setNid(const utility::string_t& value)
{
    m_Nid = value;
    m_NidIsSet = true;
}

bool MbsSessionId::nidIsSet() const
{
    return m_NidIsSet;
}

void MbsSessionId::unsetNid()
{
    m_NidIsSet = false;
}
}
}
}
}


