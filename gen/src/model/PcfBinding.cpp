/**
 * Nbsf_Management
 * Binding Support Management Service API.    Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).    All rights reserved.  
 *
 * The version of the OpenAPI document: 1.3.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/PcfBinding.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



PcfBinding::PcfBinding()
{
    m_Supi = utility::conversions::to_string_t("");
    m_SupiIsSet = false;
    m_Gpsi = utility::conversions::to_string_t("");
    m_GpsiIsSet = false;
    m_Ipv4Addr = utility::conversions::to_string_t("");
    m_Ipv4AddrIsSet = false;
    m_Ipv6PrefixIsSet = false;
    m_AddIpv6PrefixesIsSet = false;
    m_IpDomain = utility::conversions::to_string_t("");
    m_IpDomainIsSet = false;
    m_MacAddr48 = utility::conversions::to_string_t("");
    m_MacAddr48IsSet = false;
    m_AddMacAddrsIsSet = false;
    m_Dnn = utility::conversions::to_string_t("");
    m_DnnIsSet = false;
    m_PcfFqdn = utility::conversions::to_string_t("");
    m_PcfFqdnIsSet = false;
    m_PcfIpEndPointsIsSet = false;
    m_PcfDiamHost = utility::conversions::to_string_t("");
    m_PcfDiamHostIsSet = false;
    m_PcfDiamRealm = utility::conversions::to_string_t("");
    m_PcfDiamRealmIsSet = false;
    m_PcfSmFqdn = utility::conversions::to_string_t("");
    m_PcfSmFqdnIsSet = false;
    m_PcfSmIpEndPointsIsSet = false;
    m_SnssaiIsSet = false;
    m_SuppFeat = utility::conversions::to_string_t("");
    m_SuppFeatIsSet = false;
    m_PcfId = utility::conversions::to_string_t("");
    m_PcfIdIsSet = false;
    m_PcfSetId = utility::conversions::to_string_t("");
    m_PcfSetIdIsSet = false;
    m_RecoveryTime = utility::datetime();
    m_RecoveryTimeIsSet = false;
    m_ParaComIsSet = false;
    m_BindLevelIsSet = false;
    m_Ipv4FrameRouteListIsSet = false;
    m_Ipv6FrameRouteListIsSet = false;
}

PcfBinding::~PcfBinding()
{
}

void PcfBinding::validate()
{
    // TODO: implement validation
}

web::json::value PcfBinding::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_SupiIsSet)
    {
        val[utility::conversions::to_string_t(U("supi"))] = ModelBase::toJson(m_Supi);
    }
    if(m_GpsiIsSet)
    {
        val[utility::conversions::to_string_t(U("gpsi"))] = ModelBase::toJson(m_Gpsi);
    }
    if(m_Ipv4AddrIsSet)
    {
        val[utility::conversions::to_string_t(U("ipv4Addr"))] = ModelBase::toJson(m_Ipv4Addr);
    }
    if(m_Ipv6PrefixIsSet)
    {
        val[utility::conversions::to_string_t(U("ipv6Prefix"))] = ModelBase::toJson(m_Ipv6Prefix);
    }
    if(m_AddIpv6PrefixesIsSet)
    {
        val[utility::conversions::to_string_t(U("addIpv6Prefixes"))] = ModelBase::toJson(m_AddIpv6Prefixes);
    }
    if(m_IpDomainIsSet)
    {
        val[utility::conversions::to_string_t(U("ipDomain"))] = ModelBase::toJson(m_IpDomain);
    }
    if(m_MacAddr48IsSet)
    {
        val[utility::conversions::to_string_t(U("macAddr48"))] = ModelBase::toJson(m_MacAddr48);
    }
    if(m_AddMacAddrsIsSet)
    {
        val[utility::conversions::to_string_t(U("addMacAddrs"))] = ModelBase::toJson(m_AddMacAddrs);
    }
    if(m_DnnIsSet)
    {
        val[utility::conversions::to_string_t(U("dnn"))] = ModelBase::toJson(m_Dnn);
    }
    if(m_PcfFqdnIsSet)
    {
        val[utility::conversions::to_string_t(U("pcfFqdn"))] = ModelBase::toJson(m_PcfFqdn);
    }
    if(m_PcfIpEndPointsIsSet)
    {
        val[utility::conversions::to_string_t(U("pcfIpEndPoints"))] = ModelBase::toJson(m_PcfIpEndPoints);
    }
    if(m_PcfDiamHostIsSet)
    {
        val[utility::conversions::to_string_t(U("pcfDiamHost"))] = ModelBase::toJson(m_PcfDiamHost);
    }
    if(m_PcfDiamRealmIsSet)
    {
        val[utility::conversions::to_string_t(U("pcfDiamRealm"))] = ModelBase::toJson(m_PcfDiamRealm);
    }
    if(m_PcfSmFqdnIsSet)
    {
        val[utility::conversions::to_string_t(U("pcfSmFqdn"))] = ModelBase::toJson(m_PcfSmFqdn);
    }
    if(m_PcfSmIpEndPointsIsSet)
    {
        val[utility::conversions::to_string_t(U("pcfSmIpEndPoints"))] = ModelBase::toJson(m_PcfSmIpEndPoints);
    }
    if(m_SnssaiIsSet)
    {
        val[utility::conversions::to_string_t(U("snssai"))] = ModelBase::toJson(m_Snssai);
    }
    if(m_SuppFeatIsSet)
    {
        val[utility::conversions::to_string_t(U("suppFeat"))] = ModelBase::toJson(m_SuppFeat);
    }
    if(m_PcfIdIsSet)
    {
        val[utility::conversions::to_string_t(U("pcfId"))] = ModelBase::toJson(m_PcfId);
    }
    if(m_PcfSetIdIsSet)
    {
        val[utility::conversions::to_string_t(U("pcfSetId"))] = ModelBase::toJson(m_PcfSetId);
    }
    if(m_RecoveryTimeIsSet)
    {
        val[utility::conversions::to_string_t(U("recoveryTime"))] = ModelBase::toJson(m_RecoveryTime);
    }
    if(m_ParaComIsSet)
    {
        val[utility::conversions::to_string_t(U("paraCom"))] = ModelBase::toJson(m_ParaCom);
    }
    if(m_BindLevelIsSet)
    {
        val[utility::conversions::to_string_t(U("bindLevel"))] = ModelBase::toJson(m_BindLevel);
    }
    if(m_Ipv4FrameRouteListIsSet)
    {
        val[utility::conversions::to_string_t(U("ipv4FrameRouteList"))] = ModelBase::toJson(m_Ipv4FrameRouteList);
    }
    if(m_Ipv6FrameRouteListIsSet)
    {
        val[utility::conversions::to_string_t(U("ipv6FrameRouteList"))] = ModelBase::toJson(m_Ipv6FrameRouteList);
    }

    return val;
}

bool PcfBinding::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("supi"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("supi")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSupi;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSupi);
            setSupi(refVal_setSupi);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("gpsi"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("gpsi")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setGpsi;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGpsi);
            setGpsi(refVal_setGpsi);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ipv4Addr"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ipv4Addr")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setIpv4Addr;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIpv4Addr);
            setIpv4Addr(refVal_setIpv4Addr);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ipv6Prefix"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ipv6Prefix")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Ipv6Prefix> refVal_setIpv6Prefix;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIpv6Prefix);
            setIpv6Prefix(refVal_setIpv6Prefix);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("addIpv6Prefixes"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("addIpv6Prefixes")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Ipv6Prefix>> refVal_setAddIpv6Prefixes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAddIpv6Prefixes);
            setAddIpv6Prefixes(refVal_setAddIpv6Prefixes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ipDomain"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ipDomain")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setIpDomain;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIpDomain);
            setIpDomain(refVal_setIpDomain);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("macAddr48"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("macAddr48")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMacAddr48;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMacAddr48);
            setMacAddr48(refVal_setMacAddr48);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("addMacAddrs"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("addMacAddrs")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<utility::string_t>> refVal_setAddMacAddrs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAddMacAddrs);
            setAddMacAddrs(refVal_setAddMacAddrs);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("dnn"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("dnn")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDnn;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDnn);
            setDnn(refVal_setDnn);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pcfFqdn"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pcfFqdn")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPcfFqdn;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPcfFqdn);
            setPcfFqdn(refVal_setPcfFqdn);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pcfIpEndPoints"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pcfIpEndPoints")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<IpEndPoint>> refVal_setPcfIpEndPoints;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPcfIpEndPoints);
            setPcfIpEndPoints(refVal_setPcfIpEndPoints);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pcfDiamHost"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pcfDiamHost")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPcfDiamHost;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPcfDiamHost);
            setPcfDiamHost(refVal_setPcfDiamHost);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pcfDiamRealm"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pcfDiamRealm")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPcfDiamRealm;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPcfDiamRealm);
            setPcfDiamRealm(refVal_setPcfDiamRealm);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pcfSmFqdn"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pcfSmFqdn")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPcfSmFqdn;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPcfSmFqdn);
            setPcfSmFqdn(refVal_setPcfSmFqdn);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pcfSmIpEndPoints"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pcfSmIpEndPoints")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<IpEndPoint>> refVal_setPcfSmIpEndPoints;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPcfSmIpEndPoints);
            setPcfSmIpEndPoints(refVal_setPcfSmIpEndPoints);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("snssai"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("snssai")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Snssai> refVal_setSnssai;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSnssai);
            setSnssai(refVal_setSnssai);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("suppFeat"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("suppFeat")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSuppFeat;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSuppFeat);
            setSuppFeat(refVal_setSuppFeat);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pcfId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pcfId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPcfId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPcfId);
            setPcfId(refVal_setPcfId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pcfSetId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pcfSetId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPcfSetId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPcfSetId);
            setPcfSetId(refVal_setPcfSetId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("recoveryTime"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("recoveryTime")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setRecoveryTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecoveryTime);
            setRecoveryTime(refVal_setRecoveryTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("paraCom"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("paraCom")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ParameterCombination> refVal_setParaCom;
            ok &= ModelBase::fromJson(fieldValue, refVal_setParaCom);
            setParaCom(refVal_setParaCom);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bindLevel"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bindLevel")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BindingLevel> refVal_setBindLevel;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBindLevel);
            setBindLevel(refVal_setBindLevel);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ipv4FrameRouteList"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ipv4FrameRouteList")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<utility::string_t>> refVal_setIpv4FrameRouteList;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIpv4FrameRouteList);
            setIpv4FrameRouteList(refVal_setIpv4FrameRouteList);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ipv6FrameRouteList"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ipv6FrameRouteList")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Ipv6Prefix>> refVal_setIpv6FrameRouteList;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIpv6FrameRouteList);
            setIpv6FrameRouteList(refVal_setIpv6FrameRouteList);
        }
    }
    return ok;
}

void PcfBinding::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_SupiIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("supi")), m_Supi));
    }
    if(m_GpsiIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("gpsi")), m_Gpsi));
    }
    if(m_Ipv4AddrIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ipv4Addr")), m_Ipv4Addr));
    }
    if(m_Ipv6PrefixIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ipv6Prefix")), m_Ipv6Prefix));
    }
    if(m_AddIpv6PrefixesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("addIpv6Prefixes")), m_AddIpv6Prefixes));
    }
    if(m_IpDomainIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ipDomain")), m_IpDomain));
    }
    if(m_MacAddr48IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("macAddr48")), m_MacAddr48));
    }
    if(m_AddMacAddrsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("addMacAddrs")), m_AddMacAddrs));
    }
    if(m_DnnIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("dnn")), m_Dnn));
    }
    if(m_PcfFqdnIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pcfFqdn")), m_PcfFqdn));
    }
    if(m_PcfIpEndPointsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pcfIpEndPoints")), m_PcfIpEndPoints));
    }
    if(m_PcfDiamHostIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pcfDiamHost")), m_PcfDiamHost));
    }
    if(m_PcfDiamRealmIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pcfDiamRealm")), m_PcfDiamRealm));
    }
    if(m_PcfSmFqdnIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pcfSmFqdn")), m_PcfSmFqdn));
    }
    if(m_PcfSmIpEndPointsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pcfSmIpEndPoints")), m_PcfSmIpEndPoints));
    }
    if(m_SnssaiIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("snssai")), m_Snssai));
    }
    if(m_SuppFeatIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("suppFeat")), m_SuppFeat));
    }
    if(m_PcfIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pcfId")), m_PcfId));
    }
    if(m_PcfSetIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pcfSetId")), m_PcfSetId));
    }
    if(m_RecoveryTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("recoveryTime")), m_RecoveryTime));
    }
    if(m_ParaComIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("paraCom")), m_ParaCom));
    }
    if(m_BindLevelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bindLevel")), m_BindLevel));
    }
    if(m_Ipv4FrameRouteListIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ipv4FrameRouteList")), m_Ipv4FrameRouteList));
    }
    if(m_Ipv6FrameRouteListIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ipv6FrameRouteList")), m_Ipv6FrameRouteList));
    }
}

bool PcfBinding::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("supi"))))
    {
        utility::string_t refVal_setSupi;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("supi"))), refVal_setSupi );
        setSupi(refVal_setSupi);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("gpsi"))))
    {
        utility::string_t refVal_setGpsi;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("gpsi"))), refVal_setGpsi );
        setGpsi(refVal_setGpsi);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ipv4Addr"))))
    {
        utility::string_t refVal_setIpv4Addr;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ipv4Addr"))), refVal_setIpv4Addr );
        setIpv4Addr(refVal_setIpv4Addr);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ipv6Prefix"))))
    {
        std::shared_ptr<Ipv6Prefix> refVal_setIpv6Prefix;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ipv6Prefix"))), refVal_setIpv6Prefix );
        setIpv6Prefix(refVal_setIpv6Prefix);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("addIpv6Prefixes"))))
    {
        std::vector<std::shared_ptr<Ipv6Prefix>> refVal_setAddIpv6Prefixes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("addIpv6Prefixes"))), refVal_setAddIpv6Prefixes );
        setAddIpv6Prefixes(refVal_setAddIpv6Prefixes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ipDomain"))))
    {
        utility::string_t refVal_setIpDomain;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ipDomain"))), refVal_setIpDomain );
        setIpDomain(refVal_setIpDomain);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("macAddr48"))))
    {
        utility::string_t refVal_setMacAddr48;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("macAddr48"))), refVal_setMacAddr48 );
        setMacAddr48(refVal_setMacAddr48);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("addMacAddrs"))))
    {
        std::vector<std::shared_ptr<utility::string_t>> refVal_setAddMacAddrs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("addMacAddrs"))), refVal_setAddMacAddrs );
        setAddMacAddrs(refVal_setAddMacAddrs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("dnn"))))
    {
        utility::string_t refVal_setDnn;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("dnn"))), refVal_setDnn );
        setDnn(refVal_setDnn);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pcfFqdn"))))
    {
        utility::string_t refVal_setPcfFqdn;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pcfFqdn"))), refVal_setPcfFqdn );
        setPcfFqdn(refVal_setPcfFqdn);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pcfIpEndPoints"))))
    {
        std::vector<std::shared_ptr<IpEndPoint>> refVal_setPcfIpEndPoints;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pcfIpEndPoints"))), refVal_setPcfIpEndPoints );
        setPcfIpEndPoints(refVal_setPcfIpEndPoints);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pcfDiamHost"))))
    {
        utility::string_t refVal_setPcfDiamHost;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pcfDiamHost"))), refVal_setPcfDiamHost );
        setPcfDiamHost(refVal_setPcfDiamHost);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pcfDiamRealm"))))
    {
        utility::string_t refVal_setPcfDiamRealm;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pcfDiamRealm"))), refVal_setPcfDiamRealm );
        setPcfDiamRealm(refVal_setPcfDiamRealm);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pcfSmFqdn"))))
    {
        utility::string_t refVal_setPcfSmFqdn;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pcfSmFqdn"))), refVal_setPcfSmFqdn );
        setPcfSmFqdn(refVal_setPcfSmFqdn);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pcfSmIpEndPoints"))))
    {
        std::vector<std::shared_ptr<IpEndPoint>> refVal_setPcfSmIpEndPoints;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pcfSmIpEndPoints"))), refVal_setPcfSmIpEndPoints );
        setPcfSmIpEndPoints(refVal_setPcfSmIpEndPoints);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("snssai"))))
    {
        std::shared_ptr<Snssai> refVal_setSnssai;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("snssai"))), refVal_setSnssai );
        setSnssai(refVal_setSnssai);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("suppFeat"))))
    {
        utility::string_t refVal_setSuppFeat;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("suppFeat"))), refVal_setSuppFeat );
        setSuppFeat(refVal_setSuppFeat);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pcfId"))))
    {
        utility::string_t refVal_setPcfId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pcfId"))), refVal_setPcfId );
        setPcfId(refVal_setPcfId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pcfSetId"))))
    {
        utility::string_t refVal_setPcfSetId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pcfSetId"))), refVal_setPcfSetId );
        setPcfSetId(refVal_setPcfSetId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("recoveryTime"))))
    {
        utility::datetime refVal_setRecoveryTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("recoveryTime"))), refVal_setRecoveryTime );
        setRecoveryTime(refVal_setRecoveryTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("paraCom"))))
    {
        std::shared_ptr<ParameterCombination> refVal_setParaCom;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("paraCom"))), refVal_setParaCom );
        setParaCom(refVal_setParaCom);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bindLevel"))))
    {
        std::shared_ptr<BindingLevel> refVal_setBindLevel;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bindLevel"))), refVal_setBindLevel );
        setBindLevel(refVal_setBindLevel);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ipv4FrameRouteList"))))
    {
        std::vector<std::shared_ptr<utility::string_t>> refVal_setIpv4FrameRouteList;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ipv4FrameRouteList"))), refVal_setIpv4FrameRouteList );
        setIpv4FrameRouteList(refVal_setIpv4FrameRouteList);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ipv6FrameRouteList"))))
    {
        std::vector<std::shared_ptr<Ipv6Prefix>> refVal_setIpv6FrameRouteList;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ipv6FrameRouteList"))), refVal_setIpv6FrameRouteList );
        setIpv6FrameRouteList(refVal_setIpv6FrameRouteList);
    }
    return ok;
}

utility::string_t PcfBinding::getSupi() const
{
    return m_Supi;
}

void PcfBinding::setSupi(const utility::string_t& value)
{
    m_Supi = value;
    m_SupiIsSet = true;
}

bool PcfBinding::supiIsSet() const
{
    return m_SupiIsSet;
}

void PcfBinding::unsetSupi()
{
    m_SupiIsSet = false;
}
utility::string_t PcfBinding::getGpsi() const
{
    return m_Gpsi;
}

void PcfBinding::setGpsi(const utility::string_t& value)
{
    m_Gpsi = value;
    m_GpsiIsSet = true;
}

bool PcfBinding::gpsiIsSet() const
{
    return m_GpsiIsSet;
}

void PcfBinding::unsetGpsi()
{
    m_GpsiIsSet = false;
}
utility::string_t PcfBinding::getIpv4Addr() const
{
    return m_Ipv4Addr;
}

void PcfBinding::setIpv4Addr(const utility::string_t& value)
{
    m_Ipv4Addr = value;
    m_Ipv4AddrIsSet = true;
}

bool PcfBinding::ipv4AddrIsSet() const
{
    return m_Ipv4AddrIsSet;
}

void PcfBinding::unsetIpv4Addr()
{
    m_Ipv4AddrIsSet = false;
}
std::shared_ptr<Ipv6Prefix> PcfBinding::getIpv6Prefix() const
{
    return m_Ipv6Prefix;
}

void PcfBinding::setIpv6Prefix(const std::shared_ptr<Ipv6Prefix>& value)
{
    m_Ipv6Prefix = value;
    m_Ipv6PrefixIsSet = true;
}

bool PcfBinding::ipv6PrefixIsSet() const
{
    return m_Ipv6PrefixIsSet;
}

void PcfBinding::unsetIpv6Prefix()
{
    m_Ipv6PrefixIsSet = false;
}
std::vector<std::shared_ptr<Ipv6Prefix>>& PcfBinding::getAddIpv6Prefixes()
{
    return m_AddIpv6Prefixes;
}

void PcfBinding::setAddIpv6Prefixes(const std::vector<std::shared_ptr<Ipv6Prefix>>& value)
{
    m_AddIpv6Prefixes = value;
    m_AddIpv6PrefixesIsSet = true;
}

bool PcfBinding::addIpv6PrefixesIsSet() const
{
    return m_AddIpv6PrefixesIsSet;
}

void PcfBinding::unsetAddIpv6Prefixes()
{
    m_AddIpv6PrefixesIsSet = false;
}
utility::string_t PcfBinding::getIpDomain() const
{
    return m_IpDomain;
}

void PcfBinding::setIpDomain(const utility::string_t& value)
{
    m_IpDomain = value;
    m_IpDomainIsSet = true;
}

bool PcfBinding::ipDomainIsSet() const
{
    return m_IpDomainIsSet;
}

void PcfBinding::unsetIpDomain()
{
    m_IpDomainIsSet = false;
}
utility::string_t PcfBinding::getMacAddr48() const
{
    return m_MacAddr48;
}

void PcfBinding::setMacAddr48(const utility::string_t& value)
{
    m_MacAddr48 = value;
    m_MacAddr48IsSet = true;
}

bool PcfBinding::macAddr48IsSet() const
{
    return m_MacAddr48IsSet;
}

void PcfBinding::unsetMacAddr48()
{
    m_MacAddr48IsSet = false;
}
std::vector<std::shared_ptr<utility::string_t>>& PcfBinding::getAddMacAddrs()
{
    return m_AddMacAddrs;
}

void PcfBinding::setAddMacAddrs(const std::vector<std::shared_ptr<utility::string_t>>& value)
{
    m_AddMacAddrs = value;
    m_AddMacAddrsIsSet = true;
}

bool PcfBinding::addMacAddrsIsSet() const
{
    return m_AddMacAddrsIsSet;
}

void PcfBinding::unsetAddMacAddrs()
{
    m_AddMacAddrsIsSet = false;
}
utility::string_t PcfBinding::getDnn() const
{
    return m_Dnn;
}

void PcfBinding::setDnn(const utility::string_t& value)
{
    m_Dnn = value;
    m_DnnIsSet = true;
}

bool PcfBinding::dnnIsSet() const
{
    return m_DnnIsSet;
}

void PcfBinding::unsetDnn()
{
    m_DnnIsSet = false;
}
utility::string_t PcfBinding::getPcfFqdn() const
{
    return m_PcfFqdn;
}

void PcfBinding::setPcfFqdn(const utility::string_t& value)
{
    m_PcfFqdn = value;
    m_PcfFqdnIsSet = true;
}

bool PcfBinding::pcfFqdnIsSet() const
{
    return m_PcfFqdnIsSet;
}

void PcfBinding::unsetPcfFqdn()
{
    m_PcfFqdnIsSet = false;
}
std::vector<std::shared_ptr<IpEndPoint>>& PcfBinding::getPcfIpEndPoints()
{
    return m_PcfIpEndPoints;
}

void PcfBinding::setPcfIpEndPoints(const std::vector<std::shared_ptr<IpEndPoint>>& value)
{
    m_PcfIpEndPoints = value;
    m_PcfIpEndPointsIsSet = true;
}

bool PcfBinding::pcfIpEndPointsIsSet() const
{
    return m_PcfIpEndPointsIsSet;
}

void PcfBinding::unsetPcfIpEndPoints()
{
    m_PcfIpEndPointsIsSet = false;
}
utility::string_t PcfBinding::getPcfDiamHost() const
{
    return m_PcfDiamHost;
}

void PcfBinding::setPcfDiamHost(const utility::string_t& value)
{
    m_PcfDiamHost = value;
    m_PcfDiamHostIsSet = true;
}

bool PcfBinding::pcfDiamHostIsSet() const
{
    return m_PcfDiamHostIsSet;
}

void PcfBinding::unsetPcfDiamHost()
{
    m_PcfDiamHostIsSet = false;
}
utility::string_t PcfBinding::getPcfDiamRealm() const
{
    return m_PcfDiamRealm;
}

void PcfBinding::setPcfDiamRealm(const utility::string_t& value)
{
    m_PcfDiamRealm = value;
    m_PcfDiamRealmIsSet = true;
}

bool PcfBinding::pcfDiamRealmIsSet() const
{
    return m_PcfDiamRealmIsSet;
}

void PcfBinding::unsetPcfDiamRealm()
{
    m_PcfDiamRealmIsSet = false;
}
utility::string_t PcfBinding::getPcfSmFqdn() const
{
    return m_PcfSmFqdn;
}

void PcfBinding::setPcfSmFqdn(const utility::string_t& value)
{
    m_PcfSmFqdn = value;
    m_PcfSmFqdnIsSet = true;
}

bool PcfBinding::pcfSmFqdnIsSet() const
{
    return m_PcfSmFqdnIsSet;
}

void PcfBinding::unsetPcfSmFqdn()
{
    m_PcfSmFqdnIsSet = false;
}
std::vector<std::shared_ptr<IpEndPoint>>& PcfBinding::getPcfSmIpEndPoints()
{
    return m_PcfSmIpEndPoints;
}

void PcfBinding::setPcfSmIpEndPoints(const std::vector<std::shared_ptr<IpEndPoint>>& value)
{
    m_PcfSmIpEndPoints = value;
    m_PcfSmIpEndPointsIsSet = true;
}

bool PcfBinding::pcfSmIpEndPointsIsSet() const
{
    return m_PcfSmIpEndPointsIsSet;
}

void PcfBinding::unsetPcfSmIpEndPoints()
{
    m_PcfSmIpEndPointsIsSet = false;
}
std::shared_ptr<Snssai> PcfBinding::getSnssai() const
{
    return m_Snssai;
}

void PcfBinding::setSnssai(const std::shared_ptr<Snssai>& value)
{
    m_Snssai = value;
    m_SnssaiIsSet = true;
}

bool PcfBinding::snssaiIsSet() const
{
    return m_SnssaiIsSet;
}

void PcfBinding::unsetSnssai()
{
    m_SnssaiIsSet = false;
}
utility::string_t PcfBinding::getSuppFeat() const
{
    return m_SuppFeat;
}

void PcfBinding::setSuppFeat(const utility::string_t& value)
{
    m_SuppFeat = value;
    m_SuppFeatIsSet = true;
}

bool PcfBinding::suppFeatIsSet() const
{
    return m_SuppFeatIsSet;
}

void PcfBinding::unsetSuppFeat()
{
    m_SuppFeatIsSet = false;
}
utility::string_t PcfBinding::getPcfId() const
{
    return m_PcfId;
}

void PcfBinding::setPcfId(const utility::string_t& value)
{
    m_PcfId = value;
    m_PcfIdIsSet = true;
}

bool PcfBinding::pcfIdIsSet() const
{
    return m_PcfIdIsSet;
}

void PcfBinding::unsetPcfId()
{
    m_PcfIdIsSet = false;
}
utility::string_t PcfBinding::getPcfSetId() const
{
    return m_PcfSetId;
}

void PcfBinding::setPcfSetId(const utility::string_t& value)
{
    m_PcfSetId = value;
    m_PcfSetIdIsSet = true;
}

bool PcfBinding::pcfSetIdIsSet() const
{
    return m_PcfSetIdIsSet;
}

void PcfBinding::unsetPcfSetId()
{
    m_PcfSetIdIsSet = false;
}
utility::datetime PcfBinding::getRecoveryTime() const
{
    return m_RecoveryTime;
}

void PcfBinding::setRecoveryTime(const utility::datetime& value)
{
    m_RecoveryTime = value;
    m_RecoveryTimeIsSet = true;
}

bool PcfBinding::recoveryTimeIsSet() const
{
    return m_RecoveryTimeIsSet;
}

void PcfBinding::unsetRecoveryTime()
{
    m_RecoveryTimeIsSet = false;
}
std::shared_ptr<ParameterCombination> PcfBinding::getParaCom() const
{
    return m_ParaCom;
}

void PcfBinding::setParaCom(const std::shared_ptr<ParameterCombination>& value)
{
    m_ParaCom = value;
    m_ParaComIsSet = true;
}

bool PcfBinding::paraComIsSet() const
{
    return m_ParaComIsSet;
}

void PcfBinding::unsetParaCom()
{
    m_ParaComIsSet = false;
}
std::shared_ptr<BindingLevel> PcfBinding::getBindLevel() const
{
    return m_BindLevel;
}

void PcfBinding::setBindLevel(const std::shared_ptr<BindingLevel>& value)
{
    m_BindLevel = value;
    m_BindLevelIsSet = true;
}

bool PcfBinding::bindLevelIsSet() const
{
    return m_BindLevelIsSet;
}

void PcfBinding::unsetBindLevel()
{
    m_BindLevelIsSet = false;
}
std::vector<std::shared_ptr<utility::string_t>>& PcfBinding::getIpv4FrameRouteList()
{
    return m_Ipv4FrameRouteList;
}

void PcfBinding::setIpv4FrameRouteList(const std::vector<std::shared_ptr<utility::string_t>>& value)
{
    m_Ipv4FrameRouteList = value;
    m_Ipv4FrameRouteListIsSet = true;
}

bool PcfBinding::ipv4FrameRouteListIsSet() const
{
    return m_Ipv4FrameRouteListIsSet;
}

void PcfBinding::unsetIpv4FrameRouteList()
{
    m_Ipv4FrameRouteListIsSet = false;
}
std::vector<std::shared_ptr<Ipv6Prefix>>& PcfBinding::getIpv6FrameRouteList()
{
    return m_Ipv6FrameRouteList;
}

void PcfBinding::setIpv6FrameRouteList(const std::vector<std::shared_ptr<Ipv6Prefix>>& value)
{
    m_Ipv6FrameRouteList = value;
    m_Ipv6FrameRouteListIsSet = true;
}

bool PcfBinding::ipv6FrameRouteListIsSet() const
{
    return m_Ipv6FrameRouteListIsSet;
}

void PcfBinding::unsetIpv6FrameRouteList()
{
    m_Ipv6FrameRouteListIsSet = false;
}
}
}
}
}


