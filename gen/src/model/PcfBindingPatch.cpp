/**
 * Nbsf_Management
 * Binding Support Management Service API.    Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).    All rights reserved.  
 *
 * The version of the OpenAPI document: 1.3.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/PcfBindingPatch.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



PcfBindingPatch::PcfBindingPatch()
{
    m_Ipv4Addr = utility::conversions::to_string_t("");
    m_Ipv4AddrIsSet = false;
    m_IpDomain = utility::conversions::to_string_t("");
    m_IpDomainIsSet = false;
    m_Ipv6PrefixIsSet = false;
    m_AddIpv6PrefixesIsSet = false;
    m_MacAddr48 = utility::conversions::to_string_t("");
    m_MacAddr48IsSet = false;
    m_AddMacAddrsIsSet = false;
    m_PcfId = utility::conversions::to_string_t("");
    m_PcfIdIsSet = false;
    m_PcfFqdn = utility::conversions::to_string_t("");
    m_PcfFqdnIsSet = false;
    m_PcfIpEndPointsIsSet = false;
    m_PcfDiamHost = utility::conversions::to_string_t("");
    m_PcfDiamHostIsSet = false;
    m_PcfDiamRealm = utility::conversions::to_string_t("");
    m_PcfDiamRealmIsSet = false;
}

PcfBindingPatch::~PcfBindingPatch()
{
}

void PcfBindingPatch::validate()
{
    // TODO: implement validation
}

web::json::value PcfBindingPatch::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Ipv4AddrIsSet)
    {
        val[utility::conversions::to_string_t(U("ipv4Addr"))] = ModelBase::toJson(m_Ipv4Addr);
    }
    if(m_IpDomainIsSet)
    {
        val[utility::conversions::to_string_t(U("ipDomain"))] = ModelBase::toJson(m_IpDomain);
    }
    if(m_Ipv6PrefixIsSet)
    {
        val[utility::conversions::to_string_t(U("ipv6Prefix"))] = ModelBase::toJson(m_Ipv6Prefix);
    }
    if(m_AddIpv6PrefixesIsSet)
    {
        val[utility::conversions::to_string_t(U("addIpv6Prefixes"))] = ModelBase::toJson(m_AddIpv6Prefixes);
    }
    if(m_MacAddr48IsSet)
    {
        val[utility::conversions::to_string_t(U("macAddr48"))] = ModelBase::toJson(m_MacAddr48);
    }
    if(m_AddMacAddrsIsSet)
    {
        val[utility::conversions::to_string_t(U("addMacAddrs"))] = ModelBase::toJson(m_AddMacAddrs);
    }
    if(m_PcfIdIsSet)
    {
        val[utility::conversions::to_string_t(U("pcfId"))] = ModelBase::toJson(m_PcfId);
    }
    if(m_PcfFqdnIsSet)
    {
        val[utility::conversions::to_string_t(U("pcfFqdn"))] = ModelBase::toJson(m_PcfFqdn);
    }
    if(m_PcfIpEndPointsIsSet)
    {
        val[utility::conversions::to_string_t(U("pcfIpEndPoints"))] = ModelBase::toJson(m_PcfIpEndPoints);
    }
    if(m_PcfDiamHostIsSet)
    {
        val[utility::conversions::to_string_t(U("pcfDiamHost"))] = ModelBase::toJson(m_PcfDiamHost);
    }
    if(m_PcfDiamRealmIsSet)
    {
        val[utility::conversions::to_string_t(U("pcfDiamRealm"))] = ModelBase::toJson(m_PcfDiamRealm);
    }

    return val;
}

bool PcfBindingPatch::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("ipv4Addr"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ipv4Addr")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setIpv4Addr;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIpv4Addr);
            setIpv4Addr(refVal_setIpv4Addr);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ipDomain"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ipDomain")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setIpDomain;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIpDomain);
            setIpDomain(refVal_setIpDomain);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ipv6Prefix"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ipv6Prefix")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Ipv6PrefixRm> refVal_setIpv6Prefix;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIpv6Prefix);
            setIpv6Prefix(refVal_setIpv6Prefix);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("addIpv6Prefixes"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("addIpv6Prefixes")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Ipv6Prefix>> refVal_setAddIpv6Prefixes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAddIpv6Prefixes);
            setAddIpv6Prefixes(refVal_setAddIpv6Prefixes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("macAddr48"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("macAddr48")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMacAddr48;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMacAddr48);
            setMacAddr48(refVal_setMacAddr48);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("addMacAddrs"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("addMacAddrs")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<utility::string_t>> refVal_setAddMacAddrs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAddMacAddrs);
            setAddMacAddrs(refVal_setAddMacAddrs);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pcfId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pcfId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPcfId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPcfId);
            setPcfId(refVal_setPcfId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pcfFqdn"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pcfFqdn")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPcfFqdn;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPcfFqdn);
            setPcfFqdn(refVal_setPcfFqdn);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pcfIpEndPoints"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pcfIpEndPoints")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<IpEndPoint>> refVal_setPcfIpEndPoints;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPcfIpEndPoints);
            setPcfIpEndPoints(refVal_setPcfIpEndPoints);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pcfDiamHost"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pcfDiamHost")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPcfDiamHost;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPcfDiamHost);
            setPcfDiamHost(refVal_setPcfDiamHost);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pcfDiamRealm"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pcfDiamRealm")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPcfDiamRealm;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPcfDiamRealm);
            setPcfDiamRealm(refVal_setPcfDiamRealm);
        }
    }
    return ok;
}

void PcfBindingPatch::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Ipv4AddrIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ipv4Addr")), m_Ipv4Addr));
    }
    if(m_IpDomainIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ipDomain")), m_IpDomain));
    }
    if(m_Ipv6PrefixIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ipv6Prefix")), m_Ipv6Prefix));
    }
    if(m_AddIpv6PrefixesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("addIpv6Prefixes")), m_AddIpv6Prefixes));
    }
    if(m_MacAddr48IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("macAddr48")), m_MacAddr48));
    }
    if(m_AddMacAddrsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("addMacAddrs")), m_AddMacAddrs));
    }
    if(m_PcfIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pcfId")), m_PcfId));
    }
    if(m_PcfFqdnIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pcfFqdn")), m_PcfFqdn));
    }
    if(m_PcfIpEndPointsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pcfIpEndPoints")), m_PcfIpEndPoints));
    }
    if(m_PcfDiamHostIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pcfDiamHost")), m_PcfDiamHost));
    }
    if(m_PcfDiamRealmIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pcfDiamRealm")), m_PcfDiamRealm));
    }
}

bool PcfBindingPatch::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("ipv4Addr"))))
    {
        utility::string_t refVal_setIpv4Addr;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ipv4Addr"))), refVal_setIpv4Addr );
        setIpv4Addr(refVal_setIpv4Addr);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ipDomain"))))
    {
        utility::string_t refVal_setIpDomain;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ipDomain"))), refVal_setIpDomain );
        setIpDomain(refVal_setIpDomain);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ipv6Prefix"))))
    {
        std::shared_ptr<Ipv6PrefixRm> refVal_setIpv6Prefix;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ipv6Prefix"))), refVal_setIpv6Prefix );
        setIpv6Prefix(refVal_setIpv6Prefix);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("addIpv6Prefixes"))))
    {
        std::vector<std::shared_ptr<Ipv6Prefix>> refVal_setAddIpv6Prefixes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("addIpv6Prefixes"))), refVal_setAddIpv6Prefixes );
        setAddIpv6Prefixes(refVal_setAddIpv6Prefixes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("macAddr48"))))
    {
        utility::string_t refVal_setMacAddr48;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("macAddr48"))), refVal_setMacAddr48 );
        setMacAddr48(refVal_setMacAddr48);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("addMacAddrs"))))
    {
        std::vector<std::shared_ptr<utility::string_t>> refVal_setAddMacAddrs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("addMacAddrs"))), refVal_setAddMacAddrs );
        setAddMacAddrs(refVal_setAddMacAddrs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pcfId"))))
    {
        utility::string_t refVal_setPcfId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pcfId"))), refVal_setPcfId );
        setPcfId(refVal_setPcfId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pcfFqdn"))))
    {
        utility::string_t refVal_setPcfFqdn;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pcfFqdn"))), refVal_setPcfFqdn );
        setPcfFqdn(refVal_setPcfFqdn);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pcfIpEndPoints"))))
    {
        std::vector<std::shared_ptr<IpEndPoint>> refVal_setPcfIpEndPoints;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pcfIpEndPoints"))), refVal_setPcfIpEndPoints );
        setPcfIpEndPoints(refVal_setPcfIpEndPoints);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pcfDiamHost"))))
    {
        utility::string_t refVal_setPcfDiamHost;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pcfDiamHost"))), refVal_setPcfDiamHost );
        setPcfDiamHost(refVal_setPcfDiamHost);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pcfDiamRealm"))))
    {
        utility::string_t refVal_setPcfDiamRealm;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pcfDiamRealm"))), refVal_setPcfDiamRealm );
        setPcfDiamRealm(refVal_setPcfDiamRealm);
    }
    return ok;
}

utility::string_t PcfBindingPatch::getIpv4Addr() const
{
    return m_Ipv4Addr;
}

void PcfBindingPatch::setIpv4Addr(const utility::string_t& value)
{
    m_Ipv4Addr = value;
    m_Ipv4AddrIsSet = true;
}

bool PcfBindingPatch::ipv4AddrIsSet() const
{
    return m_Ipv4AddrIsSet;
}

void PcfBindingPatch::unsetIpv4Addr()
{
    m_Ipv4AddrIsSet = false;
}
utility::string_t PcfBindingPatch::getIpDomain() const
{
    return m_IpDomain;
}

void PcfBindingPatch::setIpDomain(const utility::string_t& value)
{
    m_IpDomain = value;
    m_IpDomainIsSet = true;
}

bool PcfBindingPatch::ipDomainIsSet() const
{
    return m_IpDomainIsSet;
}

void PcfBindingPatch::unsetIpDomain()
{
    m_IpDomainIsSet = false;
}
std::shared_ptr<Ipv6PrefixRm> PcfBindingPatch::getIpv6Prefix() const
{
    return m_Ipv6Prefix;
}

void PcfBindingPatch::setIpv6Prefix(const std::shared_ptr<Ipv6PrefixRm>& value)
{
    m_Ipv6Prefix = value;
    m_Ipv6PrefixIsSet = true;
}

bool PcfBindingPatch::ipv6PrefixIsSet() const
{
    return m_Ipv6PrefixIsSet;
}

void PcfBindingPatch::unsetIpv6Prefix()
{
    m_Ipv6PrefixIsSet = false;
}
std::vector<std::shared_ptr<Ipv6Prefix>>& PcfBindingPatch::getAddIpv6Prefixes()
{
    return m_AddIpv6Prefixes;
}

void PcfBindingPatch::setAddIpv6Prefixes(const std::vector<std::shared_ptr<Ipv6Prefix>>& value)
{
    m_AddIpv6Prefixes = value;
    m_AddIpv6PrefixesIsSet = true;
}

bool PcfBindingPatch::addIpv6PrefixesIsSet() const
{
    return m_AddIpv6PrefixesIsSet;
}

void PcfBindingPatch::unsetAddIpv6Prefixes()
{
    m_AddIpv6PrefixesIsSet = false;
}
utility::string_t PcfBindingPatch::getMacAddr48() const
{
    return m_MacAddr48;
}

void PcfBindingPatch::setMacAddr48(const utility::string_t& value)
{
    m_MacAddr48 = value;
    m_MacAddr48IsSet = true;
}

bool PcfBindingPatch::macAddr48IsSet() const
{
    return m_MacAddr48IsSet;
}

void PcfBindingPatch::unsetMacAddr48()
{
    m_MacAddr48IsSet = false;
}
std::vector<std::shared_ptr<utility::string_t>>& PcfBindingPatch::getAddMacAddrs()
{
    return m_AddMacAddrs;
}

void PcfBindingPatch::setAddMacAddrs(const std::vector<std::shared_ptr<utility::string_t>>& value)
{
    m_AddMacAddrs = value;
    m_AddMacAddrsIsSet = true;
}

bool PcfBindingPatch::addMacAddrsIsSet() const
{
    return m_AddMacAddrsIsSet;
}

void PcfBindingPatch::unsetAddMacAddrs()
{
    m_AddMacAddrsIsSet = false;
}
utility::string_t PcfBindingPatch::getPcfId() const
{
    return m_PcfId;
}

void PcfBindingPatch::setPcfId(const utility::string_t& value)
{
    m_PcfId = value;
    m_PcfIdIsSet = true;
}

bool PcfBindingPatch::pcfIdIsSet() const
{
    return m_PcfIdIsSet;
}

void PcfBindingPatch::unsetPcfId()
{
    m_PcfIdIsSet = false;
}
utility::string_t PcfBindingPatch::getPcfFqdn() const
{
    return m_PcfFqdn;
}

void PcfBindingPatch::setPcfFqdn(const utility::string_t& value)
{
    m_PcfFqdn = value;
    m_PcfFqdnIsSet = true;
}

bool PcfBindingPatch::pcfFqdnIsSet() const
{
    return m_PcfFqdnIsSet;
}

void PcfBindingPatch::unsetPcfFqdn()
{
    m_PcfFqdnIsSet = false;
}
std::vector<std::shared_ptr<IpEndPoint>>& PcfBindingPatch::getPcfIpEndPoints()
{
    return m_PcfIpEndPoints;
}

void PcfBindingPatch::setPcfIpEndPoints(const std::vector<std::shared_ptr<IpEndPoint>>& value)
{
    m_PcfIpEndPoints = value;
    m_PcfIpEndPointsIsSet = true;
}

bool PcfBindingPatch::pcfIpEndPointsIsSet() const
{
    return m_PcfIpEndPointsIsSet;
}

void PcfBindingPatch::unsetPcfIpEndPoints()
{
    m_PcfIpEndPointsIsSet = false;
}
utility::string_t PcfBindingPatch::getPcfDiamHost() const
{
    return m_PcfDiamHost;
}

void PcfBindingPatch::setPcfDiamHost(const utility::string_t& value)
{
    m_PcfDiamHost = value;
    m_PcfDiamHostIsSet = true;
}

bool PcfBindingPatch::pcfDiamHostIsSet() const
{
    return m_PcfDiamHostIsSet;
}

void PcfBindingPatch::unsetPcfDiamHost()
{
    m_PcfDiamHostIsSet = false;
}
utility::string_t PcfBindingPatch::getPcfDiamRealm() const
{
    return m_PcfDiamRealm;
}

void PcfBindingPatch::setPcfDiamRealm(const utility::string_t& value)
{
    m_PcfDiamRealm = value;
    m_PcfDiamRealmIsSet = true;
}

bool PcfBindingPatch::pcfDiamRealmIsSet() const
{
    return m_PcfDiamRealmIsSet;
}

void PcfBindingPatch::unsetPcfDiamRealm()
{
    m_PcfDiamRealmIsSet = false;
}
}
}
}
}


