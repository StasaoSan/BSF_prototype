/**
 * Nbsf_Management
 * Binding Support Management Service API.    Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).    All rights reserved.  
 *
 * The version of the OpenAPI document: 1.3.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/PcfForPduSessionInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



PcfForPduSessionInfo::PcfForPduSessionInfo()
{
    m_Dnn = utility::conversions::to_string_t("");
    m_DnnIsSet = false;
    m_SnssaiIsSet = false;
    m_PcfFqdn = utility::conversions::to_string_t("");
    m_PcfFqdnIsSet = false;
    m_PcfIpEndPointsIsSet = false;
    m_Ipv4Addr = utility::conversions::to_string_t("");
    m_Ipv4AddrIsSet = false;
    m_IpDomain = utility::conversions::to_string_t("");
    m_IpDomainIsSet = false;
    m_Ipv6PrefixesIsSet = false;
    m_MacAddrsIsSet = false;
    m_PcfId = utility::conversions::to_string_t("");
    m_PcfIdIsSet = false;
    m_PcfSetId = utility::conversions::to_string_t("");
    m_PcfSetIdIsSet = false;
    m_BindLevelIsSet = false;
}

PcfForPduSessionInfo::~PcfForPduSessionInfo()
{
}

void PcfForPduSessionInfo::validate()
{
    // TODO: implement validation
}

web::json::value PcfForPduSessionInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_DnnIsSet)
    {
        val[utility::conversions::to_string_t(U("dnn"))] = ModelBase::toJson(m_Dnn);
    }
    if(m_SnssaiIsSet)
    {
        val[utility::conversions::to_string_t(U("snssai"))] = ModelBase::toJson(m_Snssai);
    }
    if(m_PcfFqdnIsSet)
    {
        val[utility::conversions::to_string_t(U("pcfFqdn"))] = ModelBase::toJson(m_PcfFqdn);
    }
    if(m_PcfIpEndPointsIsSet)
    {
        val[utility::conversions::to_string_t(U("pcfIpEndPoints"))] = ModelBase::toJson(m_PcfIpEndPoints);
    }
    if(m_Ipv4AddrIsSet)
    {
        val[utility::conversions::to_string_t(U("ipv4Addr"))] = ModelBase::toJson(m_Ipv4Addr);
    }
    if(m_IpDomainIsSet)
    {
        val[utility::conversions::to_string_t(U("ipDomain"))] = ModelBase::toJson(m_IpDomain);
    }
    if(m_Ipv6PrefixesIsSet)
    {
        val[utility::conversions::to_string_t(U("ipv6Prefixes"))] = ModelBase::toJson(m_Ipv6Prefixes);
    }
    if(m_MacAddrsIsSet)
    {
        val[utility::conversions::to_string_t(U("macAddrs"))] = ModelBase::toJson(m_MacAddrs);
    }
    if(m_PcfIdIsSet)
    {
        val[utility::conversions::to_string_t(U("pcfId"))] = ModelBase::toJson(m_PcfId);
    }
    if(m_PcfSetIdIsSet)
    {
        val[utility::conversions::to_string_t(U("pcfSetId"))] = ModelBase::toJson(m_PcfSetId);
    }
    if(m_BindLevelIsSet)
    {
        val[utility::conversions::to_string_t(U("bindLevel"))] = ModelBase::toJson(m_BindLevel);
    }

    return val;
}

bool PcfForPduSessionInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("dnn"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("dnn")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDnn;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDnn);
            setDnn(refVal_setDnn);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("snssai"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("snssai")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Snssai> refVal_setSnssai;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSnssai);
            setSnssai(refVal_setSnssai);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pcfFqdn"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pcfFqdn")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPcfFqdn;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPcfFqdn);
            setPcfFqdn(refVal_setPcfFqdn);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pcfIpEndPoints"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pcfIpEndPoints")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<IpEndPoint>> refVal_setPcfIpEndPoints;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPcfIpEndPoints);
            setPcfIpEndPoints(refVal_setPcfIpEndPoints);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ipv4Addr"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ipv4Addr")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setIpv4Addr;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIpv4Addr);
            setIpv4Addr(refVal_setIpv4Addr);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ipDomain"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ipDomain")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setIpDomain;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIpDomain);
            setIpDomain(refVal_setIpDomain);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ipv6Prefixes"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ipv6Prefixes")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Ipv6Prefix>> refVal_setIpv6Prefixes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIpv6Prefixes);
            setIpv6Prefixes(refVal_setIpv6Prefixes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("macAddrs"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("macAddrs")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<utility::string_t>> refVal_setMacAddrs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMacAddrs);
            setMacAddrs(refVal_setMacAddrs);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pcfId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pcfId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPcfId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPcfId);
            setPcfId(refVal_setPcfId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pcfSetId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pcfSetId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPcfSetId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPcfSetId);
            setPcfSetId(refVal_setPcfSetId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bindLevel"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bindLevel")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BindingLevel> refVal_setBindLevel;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBindLevel);
            setBindLevel(refVal_setBindLevel);
        }
    }
    return ok;
}

void PcfForPduSessionInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_DnnIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("dnn")), m_Dnn));
    }
    if(m_SnssaiIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("snssai")), m_Snssai));
    }
    if(m_PcfFqdnIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pcfFqdn")), m_PcfFqdn));
    }
    if(m_PcfIpEndPointsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pcfIpEndPoints")), m_PcfIpEndPoints));
    }
    if(m_Ipv4AddrIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ipv4Addr")), m_Ipv4Addr));
    }
    if(m_IpDomainIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ipDomain")), m_IpDomain));
    }
    if(m_Ipv6PrefixesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ipv6Prefixes")), m_Ipv6Prefixes));
    }
    if(m_MacAddrsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("macAddrs")), m_MacAddrs));
    }
    if(m_PcfIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pcfId")), m_PcfId));
    }
    if(m_PcfSetIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pcfSetId")), m_PcfSetId));
    }
    if(m_BindLevelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bindLevel")), m_BindLevel));
    }
}

bool PcfForPduSessionInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("dnn"))))
    {
        utility::string_t refVal_setDnn;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("dnn"))), refVal_setDnn );
        setDnn(refVal_setDnn);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("snssai"))))
    {
        std::shared_ptr<Snssai> refVal_setSnssai;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("snssai"))), refVal_setSnssai );
        setSnssai(refVal_setSnssai);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pcfFqdn"))))
    {
        utility::string_t refVal_setPcfFqdn;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pcfFqdn"))), refVal_setPcfFqdn );
        setPcfFqdn(refVal_setPcfFqdn);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pcfIpEndPoints"))))
    {
        std::vector<std::shared_ptr<IpEndPoint>> refVal_setPcfIpEndPoints;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pcfIpEndPoints"))), refVal_setPcfIpEndPoints );
        setPcfIpEndPoints(refVal_setPcfIpEndPoints);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ipv4Addr"))))
    {
        utility::string_t refVal_setIpv4Addr;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ipv4Addr"))), refVal_setIpv4Addr );
        setIpv4Addr(refVal_setIpv4Addr);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ipDomain"))))
    {
        utility::string_t refVal_setIpDomain;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ipDomain"))), refVal_setIpDomain );
        setIpDomain(refVal_setIpDomain);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ipv6Prefixes"))))
    {
        std::vector<std::shared_ptr<Ipv6Prefix>> refVal_setIpv6Prefixes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ipv6Prefixes"))), refVal_setIpv6Prefixes );
        setIpv6Prefixes(refVal_setIpv6Prefixes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("macAddrs"))))
    {
        std::vector<std::shared_ptr<utility::string_t>> refVal_setMacAddrs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("macAddrs"))), refVal_setMacAddrs );
        setMacAddrs(refVal_setMacAddrs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pcfId"))))
    {
        utility::string_t refVal_setPcfId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pcfId"))), refVal_setPcfId );
        setPcfId(refVal_setPcfId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pcfSetId"))))
    {
        utility::string_t refVal_setPcfSetId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pcfSetId"))), refVal_setPcfSetId );
        setPcfSetId(refVal_setPcfSetId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bindLevel"))))
    {
        std::shared_ptr<BindingLevel> refVal_setBindLevel;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bindLevel"))), refVal_setBindLevel );
        setBindLevel(refVal_setBindLevel);
    }
    return ok;
}

utility::string_t PcfForPduSessionInfo::getDnn() const
{
    return m_Dnn;
}

void PcfForPduSessionInfo::setDnn(const utility::string_t& value)
{
    m_Dnn = value;
    m_DnnIsSet = true;
}

bool PcfForPduSessionInfo::dnnIsSet() const
{
    return m_DnnIsSet;
}

void PcfForPduSessionInfo::unsetDnn()
{
    m_DnnIsSet = false;
}
std::shared_ptr<Snssai> PcfForPduSessionInfo::getSnssai() const
{
    return m_Snssai;
}

void PcfForPduSessionInfo::setSnssai(const std::shared_ptr<Snssai>& value)
{
    m_Snssai = value;
    m_SnssaiIsSet = true;
}

bool PcfForPduSessionInfo::snssaiIsSet() const
{
    return m_SnssaiIsSet;
}

void PcfForPduSessionInfo::unsetSnssai()
{
    m_SnssaiIsSet = false;
}
utility::string_t PcfForPduSessionInfo::getPcfFqdn() const
{
    return m_PcfFqdn;
}

void PcfForPduSessionInfo::setPcfFqdn(const utility::string_t& value)
{
    m_PcfFqdn = value;
    m_PcfFqdnIsSet = true;
}

bool PcfForPduSessionInfo::pcfFqdnIsSet() const
{
    return m_PcfFqdnIsSet;
}

void PcfForPduSessionInfo::unsetPcfFqdn()
{
    m_PcfFqdnIsSet = false;
}
std::vector<std::shared_ptr<IpEndPoint>>& PcfForPduSessionInfo::getPcfIpEndPoints()
{
    return m_PcfIpEndPoints;
}

void PcfForPduSessionInfo::setPcfIpEndPoints(const std::vector<std::shared_ptr<IpEndPoint>>& value)
{
    m_PcfIpEndPoints = value;
    m_PcfIpEndPointsIsSet = true;
}

bool PcfForPduSessionInfo::pcfIpEndPointsIsSet() const
{
    return m_PcfIpEndPointsIsSet;
}

void PcfForPduSessionInfo::unsetPcfIpEndPoints()
{
    m_PcfIpEndPointsIsSet = false;
}
utility::string_t PcfForPduSessionInfo::getIpv4Addr() const
{
    return m_Ipv4Addr;
}

void PcfForPduSessionInfo::setIpv4Addr(const utility::string_t& value)
{
    m_Ipv4Addr = value;
    m_Ipv4AddrIsSet = true;
}

bool PcfForPduSessionInfo::ipv4AddrIsSet() const
{
    return m_Ipv4AddrIsSet;
}

void PcfForPduSessionInfo::unsetIpv4Addr()
{
    m_Ipv4AddrIsSet = false;
}
utility::string_t PcfForPduSessionInfo::getIpDomain() const
{
    return m_IpDomain;
}

void PcfForPduSessionInfo::setIpDomain(const utility::string_t& value)
{
    m_IpDomain = value;
    m_IpDomainIsSet = true;
}

bool PcfForPduSessionInfo::ipDomainIsSet() const
{
    return m_IpDomainIsSet;
}

void PcfForPduSessionInfo::unsetIpDomain()
{
    m_IpDomainIsSet = false;
}
std::vector<std::shared_ptr<Ipv6Prefix>>& PcfForPduSessionInfo::getIpv6Prefixes()
{
    return m_Ipv6Prefixes;
}

void PcfForPduSessionInfo::setIpv6Prefixes(const std::vector<std::shared_ptr<Ipv6Prefix>>& value)
{
    m_Ipv6Prefixes = value;
    m_Ipv6PrefixesIsSet = true;
}

bool PcfForPduSessionInfo::ipv6PrefixesIsSet() const
{
    return m_Ipv6PrefixesIsSet;
}

void PcfForPduSessionInfo::unsetIpv6Prefixes()
{
    m_Ipv6PrefixesIsSet = false;
}
std::vector<std::shared_ptr<utility::string_t>>& PcfForPduSessionInfo::getMacAddrs()
{
    return m_MacAddrs;
}

void PcfForPduSessionInfo::setMacAddrs(const std::vector<std::shared_ptr<utility::string_t>>& value)
{
    m_MacAddrs = value;
    m_MacAddrsIsSet = true;
}

bool PcfForPduSessionInfo::macAddrsIsSet() const
{
    return m_MacAddrsIsSet;
}

void PcfForPduSessionInfo::unsetMacAddrs()
{
    m_MacAddrsIsSet = false;
}
utility::string_t PcfForPduSessionInfo::getPcfId() const
{
    return m_PcfId;
}

void PcfForPduSessionInfo::setPcfId(const utility::string_t& value)
{
    m_PcfId = value;
    m_PcfIdIsSet = true;
}

bool PcfForPduSessionInfo::pcfIdIsSet() const
{
    return m_PcfIdIsSet;
}

void PcfForPduSessionInfo::unsetPcfId()
{
    m_PcfIdIsSet = false;
}
utility::string_t PcfForPduSessionInfo::getPcfSetId() const
{
    return m_PcfSetId;
}

void PcfForPduSessionInfo::setPcfSetId(const utility::string_t& value)
{
    m_PcfSetId = value;
    m_PcfSetIdIsSet = true;
}

bool PcfForPduSessionInfo::pcfSetIdIsSet() const
{
    return m_PcfSetIdIsSet;
}

void PcfForPduSessionInfo::unsetPcfSetId()
{
    m_PcfSetIdIsSet = false;
}
std::shared_ptr<BindingLevel> PcfForPduSessionInfo::getBindLevel() const
{
    return m_BindLevel;
}

void PcfForPduSessionInfo::setBindLevel(const std::shared_ptr<BindingLevel>& value)
{
    m_BindLevel = value;
    m_BindLevelIsSet = true;
}

bool PcfForPduSessionInfo::bindLevelIsSet() const
{
    return m_BindLevelIsSet;
}

void PcfForPduSessionInfo::unsetBindLevel()
{
    m_BindLevelIsSet = false;
}
}
}
}
}


