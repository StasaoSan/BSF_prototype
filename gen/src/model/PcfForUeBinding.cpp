/**
 * Nbsf_Management
 * Binding Support Management Service API.    Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).    All rights reserved.  
 *
 * The version of the OpenAPI document: 1.3.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/PcfForUeBinding.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



PcfForUeBinding::PcfForUeBinding()
{
    m_Supi = utility::conversions::to_string_t("");
    m_SupiIsSet = false;
    m_Gpsi = utility::conversions::to_string_t("");
    m_GpsiIsSet = false;
    m_PcfForUeFqdn = utility::conversions::to_string_t("");
    m_PcfForUeFqdnIsSet = false;
    m_PcfForUeIpEndPointsIsSet = false;
    m_PcfId = utility::conversions::to_string_t("");
    m_PcfIdIsSet = false;
    m_PcfSetId = utility::conversions::to_string_t("");
    m_PcfSetIdIsSet = false;
    m_BindLevelIsSet = false;
    m_SuppFeat = utility::conversions::to_string_t("");
    m_SuppFeatIsSet = false;
}

PcfForUeBinding::~PcfForUeBinding()
{
}

void PcfForUeBinding::validate()
{
    // TODO: implement validation
}

web::json::value PcfForUeBinding::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_SupiIsSet)
    {
        val[utility::conversions::to_string_t(U("supi"))] = ModelBase::toJson(m_Supi);
    }
    if(m_GpsiIsSet)
    {
        val[utility::conversions::to_string_t(U("gpsi"))] = ModelBase::toJson(m_Gpsi);
    }
    if(m_PcfForUeFqdnIsSet)
    {
        val[utility::conversions::to_string_t(U("pcfForUeFqdn"))] = ModelBase::toJson(m_PcfForUeFqdn);
    }
    if(m_PcfForUeIpEndPointsIsSet)
    {
        val[utility::conversions::to_string_t(U("pcfForUeIpEndPoints"))] = ModelBase::toJson(m_PcfForUeIpEndPoints);
    }
    if(m_PcfIdIsSet)
    {
        val[utility::conversions::to_string_t(U("pcfId"))] = ModelBase::toJson(m_PcfId);
    }
    if(m_PcfSetIdIsSet)
    {
        val[utility::conversions::to_string_t(U("pcfSetId"))] = ModelBase::toJson(m_PcfSetId);
    }
    if(m_BindLevelIsSet)
    {
        val[utility::conversions::to_string_t(U("bindLevel"))] = ModelBase::toJson(m_BindLevel);
    }
    if(m_SuppFeatIsSet)
    {
        val[utility::conversions::to_string_t(U("suppFeat"))] = ModelBase::toJson(m_SuppFeat);
    }

    return val;
}

bool PcfForUeBinding::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("supi"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("supi")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSupi;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSupi);
            setSupi(refVal_setSupi);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("gpsi"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("gpsi")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setGpsi;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGpsi);
            setGpsi(refVal_setGpsi);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pcfForUeFqdn"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pcfForUeFqdn")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPcfForUeFqdn;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPcfForUeFqdn);
            setPcfForUeFqdn(refVal_setPcfForUeFqdn);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pcfForUeIpEndPoints"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pcfForUeIpEndPoints")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<IpEndPoint>> refVal_setPcfForUeIpEndPoints;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPcfForUeIpEndPoints);
            setPcfForUeIpEndPoints(refVal_setPcfForUeIpEndPoints);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pcfId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pcfId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPcfId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPcfId);
            setPcfId(refVal_setPcfId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pcfSetId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pcfSetId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPcfSetId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPcfSetId);
            setPcfSetId(refVal_setPcfSetId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bindLevel"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bindLevel")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BindingLevel> refVal_setBindLevel;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBindLevel);
            setBindLevel(refVal_setBindLevel);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("suppFeat"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("suppFeat")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSuppFeat;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSuppFeat);
            setSuppFeat(refVal_setSuppFeat);
        }
    }
    return ok;
}

void PcfForUeBinding::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_SupiIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("supi")), m_Supi));
    }
    if(m_GpsiIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("gpsi")), m_Gpsi));
    }
    if(m_PcfForUeFqdnIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pcfForUeFqdn")), m_PcfForUeFqdn));
    }
    if(m_PcfForUeIpEndPointsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pcfForUeIpEndPoints")), m_PcfForUeIpEndPoints));
    }
    if(m_PcfIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pcfId")), m_PcfId));
    }
    if(m_PcfSetIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pcfSetId")), m_PcfSetId));
    }
    if(m_BindLevelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bindLevel")), m_BindLevel));
    }
    if(m_SuppFeatIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("suppFeat")), m_SuppFeat));
    }
}

bool PcfForUeBinding::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("supi"))))
    {
        utility::string_t refVal_setSupi;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("supi"))), refVal_setSupi );
        setSupi(refVal_setSupi);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("gpsi"))))
    {
        utility::string_t refVal_setGpsi;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("gpsi"))), refVal_setGpsi );
        setGpsi(refVal_setGpsi);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pcfForUeFqdn"))))
    {
        utility::string_t refVal_setPcfForUeFqdn;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pcfForUeFqdn"))), refVal_setPcfForUeFqdn );
        setPcfForUeFqdn(refVal_setPcfForUeFqdn);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pcfForUeIpEndPoints"))))
    {
        std::vector<std::shared_ptr<IpEndPoint>> refVal_setPcfForUeIpEndPoints;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pcfForUeIpEndPoints"))), refVal_setPcfForUeIpEndPoints );
        setPcfForUeIpEndPoints(refVal_setPcfForUeIpEndPoints);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pcfId"))))
    {
        utility::string_t refVal_setPcfId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pcfId"))), refVal_setPcfId );
        setPcfId(refVal_setPcfId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pcfSetId"))))
    {
        utility::string_t refVal_setPcfSetId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pcfSetId"))), refVal_setPcfSetId );
        setPcfSetId(refVal_setPcfSetId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bindLevel"))))
    {
        std::shared_ptr<BindingLevel> refVal_setBindLevel;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bindLevel"))), refVal_setBindLevel );
        setBindLevel(refVal_setBindLevel);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("suppFeat"))))
    {
        utility::string_t refVal_setSuppFeat;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("suppFeat"))), refVal_setSuppFeat );
        setSuppFeat(refVal_setSuppFeat);
    }
    return ok;
}

utility::string_t PcfForUeBinding::getSupi() const
{
    return m_Supi;
}

void PcfForUeBinding::setSupi(const utility::string_t& value)
{
    m_Supi = value;
    m_SupiIsSet = true;
}

bool PcfForUeBinding::supiIsSet() const
{
    return m_SupiIsSet;
}

void PcfForUeBinding::unsetSupi()
{
    m_SupiIsSet = false;
}
utility::string_t PcfForUeBinding::getGpsi() const
{
    return m_Gpsi;
}

void PcfForUeBinding::setGpsi(const utility::string_t& value)
{
    m_Gpsi = value;
    m_GpsiIsSet = true;
}

bool PcfForUeBinding::gpsiIsSet() const
{
    return m_GpsiIsSet;
}

void PcfForUeBinding::unsetGpsi()
{
    m_GpsiIsSet = false;
}
utility::string_t PcfForUeBinding::getPcfForUeFqdn() const
{
    return m_PcfForUeFqdn;
}

void PcfForUeBinding::setPcfForUeFqdn(const utility::string_t& value)
{
    m_PcfForUeFqdn = value;
    m_PcfForUeFqdnIsSet = true;
}

bool PcfForUeBinding::pcfForUeFqdnIsSet() const
{
    return m_PcfForUeFqdnIsSet;
}

void PcfForUeBinding::unsetPcfForUeFqdn()
{
    m_PcfForUeFqdnIsSet = false;
}
std::vector<std::shared_ptr<IpEndPoint>>& PcfForUeBinding::getPcfForUeIpEndPoints()
{
    return m_PcfForUeIpEndPoints;
}

void PcfForUeBinding::setPcfForUeIpEndPoints(const std::vector<std::shared_ptr<IpEndPoint>>& value)
{
    m_PcfForUeIpEndPoints = value;
    m_PcfForUeIpEndPointsIsSet = true;
}

bool PcfForUeBinding::pcfForUeIpEndPointsIsSet() const
{
    return m_PcfForUeIpEndPointsIsSet;
}

void PcfForUeBinding::unsetPcfForUeIpEndPoints()
{
    m_PcfForUeIpEndPointsIsSet = false;
}
utility::string_t PcfForUeBinding::getPcfId() const
{
    return m_PcfId;
}

void PcfForUeBinding::setPcfId(const utility::string_t& value)
{
    m_PcfId = value;
    m_PcfIdIsSet = true;
}

bool PcfForUeBinding::pcfIdIsSet() const
{
    return m_PcfIdIsSet;
}

void PcfForUeBinding::unsetPcfId()
{
    m_PcfIdIsSet = false;
}
utility::string_t PcfForUeBinding::getPcfSetId() const
{
    return m_PcfSetId;
}

void PcfForUeBinding::setPcfSetId(const utility::string_t& value)
{
    m_PcfSetId = value;
    m_PcfSetIdIsSet = true;
}

bool PcfForUeBinding::pcfSetIdIsSet() const
{
    return m_PcfSetIdIsSet;
}

void PcfForUeBinding::unsetPcfSetId()
{
    m_PcfSetIdIsSet = false;
}
std::shared_ptr<BindingLevel> PcfForUeBinding::getBindLevel() const
{
    return m_BindLevel;
}

void PcfForUeBinding::setBindLevel(const std::shared_ptr<BindingLevel>& value)
{
    m_BindLevel = value;
    m_BindLevelIsSet = true;
}

bool PcfForUeBinding::bindLevelIsSet() const
{
    return m_BindLevelIsSet;
}

void PcfForUeBinding::unsetBindLevel()
{
    m_BindLevelIsSet = false;
}
utility::string_t PcfForUeBinding::getSuppFeat() const
{
    return m_SuppFeat;
}

void PcfForUeBinding::setSuppFeat(const utility::string_t& value)
{
    m_SuppFeat = value;
    m_SuppFeatIsSet = true;
}

bool PcfForUeBinding::suppFeatIsSet() const
{
    return m_SuppFeatIsSet;
}

void PcfForUeBinding::unsetSuppFeat()
{
    m_SuppFeatIsSet = false;
}
}
}
}
}


