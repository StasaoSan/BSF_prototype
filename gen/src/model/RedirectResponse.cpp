/**
 * NRF NFManagement Service
 * NRF NFManagement Service.   Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.7
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "org.openapitools.server.model/model/RedirectResponse.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



RedirectResponse::RedirectResponse()
{
    m_Cause = utility::conversions::to_string_t("");
    m_CauseIsSet = false;
    m_TargetScp = utility::conversions::to_string_t("");
    m_TargetScpIsSet = false;
    m_TargetSepp = utility::conversions::to_string_t("");
    m_TargetSeppIsSet = false;
}

RedirectResponse::~RedirectResponse()
{
}

void RedirectResponse::validate()
{
    // TODO: implement validation
}

web::json::value RedirectResponse::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CauseIsSet)
    {
        val[utility::conversions::to_string_t(U("cause"))] = ModelBase::toJson(m_Cause);
    }
    if(m_TargetScpIsSet)
    {
        val[utility::conversions::to_string_t(U("targetScp"))] = ModelBase::toJson(m_TargetScp);
    }
    if(m_TargetSeppIsSet)
    {
        val[utility::conversions::to_string_t(U("targetSepp"))] = ModelBase::toJson(m_TargetSepp);
    }

    return val;
}

bool RedirectResponse::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("cause"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cause")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCause;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCause);
            setCause(refVal_setCause);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("targetScp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("targetScp")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTargetScp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTargetScp);
            setTargetScp(refVal_setTargetScp);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("targetSepp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("targetSepp")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTargetSepp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTargetSepp);
            setTargetSepp(refVal_setTargetSepp);
        }
    }
    return ok;
}

void RedirectResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_CauseIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cause")), m_Cause));
    }
    if(m_TargetScpIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("targetScp")), m_TargetScp));
    }
    if(m_TargetSeppIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("targetSepp")), m_TargetSepp));
    }
}

bool RedirectResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("cause"))))
    {
        utility::string_t refVal_setCause;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cause"))), refVal_setCause );
        setCause(refVal_setCause);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("targetScp"))))
    {
        utility::string_t refVal_setTargetScp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("targetScp"))), refVal_setTargetScp );
        setTargetScp(refVal_setTargetScp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("targetSepp"))))
    {
        utility::string_t refVal_setTargetSepp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("targetSepp"))), refVal_setTargetSepp );
        setTargetSepp(refVal_setTargetSepp);
    }
    return ok;
}

utility::string_t RedirectResponse::getCause() const
{
    return m_Cause;
}

void RedirectResponse::setCause(const utility::string_t& value)
{
    m_Cause = value;
    m_CauseIsSet = true;
}

bool RedirectResponse::causeIsSet() const
{
    return m_CauseIsSet;
}

void RedirectResponse::unsetCause()
{
    m_CauseIsSet = false;
}
utility::string_t RedirectResponse::getTargetScp() const
{
    return m_TargetScp;
}

void RedirectResponse::setTargetScp(const utility::string_t& value)
{
    m_TargetScp = value;
    m_TargetScpIsSet = true;
}

bool RedirectResponse::targetScpIsSet() const
{
    return m_TargetScpIsSet;
}

void RedirectResponse::unsetTargetScp()
{
    m_TargetScpIsSet = false;
}
utility::string_t RedirectResponse::getTargetSepp() const
{
    return m_TargetSepp;
}

void RedirectResponse::setTargetSepp(const utility::string_t& value)
{
    m_TargetSepp = value;
    m_TargetSeppIsSet = true;
}

bool RedirectResponse::targetSeppIsSet() const
{
    return m_TargetSeppIsSet;
}

void RedirectResponse::unsetTargetSepp()
{
    m_TargetSeppIsSet = false;
}
}
}
}
}


