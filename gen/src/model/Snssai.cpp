/**
 * Nbsf_Management
 * Binding Support Management Service API.    Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).    All rights reserved.  
 *
 * The version of the OpenAPI document: 1.3.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Snssai.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



Snssai::Snssai()
{
    m_Sst = 0;
    m_SstIsSet = false;
    m_Sd = utility::conversions::to_string_t("");
    m_SdIsSet = false;
}

Snssai::~Snssai()
{
}

void Snssai::validate()
{
    // TODO: implement validation
}

web::json::value Snssai::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_SstIsSet)
    {
        val[utility::conversions::to_string_t(U("sst"))] = ModelBase::toJson(m_Sst);
    }
    if(m_SdIsSet)
    {
        val[utility::conversions::to_string_t(U("sd"))] = ModelBase::toJson(m_Sd);
    }

    return val;
}

bool Snssai::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("sst"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sst")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSst;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSst);
            setSst(refVal_setSst);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSd);
            setSd(refVal_setSd);
        }
    }
    return ok;
}

void Snssai::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_SstIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sst")), m_Sst));
    }
    if(m_SdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sd")), m_Sd));
    }
}

bool Snssai::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("sst"))))
    {
        int32_t refVal_setSst;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sst"))), refVal_setSst );
        setSst(refVal_setSst);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sd"))))
    {
        utility::string_t refVal_setSd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sd"))), refVal_setSd );
        setSd(refVal_setSd);
    }
    return ok;
}

int32_t Snssai::getSst() const
{
    return m_Sst;
}

void Snssai::setSst(int32_t value)
{
    m_Sst = value;
    m_SstIsSet = true;
}

bool Snssai::sstIsSet() const
{
    return m_SstIsSet;
}

void Snssai::unsetSst()
{
    m_SstIsSet = false;
}
utility::string_t Snssai::getSd() const
{
    return m_Sd;
}

void Snssai::setSd(const utility::string_t& value)
{
    m_Sd = value;
    m_SdIsSet = true;
}

bool Snssai::sdIsSet() const
{
    return m_SdIsSet;
}

void Snssai::unsetSd()
{
    m_SdIsSet = false;
}
}
}
}
}


