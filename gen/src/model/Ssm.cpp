/**
 * Nbsf_Management
 * Binding Support Management Service API.    Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).    All rights reserved.  
 *
 * The version of the OpenAPI document: 1.3.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Ssm.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



Ssm::Ssm()
{
    m_SourceIpAddrIsSet = false;
    m_DestIpAddrIsSet = false;
}

Ssm::~Ssm()
{
}

void Ssm::validate()
{
    // TODO: implement validation
}

web::json::value Ssm::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_SourceIpAddrIsSet)
    {
        val[utility::conversions::to_string_t(U("sourceIpAddr"))] = ModelBase::toJson(m_SourceIpAddr);
    }
    if(m_DestIpAddrIsSet)
    {
        val[utility::conversions::to_string_t(U("destIpAddr"))] = ModelBase::toJson(m_DestIpAddr);
    }

    return val;
}

bool Ssm::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("sourceIpAddr"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sourceIpAddr")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<IpAddr> refVal_setSourceIpAddr;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSourceIpAddr);
            setSourceIpAddr(refVal_setSourceIpAddr);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("destIpAddr"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("destIpAddr")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<IpAddr> refVal_setDestIpAddr;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDestIpAddr);
            setDestIpAddr(refVal_setDestIpAddr);
        }
    }
    return ok;
}

void Ssm::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_SourceIpAddrIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sourceIpAddr")), m_SourceIpAddr));
    }
    if(m_DestIpAddrIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("destIpAddr")), m_DestIpAddr));
    }
}

bool Ssm::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("sourceIpAddr"))))
    {
        std::shared_ptr<IpAddr> refVal_setSourceIpAddr;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sourceIpAddr"))), refVal_setSourceIpAddr );
        setSourceIpAddr(refVal_setSourceIpAddr);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("destIpAddr"))))
    {
        std::shared_ptr<IpAddr> refVal_setDestIpAddr;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("destIpAddr"))), refVal_setDestIpAddr );
        setDestIpAddr(refVal_setDestIpAddr);
    }
    return ok;
}

std::shared_ptr<IpAddr> Ssm::getSourceIpAddr() const
{
    return m_SourceIpAddr;
}

void Ssm::setSourceIpAddr(const std::shared_ptr<IpAddr>& value)
{
    m_SourceIpAddr = value;
    m_SourceIpAddrIsSet = true;
}

bool Ssm::sourceIpAddrIsSet() const
{
    return m_SourceIpAddrIsSet;
}

void Ssm::unsetSourceIpAddr()
{
    m_SourceIpAddrIsSet = false;
}
std::shared_ptr<IpAddr> Ssm::getDestIpAddr() const
{
    return m_DestIpAddr;
}

void Ssm::setDestIpAddr(const std::shared_ptr<IpAddr>& value)
{
    m_DestIpAddr = value;
    m_DestIpAddrIsSet = true;
}

bool Ssm::destIpAddrIsSet() const
{
    return m_DestIpAddrIsSet;
}

void Ssm::unsetDestIpAddr()
{
    m_DestIpAddrIsSet = false;
}
}
}
}
}


