/**
 * Nbsf_Management
 * Binding Support Management Service API.    Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).    All rights reserved.  
 *
 * The version of the OpenAPI document: 1.3.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Tmgi.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



Tmgi::Tmgi()
{
    m_MbsServiceId = utility::conversions::to_string_t("");
    m_MbsServiceIdIsSet = false;
    m_PlmnIdIsSet = false;
}

Tmgi::~Tmgi()
{
}

void Tmgi::validate()
{
    // TODO: implement validation
}

web::json::value Tmgi::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_MbsServiceIdIsSet)
    {
        val[utility::conversions::to_string_t(U("mbsServiceId"))] = ModelBase::toJson(m_MbsServiceId);
    }
    if(m_PlmnIdIsSet)
    {
        val[utility::conversions::to_string_t(U("plmnId"))] = ModelBase::toJson(m_PlmnId);
    }

    return val;
}

bool Tmgi::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("mbsServiceId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("mbsServiceId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMbsServiceId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMbsServiceId);
            setMbsServiceId(refVal_setMbsServiceId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("plmnId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("plmnId")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PlmnId> refVal_setPlmnId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPlmnId);
            setPlmnId(refVal_setPlmnId);
        }
    }
    return ok;
}

void Tmgi::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_MbsServiceIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("mbsServiceId")), m_MbsServiceId));
    }
    if(m_PlmnIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("plmnId")), m_PlmnId));
    }
}

bool Tmgi::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("mbsServiceId"))))
    {
        utility::string_t refVal_setMbsServiceId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("mbsServiceId"))), refVal_setMbsServiceId );
        setMbsServiceId(refVal_setMbsServiceId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("plmnId"))))
    {
        std::shared_ptr<PlmnId> refVal_setPlmnId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("plmnId"))), refVal_setPlmnId );
        setPlmnId(refVal_setPlmnId);
    }
    return ok;
}

utility::string_t Tmgi::getMbsServiceId() const
{
    return m_MbsServiceId;
}

void Tmgi::setMbsServiceId(const utility::string_t& value)
{
    m_MbsServiceId = value;
    m_MbsServiceIdIsSet = true;
}

bool Tmgi::mbsServiceIdIsSet() const
{
    return m_MbsServiceIdIsSet;
}

void Tmgi::unsetMbsServiceId()
{
    m_MbsServiceIdIsSet = false;
}
std::shared_ptr<PlmnId> Tmgi::getPlmnId() const
{
    return m_PlmnId;
}

void Tmgi::setPlmnId(const std::shared_ptr<PlmnId>& value)
{
    m_PlmnId = value;
    m_PlmnIdIsSet = true;
}

bool Tmgi::plmnIdIsSet() const
{
    return m_PlmnIdIsSet;
}

void Tmgi::unsetPlmnId()
{
    m_PlmnIdIsSet = false;
}
}
}
}
}


