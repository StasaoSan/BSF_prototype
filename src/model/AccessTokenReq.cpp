/**
 * Nbsf_Management
 * Binding Support Management Service API.    Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).    All rights reserved.  
 *
 * The version of the OpenAPI document: 1.3.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/AccessTokenReq.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



AccessTokenReq::AccessTokenReq()
{
    m_Grant_type = utility::conversions::to_string_t("");
    m_Grant_typeIsSet = false;
    m_NfInstanceId = utility::conversions::to_string_t("");
    m_NfInstanceIdIsSet = false;
    m_NfTypeIsSet = false;
    m_TargetNfTypeIsSet = false;
    m_Scope = utility::conversions::to_string_t("");
    m_ScopeIsSet = false;
    m_TargetNfInstanceId = utility::conversions::to_string_t("");
    m_TargetNfInstanceIdIsSet = false;
    m_RequesterPlmnIsSet = false;
    m_RequesterPlmnListIsSet = false;
    m_RequesterSnssaiListIsSet = false;
    m_RequesterFqdn = utility::conversions::to_string_t("");
    m_RequesterFqdnIsSet = false;
    m_RequesterSnpnListIsSet = false;
    m_TargetPlmnIsSet = false;
    m_TargetSnpnIsSet = false;
    m_TargetSnssaiListIsSet = false;
    m_TargetNsiListIsSet = false;
    m_TargetNfSetId = utility::conversions::to_string_t("");
    m_TargetNfSetIdIsSet = false;
    m_TargetNfServiceSetId = utility::conversions::to_string_t("");
    m_TargetNfServiceSetIdIsSet = false;
    m_HnrfAccessTokenUri = utility::conversions::to_string_t("");
    m_HnrfAccessTokenUriIsSet = false;
    m_SourceNfInstanceId = utility::conversions::to_string_t("");
    m_SourceNfInstanceIdIsSet = false;
}

AccessTokenReq::~AccessTokenReq()
{
}

void AccessTokenReq::validate()
{
    // TODO: implement validation
}

web::json::value AccessTokenReq::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Grant_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("grant_type"))] = ModelBase::toJson(m_Grant_type);
    }
    if(m_NfInstanceIdIsSet)
    {
        val[utility::conversions::to_string_t(U("nfInstanceId"))] = ModelBase::toJson(m_NfInstanceId);
    }
    if(m_NfTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("nfType"))] = ModelBase::toJson(m_NfType);
    }
    if(m_TargetNfTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("targetNfType"))] = ModelBase::toJson(m_TargetNfType);
    }
    if(m_ScopeIsSet)
    {
        val[utility::conversions::to_string_t(U("scope"))] = ModelBase::toJson(m_Scope);
    }
    if(m_TargetNfInstanceIdIsSet)
    {
        val[utility::conversions::to_string_t(U("targetNfInstanceId"))] = ModelBase::toJson(m_TargetNfInstanceId);
    }
    if(m_RequesterPlmnIsSet)
    {
        val[utility::conversions::to_string_t(U("requesterPlmn"))] = ModelBase::toJson(m_RequesterPlmn);
    }
    if(m_RequesterPlmnListIsSet)
    {
        val[utility::conversions::to_string_t(U("requesterPlmnList"))] = ModelBase::toJson(m_RequesterPlmnList);
    }
    if(m_RequesterSnssaiListIsSet)
    {
        val[utility::conversions::to_string_t(U("requesterSnssaiList"))] = ModelBase::toJson(m_RequesterSnssaiList);
    }
    if(m_RequesterFqdnIsSet)
    {
        val[utility::conversions::to_string_t(U("requesterFqdn"))] = ModelBase::toJson(m_RequesterFqdn);
    }
    if(m_RequesterSnpnListIsSet)
    {
        val[utility::conversions::to_string_t(U("requesterSnpnList"))] = ModelBase::toJson(m_RequesterSnpnList);
    }
    if(m_TargetPlmnIsSet)
    {
        val[utility::conversions::to_string_t(U("targetPlmn"))] = ModelBase::toJson(m_TargetPlmn);
    }
    if(m_TargetSnpnIsSet)
    {
        val[utility::conversions::to_string_t(U("targetSnpn"))] = ModelBase::toJson(m_TargetSnpn);
    }
    if(m_TargetSnssaiListIsSet)
    {
        val[utility::conversions::to_string_t(U("targetSnssaiList"))] = ModelBase::toJson(m_TargetSnssaiList);
    }
    if(m_TargetNsiListIsSet)
    {
        val[utility::conversions::to_string_t(U("targetNsiList"))] = ModelBase::toJson(m_TargetNsiList);
    }
    if(m_TargetNfSetIdIsSet)
    {
        val[utility::conversions::to_string_t(U("targetNfSetId"))] = ModelBase::toJson(m_TargetNfSetId);
    }
    if(m_TargetNfServiceSetIdIsSet)
    {
        val[utility::conversions::to_string_t(U("targetNfServiceSetId"))] = ModelBase::toJson(m_TargetNfServiceSetId);
    }
    if(m_HnrfAccessTokenUriIsSet)
    {
        val[utility::conversions::to_string_t(U("hnrfAccessTokenUri"))] = ModelBase::toJson(m_HnrfAccessTokenUri);
    }
    if(m_SourceNfInstanceIdIsSet)
    {
        val[utility::conversions::to_string_t(U("sourceNfInstanceId"))] = ModelBase::toJson(m_SourceNfInstanceId);
    }

    return val;
}

bool AccessTokenReq::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("grant_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("grant_type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setGrantType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGrantType);
            setGrantType(refVal_setGrantType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("nfInstanceId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("nfInstanceId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setNfInstanceId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNfInstanceId);
            setNfInstanceId(refVal_setNfInstanceId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("nfType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("nfType")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<NFType> refVal_setNfType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNfType);
            setNfType(refVal_setNfType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("targetNfType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("targetNfType")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<NFType> refVal_setTargetNfType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTargetNfType);
            setTargetNfType(refVal_setTargetNfType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("scope"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("scope")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setScope;
            ok &= ModelBase::fromJson(fieldValue, refVal_setScope);
            setScope(refVal_setScope);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("targetNfInstanceId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("targetNfInstanceId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTargetNfInstanceId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTargetNfInstanceId);
            setTargetNfInstanceId(refVal_setTargetNfInstanceId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("requesterPlmn"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("requesterPlmn")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PlmnId> refVal_setRequesterPlmn;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRequesterPlmn);
            setRequesterPlmn(refVal_setRequesterPlmn);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("requesterPlmnList"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("requesterPlmnList")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<PlmnId>> refVal_setRequesterPlmnList;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRequesterPlmnList);
            setRequesterPlmnList(refVal_setRequesterPlmnList);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("requesterSnssaiList"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("requesterSnssaiList")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Snssai>> refVal_setRequesterSnssaiList;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRequesterSnssaiList);
            setRequesterSnssaiList(refVal_setRequesterSnssaiList);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("requesterFqdn"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("requesterFqdn")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRequesterFqdn;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRequesterFqdn);
            setRequesterFqdn(refVal_setRequesterFqdn);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("requesterSnpnList"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("requesterSnpnList")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<PlmnIdNid>> refVal_setRequesterSnpnList;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRequesterSnpnList);
            setRequesterSnpnList(refVal_setRequesterSnpnList);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("targetPlmn"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("targetPlmn")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PlmnId> refVal_setTargetPlmn;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTargetPlmn);
            setTargetPlmn(refVal_setTargetPlmn);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("targetSnpn"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("targetSnpn")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PlmnIdNid> refVal_setTargetSnpn;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTargetSnpn);
            setTargetSnpn(refVal_setTargetSnpn);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("targetSnssaiList"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("targetSnssaiList")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Snssai>> refVal_setTargetSnssaiList;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTargetSnssaiList);
            setTargetSnssaiList(refVal_setTargetSnssaiList);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("targetNsiList"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("targetNsiList")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setTargetNsiList;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTargetNsiList);
            setTargetNsiList(refVal_setTargetNsiList);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("targetNfSetId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("targetNfSetId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTargetNfSetId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTargetNfSetId);
            setTargetNfSetId(refVal_setTargetNfSetId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("targetNfServiceSetId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("targetNfServiceSetId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTargetNfServiceSetId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTargetNfServiceSetId);
            setTargetNfServiceSetId(refVal_setTargetNfServiceSetId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("hnrfAccessTokenUri"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hnrfAccessTokenUri")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setHnrfAccessTokenUri;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHnrfAccessTokenUri);
            setHnrfAccessTokenUri(refVal_setHnrfAccessTokenUri);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sourceNfInstanceId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sourceNfInstanceId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSourceNfInstanceId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSourceNfInstanceId);
            setSourceNfInstanceId(refVal_setSourceNfInstanceId);
        }
    }
    return ok;
}

void AccessTokenReq::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Grant_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("grant_type")), m_Grant_type));
    }
    if(m_NfInstanceIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("nfInstanceId")), m_NfInstanceId));
    }
    if(m_NfTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("nfType")), m_NfType));
    }
    if(m_TargetNfTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("targetNfType")), m_TargetNfType));
    }
    if(m_ScopeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("scope")), m_Scope));
    }
    if(m_TargetNfInstanceIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("targetNfInstanceId")), m_TargetNfInstanceId));
    }
    if(m_RequesterPlmnIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("requesterPlmn")), m_RequesterPlmn));
    }
    if(m_RequesterPlmnListIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("requesterPlmnList")), m_RequesterPlmnList));
    }
    if(m_RequesterSnssaiListIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("requesterSnssaiList")), m_RequesterSnssaiList));
    }
    if(m_RequesterFqdnIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("requesterFqdn")), m_RequesterFqdn));
    }
    if(m_RequesterSnpnListIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("requesterSnpnList")), m_RequesterSnpnList));
    }
    if(m_TargetPlmnIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("targetPlmn")), m_TargetPlmn));
    }
    if(m_TargetSnpnIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("targetSnpn")), m_TargetSnpn));
    }
    if(m_TargetSnssaiListIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("targetSnssaiList")), m_TargetSnssaiList));
    }
    if(m_TargetNsiListIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("targetNsiList")), m_TargetNsiList));
    }
    if(m_TargetNfSetIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("targetNfSetId")), m_TargetNfSetId));
    }
    if(m_TargetNfServiceSetIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("targetNfServiceSetId")), m_TargetNfServiceSetId));
    }
    if(m_HnrfAccessTokenUriIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hnrfAccessTokenUri")), m_HnrfAccessTokenUri));
    }
    if(m_SourceNfInstanceIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sourceNfInstanceId")), m_SourceNfInstanceId));
    }
}

bool AccessTokenReq::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("grant_type"))))
    {
        utility::string_t refVal_setGrantType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("grant_type"))), refVal_setGrantType );
        setGrantType(refVal_setGrantType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("nfInstanceId"))))
    {
        utility::string_t refVal_setNfInstanceId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("nfInstanceId"))), refVal_setNfInstanceId );
        setNfInstanceId(refVal_setNfInstanceId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("nfType"))))
    {
        std::shared_ptr<NFType> refVal_setNfType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("nfType"))), refVal_setNfType );
        setNfType(refVal_setNfType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("targetNfType"))))
    {
        std::shared_ptr<NFType> refVal_setTargetNfType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("targetNfType"))), refVal_setTargetNfType );
        setTargetNfType(refVal_setTargetNfType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("scope"))))
    {
        utility::string_t refVal_setScope;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("scope"))), refVal_setScope );
        setScope(refVal_setScope);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("targetNfInstanceId"))))
    {
        utility::string_t refVal_setTargetNfInstanceId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("targetNfInstanceId"))), refVal_setTargetNfInstanceId );
        setTargetNfInstanceId(refVal_setTargetNfInstanceId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("requesterPlmn"))))
    {
        std::shared_ptr<PlmnId> refVal_setRequesterPlmn;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("requesterPlmn"))), refVal_setRequesterPlmn );
        setRequesterPlmn(refVal_setRequesterPlmn);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("requesterPlmnList"))))
    {
        std::vector<std::shared_ptr<PlmnId>> refVal_setRequesterPlmnList;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("requesterPlmnList"))), refVal_setRequesterPlmnList );
        setRequesterPlmnList(refVal_setRequesterPlmnList);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("requesterSnssaiList"))))
    {
        std::vector<std::shared_ptr<Snssai>> refVal_setRequesterSnssaiList;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("requesterSnssaiList"))), refVal_setRequesterSnssaiList );
        setRequesterSnssaiList(refVal_setRequesterSnssaiList);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("requesterFqdn"))))
    {
        utility::string_t refVal_setRequesterFqdn;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("requesterFqdn"))), refVal_setRequesterFqdn );
        setRequesterFqdn(refVal_setRequesterFqdn);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("requesterSnpnList"))))
    {
        std::vector<std::shared_ptr<PlmnIdNid>> refVal_setRequesterSnpnList;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("requesterSnpnList"))), refVal_setRequesterSnpnList );
        setRequesterSnpnList(refVal_setRequesterSnpnList);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("targetPlmn"))))
    {
        std::shared_ptr<PlmnId> refVal_setTargetPlmn;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("targetPlmn"))), refVal_setTargetPlmn );
        setTargetPlmn(refVal_setTargetPlmn);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("targetSnpn"))))
    {
        std::shared_ptr<PlmnIdNid> refVal_setTargetSnpn;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("targetSnpn"))), refVal_setTargetSnpn );
        setTargetSnpn(refVal_setTargetSnpn);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("targetSnssaiList"))))
    {
        std::vector<std::shared_ptr<Snssai>> refVal_setTargetSnssaiList;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("targetSnssaiList"))), refVal_setTargetSnssaiList );
        setTargetSnssaiList(refVal_setTargetSnssaiList);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("targetNsiList"))))
    {
        std::vector<utility::string_t> refVal_setTargetNsiList;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("targetNsiList"))), refVal_setTargetNsiList );
        setTargetNsiList(refVal_setTargetNsiList);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("targetNfSetId"))))
    {
        utility::string_t refVal_setTargetNfSetId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("targetNfSetId"))), refVal_setTargetNfSetId );
        setTargetNfSetId(refVal_setTargetNfSetId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("targetNfServiceSetId"))))
    {
        utility::string_t refVal_setTargetNfServiceSetId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("targetNfServiceSetId"))), refVal_setTargetNfServiceSetId );
        setTargetNfServiceSetId(refVal_setTargetNfServiceSetId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("hnrfAccessTokenUri"))))
    {
        utility::string_t refVal_setHnrfAccessTokenUri;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hnrfAccessTokenUri"))), refVal_setHnrfAccessTokenUri );
        setHnrfAccessTokenUri(refVal_setHnrfAccessTokenUri);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sourceNfInstanceId"))))
    {
        utility::string_t refVal_setSourceNfInstanceId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sourceNfInstanceId"))), refVal_setSourceNfInstanceId );
        setSourceNfInstanceId(refVal_setSourceNfInstanceId);
    }
    return ok;
}

utility::string_t AccessTokenReq::getGrantType() const
{
    return m_Grant_type;
}

void AccessTokenReq::setGrantType(const utility::string_t& value)
{
    m_Grant_type = value;
    m_Grant_typeIsSet = true;
}

bool AccessTokenReq::grantTypeIsSet() const
{
    return m_Grant_typeIsSet;
}

void AccessTokenReq::unsetGrant_type()
{
    m_Grant_typeIsSet = false;
}
utility::string_t AccessTokenReq::getNfInstanceId() const
{
    return m_NfInstanceId;
}

void AccessTokenReq::setNfInstanceId(const utility::string_t& value)
{
    m_NfInstanceId = value;
    m_NfInstanceIdIsSet = true;
}

bool AccessTokenReq::nfInstanceIdIsSet() const
{
    return m_NfInstanceIdIsSet;
}

void AccessTokenReq::unsetNfInstanceId()
{
    m_NfInstanceIdIsSet = false;
}
std::shared_ptr<NFType> AccessTokenReq::getNfType() const
{
    return m_NfType;
}

void AccessTokenReq::setNfType(const std::shared_ptr<NFType>& value)
{
    m_NfType = value;
    m_NfTypeIsSet = true;
}

bool AccessTokenReq::nfTypeIsSet() const
{
    return m_NfTypeIsSet;
}

void AccessTokenReq::unsetNfType()
{
    m_NfTypeIsSet = false;
}
std::shared_ptr<NFType> AccessTokenReq::getTargetNfType() const
{
    return m_TargetNfType;
}

void AccessTokenReq::setTargetNfType(const std::shared_ptr<NFType>& value)
{
    m_TargetNfType = value;
    m_TargetNfTypeIsSet = true;
}

bool AccessTokenReq::targetNfTypeIsSet() const
{
    return m_TargetNfTypeIsSet;
}

void AccessTokenReq::unsetTargetNfType()
{
    m_TargetNfTypeIsSet = false;
}
utility::string_t AccessTokenReq::getScope() const
{
    return m_Scope;
}

void AccessTokenReq::setScope(const utility::string_t& value)
{
    m_Scope = value;
    m_ScopeIsSet = true;
}

bool AccessTokenReq::scopeIsSet() const
{
    return m_ScopeIsSet;
}

void AccessTokenReq::unsetScope()
{
    m_ScopeIsSet = false;
}
utility::string_t AccessTokenReq::getTargetNfInstanceId() const
{
    return m_TargetNfInstanceId;
}

void AccessTokenReq::setTargetNfInstanceId(const utility::string_t& value)
{
    m_TargetNfInstanceId = value;
    m_TargetNfInstanceIdIsSet = true;
}

bool AccessTokenReq::targetNfInstanceIdIsSet() const
{
    return m_TargetNfInstanceIdIsSet;
}

void AccessTokenReq::unsetTargetNfInstanceId()
{
    m_TargetNfInstanceIdIsSet = false;
}
std::shared_ptr<PlmnId> AccessTokenReq::getRequesterPlmn() const
{
    return m_RequesterPlmn;
}

void AccessTokenReq::setRequesterPlmn(const std::shared_ptr<PlmnId>& value)
{
    m_RequesterPlmn = value;
    m_RequesterPlmnIsSet = true;
}

bool AccessTokenReq::requesterPlmnIsSet() const
{
    return m_RequesterPlmnIsSet;
}

void AccessTokenReq::unsetRequesterPlmn()
{
    m_RequesterPlmnIsSet = false;
}
std::vector<std::shared_ptr<PlmnId>>& AccessTokenReq::getRequesterPlmnList()
{
    return m_RequesterPlmnList;
}

void AccessTokenReq::setRequesterPlmnList(const std::vector<std::shared_ptr<PlmnId>>& value)
{
    m_RequesterPlmnList = value;
    m_RequesterPlmnListIsSet = true;
}

bool AccessTokenReq::requesterPlmnListIsSet() const
{
    return m_RequesterPlmnListIsSet;
}

void AccessTokenReq::unsetRequesterPlmnList()
{
    m_RequesterPlmnListIsSet = false;
}
std::vector<std::shared_ptr<Snssai>>& AccessTokenReq::getRequesterSnssaiList()
{
    return m_RequesterSnssaiList;
}

void AccessTokenReq::setRequesterSnssaiList(const std::vector<std::shared_ptr<Snssai>>& value)
{
    m_RequesterSnssaiList = value;
    m_RequesterSnssaiListIsSet = true;
}

bool AccessTokenReq::requesterSnssaiListIsSet() const
{
    return m_RequesterSnssaiListIsSet;
}

void AccessTokenReq::unsetRequesterSnssaiList()
{
    m_RequesterSnssaiListIsSet = false;
}
utility::string_t AccessTokenReq::getRequesterFqdn() const
{
    return m_RequesterFqdn;
}

void AccessTokenReq::setRequesterFqdn(const utility::string_t& value)
{
    m_RequesterFqdn = value;
    m_RequesterFqdnIsSet = true;
}

bool AccessTokenReq::requesterFqdnIsSet() const
{
    return m_RequesterFqdnIsSet;
}

void AccessTokenReq::unsetRequesterFqdn()
{
    m_RequesterFqdnIsSet = false;
}
std::vector<std::shared_ptr<PlmnIdNid>>& AccessTokenReq::getRequesterSnpnList()
{
    return m_RequesterSnpnList;
}

void AccessTokenReq::setRequesterSnpnList(const std::vector<std::shared_ptr<PlmnIdNid>>& value)
{
    m_RequesterSnpnList = value;
    m_RequesterSnpnListIsSet = true;
}

bool AccessTokenReq::requesterSnpnListIsSet() const
{
    return m_RequesterSnpnListIsSet;
}

void AccessTokenReq::unsetRequesterSnpnList()
{
    m_RequesterSnpnListIsSet = false;
}
std::shared_ptr<PlmnId> AccessTokenReq::getTargetPlmn() const
{
    return m_TargetPlmn;
}

void AccessTokenReq::setTargetPlmn(const std::shared_ptr<PlmnId>& value)
{
    m_TargetPlmn = value;
    m_TargetPlmnIsSet = true;
}

bool AccessTokenReq::targetPlmnIsSet() const
{
    return m_TargetPlmnIsSet;
}

void AccessTokenReq::unsetTargetPlmn()
{
    m_TargetPlmnIsSet = false;
}
std::shared_ptr<PlmnIdNid> AccessTokenReq::getTargetSnpn() const
{
    return m_TargetSnpn;
}

void AccessTokenReq::setTargetSnpn(const std::shared_ptr<PlmnIdNid>& value)
{
    m_TargetSnpn = value;
    m_TargetSnpnIsSet = true;
}

bool AccessTokenReq::targetSnpnIsSet() const
{
    return m_TargetSnpnIsSet;
}

void AccessTokenReq::unsetTargetSnpn()
{
    m_TargetSnpnIsSet = false;
}
std::vector<std::shared_ptr<Snssai>>& AccessTokenReq::getTargetSnssaiList()
{
    return m_TargetSnssaiList;
}

void AccessTokenReq::setTargetSnssaiList(const std::vector<std::shared_ptr<Snssai>>& value)
{
    m_TargetSnssaiList = value;
    m_TargetSnssaiListIsSet = true;
}

bool AccessTokenReq::targetSnssaiListIsSet() const
{
    return m_TargetSnssaiListIsSet;
}

void AccessTokenReq::unsetTargetSnssaiList()
{
    m_TargetSnssaiListIsSet = false;
}
std::vector<utility::string_t>& AccessTokenReq::getTargetNsiList()
{
    return m_TargetNsiList;
}

void AccessTokenReq::setTargetNsiList(const std::vector<utility::string_t>& value)
{
    m_TargetNsiList = value;
    m_TargetNsiListIsSet = true;
}

bool AccessTokenReq::targetNsiListIsSet() const
{
    return m_TargetNsiListIsSet;
}

void AccessTokenReq::unsetTargetNsiList()
{
    m_TargetNsiListIsSet = false;
}
utility::string_t AccessTokenReq::getTargetNfSetId() const
{
    return m_TargetNfSetId;
}

void AccessTokenReq::setTargetNfSetId(const utility::string_t& value)
{
    m_TargetNfSetId = value;
    m_TargetNfSetIdIsSet = true;
}

bool AccessTokenReq::targetNfSetIdIsSet() const
{
    return m_TargetNfSetIdIsSet;
}

void AccessTokenReq::unsetTargetNfSetId()
{
    m_TargetNfSetIdIsSet = false;
}
utility::string_t AccessTokenReq::getTargetNfServiceSetId() const
{
    return m_TargetNfServiceSetId;
}

void AccessTokenReq::setTargetNfServiceSetId(const utility::string_t& value)
{
    m_TargetNfServiceSetId = value;
    m_TargetNfServiceSetIdIsSet = true;
}

bool AccessTokenReq::targetNfServiceSetIdIsSet() const
{
    return m_TargetNfServiceSetIdIsSet;
}

void AccessTokenReq::unsetTargetNfServiceSetId()
{
    m_TargetNfServiceSetIdIsSet = false;
}
utility::string_t AccessTokenReq::getHnrfAccessTokenUri() const
{
    return m_HnrfAccessTokenUri;
}

void AccessTokenReq::setHnrfAccessTokenUri(const utility::string_t& value)
{
    m_HnrfAccessTokenUri = value;
    m_HnrfAccessTokenUriIsSet = true;
}

bool AccessTokenReq::hnrfAccessTokenUriIsSet() const
{
    return m_HnrfAccessTokenUriIsSet;
}

void AccessTokenReq::unsetHnrfAccessTokenUri()
{
    m_HnrfAccessTokenUriIsSet = false;
}
utility::string_t AccessTokenReq::getSourceNfInstanceId() const
{
    return m_SourceNfInstanceId;
}

void AccessTokenReq::setSourceNfInstanceId(const utility::string_t& value)
{
    m_SourceNfInstanceId = value;
    m_SourceNfInstanceIdIsSet = true;
}

bool AccessTokenReq::sourceNfInstanceIdIsSet() const
{
    return m_SourceNfInstanceIdIsSet;
}

void AccessTokenReq::unsetSourceNfInstanceId()
{
    m_SourceNfInstanceIdIsSet = false;
}
}
}
}
}


