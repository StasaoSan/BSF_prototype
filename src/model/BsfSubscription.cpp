/**
 * Nbsf_Management
 * Binding Support Management Service API.    Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).    All rights reserved.  
 *
 * The version of the OpenAPI document: 1.3.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/BsfSubscription.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



BsfSubscription::BsfSubscription()
{
    m_EventsIsSet = false;
    m_NotifUri = utility::conversions::to_string_t("");
    m_NotifUriIsSet = false;
    m_NotifCorreId = utility::conversions::to_string_t("");
    m_NotifCorreIdIsSet = false;
    m_Supi = utility::conversions::to_string_t("");
    m_SupiIsSet = false;
    m_Gpsi = utility::conversions::to_string_t("");
    m_GpsiIsSet = false;
    m_SnssaiDnnPairsIsSet = false;
    m_AddSnssaiDnnPairsIsSet = false;
    m_SuppFeat = utility::conversions::to_string_t("");
    m_SuppFeatIsSet = false;
}

BsfSubscription::~BsfSubscription()
{
}

void BsfSubscription::validate()
{
    // TODO: implement validation
}

web::json::value BsfSubscription::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_EventsIsSet)
    {
        val[utility::conversions::to_string_t(U("events"))] = ModelBase::toJson(m_Events);
    }
    if(m_NotifUriIsSet)
    {
        val[utility::conversions::to_string_t(U("notifUri"))] = ModelBase::toJson(m_NotifUri);
    }
    if(m_NotifCorreIdIsSet)
    {
        val[utility::conversions::to_string_t(U("notifCorreId"))] = ModelBase::toJson(m_NotifCorreId);
    }
    if(m_SupiIsSet)
    {
        val[utility::conversions::to_string_t(U("supi"))] = ModelBase::toJson(m_Supi);
    }
    if(m_GpsiIsSet)
    {
        val[utility::conversions::to_string_t(U("gpsi"))] = ModelBase::toJson(m_Gpsi);
    }
    if(m_SnssaiDnnPairsIsSet)
    {
        val[utility::conversions::to_string_t(U("snssaiDnnPairs"))] = ModelBase::toJson(m_SnssaiDnnPairs);
    }
    if(m_AddSnssaiDnnPairsIsSet)
    {
        val[utility::conversions::to_string_t(U("addSnssaiDnnPairs"))] = ModelBase::toJson(m_AddSnssaiDnnPairs);
    }
    if(m_SuppFeatIsSet)
    {
        val[utility::conversions::to_string_t(U("suppFeat"))] = ModelBase::toJson(m_SuppFeat);
    }

    return val;
}

bool BsfSubscription::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("events"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("events")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BsfEvent>> refVal_setEvents;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEvents);
            setEvents(refVal_setEvents);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("notifUri"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("notifUri")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setNotifUri;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNotifUri);
            setNotifUri(refVal_setNotifUri);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("notifCorreId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("notifCorreId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setNotifCorreId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNotifCorreId);
            setNotifCorreId(refVal_setNotifCorreId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("supi"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("supi")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSupi;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSupi);
            setSupi(refVal_setSupi);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("gpsi"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("gpsi")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setGpsi;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGpsi);
            setGpsi(refVal_setGpsi);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("snssaiDnnPairs"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("snssaiDnnPairs")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SnssaiDnnPair> refVal_setSnssaiDnnPairs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSnssaiDnnPairs);
            setSnssaiDnnPairs(refVal_setSnssaiDnnPairs);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("addSnssaiDnnPairs"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("addSnssaiDnnPairs")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<SnssaiDnnPair>> refVal_setAddSnssaiDnnPairs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAddSnssaiDnnPairs);
            setAddSnssaiDnnPairs(refVal_setAddSnssaiDnnPairs);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("suppFeat"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("suppFeat")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSuppFeat;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSuppFeat);
            setSuppFeat(refVal_setSuppFeat);
        }
    }
    return ok;
}

void BsfSubscription::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_EventsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("events")), m_Events));
    }
    if(m_NotifUriIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("notifUri")), m_NotifUri));
    }
    if(m_NotifCorreIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("notifCorreId")), m_NotifCorreId));
    }
    if(m_SupiIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("supi")), m_Supi));
    }
    if(m_GpsiIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("gpsi")), m_Gpsi));
    }
    if(m_SnssaiDnnPairsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("snssaiDnnPairs")), m_SnssaiDnnPairs));
    }
    if(m_AddSnssaiDnnPairsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("addSnssaiDnnPairs")), m_AddSnssaiDnnPairs));
    }
    if(m_SuppFeatIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("suppFeat")), m_SuppFeat));
    }
}

bool BsfSubscription::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("events"))))
    {
        std::vector<std::shared_ptr<BsfEvent>> refVal_setEvents;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("events"))), refVal_setEvents );
        setEvents(refVal_setEvents);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("notifUri"))))
    {
        utility::string_t refVal_setNotifUri;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("notifUri"))), refVal_setNotifUri );
        setNotifUri(refVal_setNotifUri);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("notifCorreId"))))
    {
        utility::string_t refVal_setNotifCorreId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("notifCorreId"))), refVal_setNotifCorreId );
        setNotifCorreId(refVal_setNotifCorreId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("supi"))))
    {
        utility::string_t refVal_setSupi;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("supi"))), refVal_setSupi );
        setSupi(refVal_setSupi);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("gpsi"))))
    {
        utility::string_t refVal_setGpsi;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("gpsi"))), refVal_setGpsi );
        setGpsi(refVal_setGpsi);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("snssaiDnnPairs"))))
    {
        std::shared_ptr<SnssaiDnnPair> refVal_setSnssaiDnnPairs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("snssaiDnnPairs"))), refVal_setSnssaiDnnPairs );
        setSnssaiDnnPairs(refVal_setSnssaiDnnPairs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("addSnssaiDnnPairs"))))
    {
        std::vector<std::shared_ptr<SnssaiDnnPair>> refVal_setAddSnssaiDnnPairs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("addSnssaiDnnPairs"))), refVal_setAddSnssaiDnnPairs );
        setAddSnssaiDnnPairs(refVal_setAddSnssaiDnnPairs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("suppFeat"))))
    {
        utility::string_t refVal_setSuppFeat;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("suppFeat"))), refVal_setSuppFeat );
        setSuppFeat(refVal_setSuppFeat);
    }
    return ok;
}

std::vector<std::shared_ptr<BsfEvent>>& BsfSubscription::getEvents()
{
    return m_Events;
}

void BsfSubscription::setEvents(const std::vector<std::shared_ptr<BsfEvent>>& value)
{
    m_Events = value;
    m_EventsIsSet = true;
}

bool BsfSubscription::eventsIsSet() const
{
    return m_EventsIsSet;
}

void BsfSubscription::unsetEvents()
{
    m_EventsIsSet = false;
}
utility::string_t BsfSubscription::getNotifUri() const
{
    return m_NotifUri;
}

void BsfSubscription::setNotifUri(const utility::string_t& value)
{
    m_NotifUri = value;
    m_NotifUriIsSet = true;
}

bool BsfSubscription::notifUriIsSet() const
{
    return m_NotifUriIsSet;
}

void BsfSubscription::unsetNotifUri()
{
    m_NotifUriIsSet = false;
}
utility::string_t BsfSubscription::getNotifCorreId() const
{
    return m_NotifCorreId;
}

void BsfSubscription::setNotifCorreId(const utility::string_t& value)
{
    m_NotifCorreId = value;
    m_NotifCorreIdIsSet = true;
}

bool BsfSubscription::notifCorreIdIsSet() const
{
    return m_NotifCorreIdIsSet;
}

void BsfSubscription::unsetNotifCorreId()
{
    m_NotifCorreIdIsSet = false;
}
utility::string_t BsfSubscription::getSupi() const
{
    return m_Supi;
}

void BsfSubscription::setSupi(const utility::string_t& value)
{
    m_Supi = value;
    m_SupiIsSet = true;
}

bool BsfSubscription::supiIsSet() const
{
    return m_SupiIsSet;
}

void BsfSubscription::unsetSupi()
{
    m_SupiIsSet = false;
}
utility::string_t BsfSubscription::getGpsi() const
{
    return m_Gpsi;
}

void BsfSubscription::setGpsi(const utility::string_t& value)
{
    m_Gpsi = value;
    m_GpsiIsSet = true;
}

bool BsfSubscription::gpsiIsSet() const
{
    return m_GpsiIsSet;
}

void BsfSubscription::unsetGpsi()
{
    m_GpsiIsSet = false;
}
std::shared_ptr<SnssaiDnnPair> BsfSubscription::getSnssaiDnnPairs() const
{
    return m_SnssaiDnnPairs;
}

void BsfSubscription::setSnssaiDnnPairs(const std::shared_ptr<SnssaiDnnPair>& value)
{
    m_SnssaiDnnPairs = value;
    m_SnssaiDnnPairsIsSet = true;
}

bool BsfSubscription::snssaiDnnPairsIsSet() const
{
    return m_SnssaiDnnPairsIsSet;
}

void BsfSubscription::unsetSnssaiDnnPairs()
{
    m_SnssaiDnnPairsIsSet = false;
}
std::vector<std::shared_ptr<SnssaiDnnPair>>& BsfSubscription::getAddSnssaiDnnPairs()
{
    return m_AddSnssaiDnnPairs;
}

void BsfSubscription::setAddSnssaiDnnPairs(const std::vector<std::shared_ptr<SnssaiDnnPair>>& value)
{
    m_AddSnssaiDnnPairs = value;
    m_AddSnssaiDnnPairsIsSet = true;
}

bool BsfSubscription::addSnssaiDnnPairsIsSet() const
{
    return m_AddSnssaiDnnPairsIsSet;
}

void BsfSubscription::unsetAddSnssaiDnnPairs()
{
    m_AddSnssaiDnnPairsIsSet = false;
}
utility::string_t BsfSubscription::getSuppFeat() const
{
    return m_SuppFeat;
}

void BsfSubscription::setSuppFeat(const utility::string_t& value)
{
    m_SuppFeat = value;
    m_SuppFeatIsSet = true;
}

bool BsfSubscription::suppFeatIsSet() const
{
    return m_SuppFeatIsSet;
}

void BsfSubscription::unsetSuppFeat()
{
    m_SuppFeatIsSet = false;
}
}
}
}
}


