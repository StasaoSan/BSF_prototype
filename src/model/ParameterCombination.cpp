/**
 * Nbsf_Management
 * Binding Support Management Service API.    Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).    All rights reserved.  
 *
 * The version of the OpenAPI document: 1.3.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ParameterCombination.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



ParameterCombination::ParameterCombination()
{
    m_Supi = utility::conversions::to_string_t("");
    m_SupiIsSet = false;
    m_Dnn = utility::conversions::to_string_t("");
    m_DnnIsSet = false;
    m_SnssaiIsSet = false;
}

ParameterCombination::~ParameterCombination()
{
}

void ParameterCombination::validate()
{
    // TODO: implement validation
}

web::json::value ParameterCombination::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_SupiIsSet)
    {
        val[utility::conversions::to_string_t(U("supi"))] = ModelBase::toJson(m_Supi);
    }
    if(m_DnnIsSet)
    {
        val[utility::conversions::to_string_t(U("dnn"))] = ModelBase::toJson(m_Dnn);
    }
    if(m_SnssaiIsSet)
    {
        val[utility::conversions::to_string_t(U("snssai"))] = ModelBase::toJson(m_Snssai);
    }

    return val;
}

bool ParameterCombination::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("supi"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("supi")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSupi;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSupi);
            setSupi(refVal_setSupi);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("dnn"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("dnn")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDnn;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDnn);
            setDnn(refVal_setDnn);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("snssai"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("snssai")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Snssai> refVal_setSnssai;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSnssai);
            setSnssai(refVal_setSnssai);
        }
    }
    return ok;
}

void ParameterCombination::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_SupiIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("supi")), m_Supi));
    }
    if(m_DnnIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("dnn")), m_Dnn));
    }
    if(m_SnssaiIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("snssai")), m_Snssai));
    }
}

bool ParameterCombination::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("supi"))))
    {
        utility::string_t refVal_setSupi;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("supi"))), refVal_setSupi );
        setSupi(refVal_setSupi);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("dnn"))))
    {
        utility::string_t refVal_setDnn;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("dnn"))), refVal_setDnn );
        setDnn(refVal_setDnn);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("snssai"))))
    {
        std::shared_ptr<Snssai> refVal_setSnssai;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("snssai"))), refVal_setSnssai );
        setSnssai(refVal_setSnssai);
    }
    return ok;
}

utility::string_t ParameterCombination::getSupi() const
{
    return m_Supi;
}

void ParameterCombination::setSupi(const utility::string_t& value)
{
    m_Supi = value;
    m_SupiIsSet = true;
}

bool ParameterCombination::supiIsSet() const
{
    return m_SupiIsSet;
}

void ParameterCombination::unsetSupi()
{
    m_SupiIsSet = false;
}
utility::string_t ParameterCombination::getDnn() const
{
    return m_Dnn;
}

void ParameterCombination::setDnn(const utility::string_t& value)
{
    m_Dnn = value;
    m_DnnIsSet = true;
}

bool ParameterCombination::dnnIsSet() const
{
    return m_DnnIsSet;
}

void ParameterCombination::unsetDnn()
{
    m_DnnIsSet = false;
}
std::shared_ptr<Snssai> ParameterCombination::getSnssai() const
{
    return m_Snssai;
}

void ParameterCombination::setSnssai(const std::shared_ptr<Snssai>& value)
{
    m_Snssai = value;
    m_SnssaiIsSet = true;
}

bool ParameterCombination::snssaiIsSet() const
{
    return m_SnssaiIsSet;
}

void ParameterCombination::unsetSnssai()
{
    m_SnssaiIsSet = false;
}
}
}
}
}


