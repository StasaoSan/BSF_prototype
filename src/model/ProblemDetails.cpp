/**
 * Nbsf_Management
 * Binding Support Management Service API.    Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).    All rights reserved.  
 *
 * The version of the OpenAPI document: 1.3.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ProblemDetails.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



ProblemDetails::ProblemDetails()
{
    m_Type = utility::conversions::to_string_t("");
    m_TypeIsSet = false;
    m_Title = utility::conversions::to_string_t("");
    m_TitleIsSet = false;
    m_Status = 0;
    m_StatusIsSet = false;
    m_Detail = utility::conversions::to_string_t("");
    m_DetailIsSet = false;
    m_Instance = utility::conversions::to_string_t("");
    m_InstanceIsSet = false;
    m_Cause = utility::conversions::to_string_t("");
    m_CauseIsSet = false;
    m_InvalidParamsIsSet = false;
    m_SupportedFeatures = utility::conversions::to_string_t("");
    m_SupportedFeaturesIsSet = false;
    m_AccessTokenErrorIsSet = false;
    m_AccessTokenRequestIsSet = false;
    m_NrfId = utility::conversions::to_string_t("");
    m_NrfIdIsSet = false;
}

ProblemDetails::~ProblemDetails()
{
}

void ProblemDetails::validate()
{
    // TODO: implement validation
}

web::json::value ProblemDetails::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t(U("type"))] = ModelBase::toJson(m_Type);
    }
    if(m_TitleIsSet)
    {
        val[utility::conversions::to_string_t(U("title"))] = ModelBase::toJson(m_Title);
    }
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t(U("status"))] = ModelBase::toJson(m_Status);
    }
    if(m_DetailIsSet)
    {
        val[utility::conversions::to_string_t(U("detail"))] = ModelBase::toJson(m_Detail);
    }
    if(m_InstanceIsSet)
    {
        val[utility::conversions::to_string_t(U("instance"))] = ModelBase::toJson(m_Instance);
    }
    if(m_CauseIsSet)
    {
        val[utility::conversions::to_string_t(U("cause"))] = ModelBase::toJson(m_Cause);
    }
    if(m_InvalidParamsIsSet)
    {
        val[utility::conversions::to_string_t(U("invalidParams"))] = ModelBase::toJson(m_InvalidParams);
    }
    if(m_SupportedFeaturesIsSet)
    {
        val[utility::conversions::to_string_t(U("supportedFeatures"))] = ModelBase::toJson(m_SupportedFeatures);
    }
    if(m_AccessTokenErrorIsSet)
    {
        val[utility::conversions::to_string_t(U("accessTokenError"))] = ModelBase::toJson(m_AccessTokenError);
    }
    if(m_AccessTokenRequestIsSet)
    {
        val[utility::conversions::to_string_t(U("accessTokenRequest"))] = ModelBase::toJson(m_AccessTokenRequest);
    }
    if(m_NrfIdIsSet)
    {
        val[utility::conversions::to_string_t(U("nrfId"))] = ModelBase::toJson(m_NrfId);
    }

    return val;
}

bool ProblemDetails::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setType);
            setType(refVal_setType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("title"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("title")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTitle;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTitle);
            setTitle(refVal_setTitle);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("status")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatus);
            setStatus(refVal_setStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("detail"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("detail")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDetail;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDetail);
            setDetail(refVal_setDetail);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("instance"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("instance")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setInstance;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInstance);
            setInstance(refVal_setInstance);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cause"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cause")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCause;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCause);
            setCause(refVal_setCause);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("invalidParams"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("invalidParams")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<InvalidParam>> refVal_setInvalidParams;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInvalidParams);
            setInvalidParams(refVal_setInvalidParams);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("supportedFeatures"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("supportedFeatures")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSupportedFeatures;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSupportedFeatures);
            setSupportedFeatures(refVal_setSupportedFeatures);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("accessTokenError"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("accessTokenError")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AccessTokenErr> refVal_setAccessTokenError;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAccessTokenError);
            setAccessTokenError(refVal_setAccessTokenError);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("accessTokenRequest"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("accessTokenRequest")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AccessTokenReq> refVal_setAccessTokenRequest;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAccessTokenRequest);
            setAccessTokenRequest(refVal_setAccessTokenRequest);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("nrfId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("nrfId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setNrfId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNrfId);
            setNrfId(refVal_setNrfId);
        }
    }
    return ok;
}

void ProblemDetails::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("type")), m_Type));
    }
    if(m_TitleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("title")), m_Title));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("status")), m_Status));
    }
    if(m_DetailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("detail")), m_Detail));
    }
    if(m_InstanceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("instance")), m_Instance));
    }
    if(m_CauseIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cause")), m_Cause));
    }
    if(m_InvalidParamsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("invalidParams")), m_InvalidParams));
    }
    if(m_SupportedFeaturesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("supportedFeatures")), m_SupportedFeatures));
    }
    if(m_AccessTokenErrorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("accessTokenError")), m_AccessTokenError));
    }
    if(m_AccessTokenRequestIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("accessTokenRequest")), m_AccessTokenRequest));
    }
    if(m_NrfIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("nrfId")), m_NrfId));
    }
}

bool ProblemDetails::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("type"))))
    {
        utility::string_t refVal_setType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("type"))), refVal_setType );
        setType(refVal_setType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("title"))))
    {
        utility::string_t refVal_setTitle;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("title"))), refVal_setTitle );
        setTitle(refVal_setTitle);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("status"))))
    {
        int32_t refVal_setStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("status"))), refVal_setStatus );
        setStatus(refVal_setStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("detail"))))
    {
        utility::string_t refVal_setDetail;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("detail"))), refVal_setDetail );
        setDetail(refVal_setDetail);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("instance"))))
    {
        utility::string_t refVal_setInstance;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("instance"))), refVal_setInstance );
        setInstance(refVal_setInstance);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cause"))))
    {
        utility::string_t refVal_setCause;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cause"))), refVal_setCause );
        setCause(refVal_setCause);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("invalidParams"))))
    {
        std::vector<std::shared_ptr<InvalidParam>> refVal_setInvalidParams;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("invalidParams"))), refVal_setInvalidParams );
        setInvalidParams(refVal_setInvalidParams);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("supportedFeatures"))))
    {
        utility::string_t refVal_setSupportedFeatures;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("supportedFeatures"))), refVal_setSupportedFeatures );
        setSupportedFeatures(refVal_setSupportedFeatures);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("accessTokenError"))))
    {
        std::shared_ptr<AccessTokenErr> refVal_setAccessTokenError;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("accessTokenError"))), refVal_setAccessTokenError );
        setAccessTokenError(refVal_setAccessTokenError);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("accessTokenRequest"))))
    {
        std::shared_ptr<AccessTokenReq> refVal_setAccessTokenRequest;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("accessTokenRequest"))), refVal_setAccessTokenRequest );
        setAccessTokenRequest(refVal_setAccessTokenRequest);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("nrfId"))))
    {
        utility::string_t refVal_setNrfId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("nrfId"))), refVal_setNrfId );
        setNrfId(refVal_setNrfId);
    }
    return ok;
}

utility::string_t ProblemDetails::getType() const
{
    return m_Type;
}

void ProblemDetails::setType(const utility::string_t& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool ProblemDetails::typeIsSet() const
{
    return m_TypeIsSet;
}

void ProblemDetails::unsetType()
{
    m_TypeIsSet = false;
}
utility::string_t ProblemDetails::getTitle() const
{
    return m_Title;
}

void ProblemDetails::setTitle(const utility::string_t& value)
{
    m_Title = value;
    m_TitleIsSet = true;
}

bool ProblemDetails::titleIsSet() const
{
    return m_TitleIsSet;
}

void ProblemDetails::unsetTitle()
{
    m_TitleIsSet = false;
}
int32_t ProblemDetails::getStatus() const
{
    return m_Status;
}

void ProblemDetails::setStatus(int32_t value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool ProblemDetails::statusIsSet() const
{
    return m_StatusIsSet;
}

void ProblemDetails::unsetStatus()
{
    m_StatusIsSet = false;
}
utility::string_t ProblemDetails::getDetail() const
{
    return m_Detail;
}

void ProblemDetails::setDetail(const utility::string_t& value)
{
    m_Detail = value;
    m_DetailIsSet = true;
}

bool ProblemDetails::detailIsSet() const
{
    return m_DetailIsSet;
}

void ProblemDetails::unsetDetail()
{
    m_DetailIsSet = false;
}
utility::string_t ProblemDetails::getInstance() const
{
    return m_Instance;
}

void ProblemDetails::setInstance(const utility::string_t& value)
{
    m_Instance = value;
    m_InstanceIsSet = true;
}

bool ProblemDetails::instanceIsSet() const
{
    return m_InstanceIsSet;
}

void ProblemDetails::unsetInstance()
{
    m_InstanceIsSet = false;
}
utility::string_t ProblemDetails::getCause() const
{
    return m_Cause;
}

void ProblemDetails::setCause(const utility::string_t& value)
{
    m_Cause = value;
    m_CauseIsSet = true;
}

bool ProblemDetails::causeIsSet() const
{
    return m_CauseIsSet;
}

void ProblemDetails::unsetCause()
{
    m_CauseIsSet = false;
}
std::vector<std::shared_ptr<InvalidParam>>& ProblemDetails::getInvalidParams()
{
    return m_InvalidParams;
}

void ProblemDetails::setInvalidParams(const std::vector<std::shared_ptr<InvalidParam>>& value)
{
    m_InvalidParams = value;
    m_InvalidParamsIsSet = true;
}

bool ProblemDetails::invalidParamsIsSet() const
{
    return m_InvalidParamsIsSet;
}

void ProblemDetails::unsetInvalidParams()
{
    m_InvalidParamsIsSet = false;
}
utility::string_t ProblemDetails::getSupportedFeatures() const
{
    return m_SupportedFeatures;
}

void ProblemDetails::setSupportedFeatures(const utility::string_t& value)
{
    m_SupportedFeatures = value;
    m_SupportedFeaturesIsSet = true;
}

bool ProblemDetails::supportedFeaturesIsSet() const
{
    return m_SupportedFeaturesIsSet;
}

void ProblemDetails::unsetSupportedFeatures()
{
    m_SupportedFeaturesIsSet = false;
}
std::shared_ptr<AccessTokenErr> ProblemDetails::getAccessTokenError() const
{
    return m_AccessTokenError;
}

void ProblemDetails::setAccessTokenError(const std::shared_ptr<AccessTokenErr>& value)
{
    m_AccessTokenError = value;
    m_AccessTokenErrorIsSet = true;
}

bool ProblemDetails::accessTokenErrorIsSet() const
{
    return m_AccessTokenErrorIsSet;
}

void ProblemDetails::unsetAccessTokenError()
{
    m_AccessTokenErrorIsSet = false;
}
std::shared_ptr<AccessTokenReq> ProblemDetails::getAccessTokenRequest() const
{
    return m_AccessTokenRequest;
}

void ProblemDetails::setAccessTokenRequest(const std::shared_ptr<AccessTokenReq>& value)
{
    m_AccessTokenRequest = value;
    m_AccessTokenRequestIsSet = true;
}

bool ProblemDetails::accessTokenRequestIsSet() const
{
    return m_AccessTokenRequestIsSet;
}

void ProblemDetails::unsetAccessTokenRequest()
{
    m_AccessTokenRequestIsSet = false;
}
utility::string_t ProblemDetails::getNrfId() const
{
    return m_NrfId;
}

void ProblemDetails::setNrfId(const utility::string_t& value)
{
    m_NrfId = value;
    m_NrfIdIsSet = true;
}

bool ProblemDetails::nrfIdIsSet() const
{
    return m_NrfIdIsSet;
}

void ProblemDetails::unsetNrfId()
{
    m_NrfIdIsSet = false;
}
}
}
}
}


